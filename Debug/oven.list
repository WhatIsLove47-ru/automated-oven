
oven.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a50  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013dc  08006b5c  08006b5c  00016b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f38  08007f38  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08007f38  08007f38  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007f38  08007f38  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f38  08007f38  00017f38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f3c  08007f3c  00017f3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007f40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000608  20000074  08007fb4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000067c  08007fb4  0002067c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00069e36  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003b53  00000000  00000000  00089ed3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002ba0  00000000  00000000  0008da28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002998  00000000  00000000  000905c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019669  00000000  00000000  00092f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015892  00000000  00000000  000ac5c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009d892  00000000  00000000  000c1e5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015f6ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c0fc  00000000  00000000  0015f768  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08006b44 	.word	0x08006b44

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08006b44 	.word	0x08006b44

0800014c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800015a:	2b00      	cmp	r3, #0
 800015c:	db0c      	blt.n	8000178 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800015e:	79fb      	ldrb	r3, [r7, #7]
 8000160:	f003 021f 	and.w	r2, r3, #31
 8000164:	4907      	ldr	r1, [pc, #28]	; (8000184 <__NVIC_ClearPendingIRQ+0x38>)
 8000166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800016a:	095b      	lsrs	r3, r3, #5
 800016c:	2001      	movs	r0, #1
 800016e:	fa00 f202 	lsl.w	r2, r0, r2
 8000172:	3360      	adds	r3, #96	; 0x60
 8000174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000178:	bf00      	nop
 800017a:	370c      	adds	r7, #12
 800017c:	46bd      	mov	sp, r7
 800017e:	bc80      	pop	{r7}
 8000180:	4770      	bx	lr
 8000182:	bf00      	nop
 8000184:	e000e100 	.word	0xe000e100

08000188 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800018c:	f003 f89a 	bl	80032c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000190:	f000 f89c 	bl	80002cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000194:	f000 fa4c 	bl	8000630 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000198:	f000 f962 	bl	8000460 <MX_SPI2_Init>
  MX_TIM3_Init();
 800019c:	f000 f9ee 	bl	800057c <MX_TIM3_Init>
  MX_RTC_Init();
 80001a0:	f000 f8f2 	bl	8000388 <MX_RTC_Init>
  MX_TIM1_Init();
 80001a4:	f000 f992 	bl	80004cc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	u8g2_Setup_st7920_s_128x64_f(&u8g2, U8G2_R0, U8x8ByteSTM32HWSPI,
 80001a8:	4b35      	ldr	r3, [pc, #212]	; (8000280 <main+0xf8>)
 80001aa:	4a36      	ldr	r2, [pc, #216]	; (8000284 <main+0xfc>)
 80001ac:	4936      	ldr	r1, [pc, #216]	; (8000288 <main+0x100>)
 80001ae:	4837      	ldr	r0, [pc, #220]	; (800028c <main+0x104>)
 80001b0:	f001 fb4c 	bl	800184c <u8g2_Setup_st7920_s_128x64_f>
			U8x8Stm32GPIOAndDelay);
	u8g2_InitDisplay(&u8g2); // send init sequence to the display, display is in sleep mode after this,
 80001b4:	4835      	ldr	r0, [pc, #212]	; (800028c <main+0x104>)
 80001b6:	f002 ffbe 	bl	8003136 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0); // wake up display
 80001ba:	2100      	movs	r1, #0
 80001bc:	4833      	ldr	r0, [pc, #204]	; (800028c <main+0x104>)
 80001be:	f002 ffc9 	bl	8003154 <u8x8_SetPowerSave>
	u8g2_SetFont(&u8g2, u8g2_font_6x12_t_cyrillic);
 80001c2:	4933      	ldr	r1, [pc, #204]	; (8000290 <main+0x108>)
 80001c4:	4831      	ldr	r0, [pc, #196]	; (800028c <main+0x104>)
 80001c6:	f002 f8cb 	bl	8002360 <u8g2_SetFont>
	u8g2_SetFontDirection(&u8g2, 0);
 80001ca:	2100      	movs	r1, #0
 80001cc:	482f      	ldr	r0, [pc, #188]	; (800028c <main+0x104>)
 80001ce:	f002 f8e1 	bl	8002394 <u8g2_SetFontDirection>

	ScreenUpdate(255);
 80001d2:	20ff      	movs	r0, #255	; 0xff
 80001d4:	f000 fd6e 	bl	8000cb4 <ScreenUpdate>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		if (EventFlag(&time_irq[0], &flag_irq[0], EXTI0_IRQn)) {
 80001d8:	2206      	movs	r2, #6
 80001da:	492e      	ldr	r1, [pc, #184]	; (8000294 <main+0x10c>)
 80001dc:	482e      	ldr	r0, [pc, #184]	; (8000298 <main+0x110>)
 80001de:	f000 fdc9 	bl	8000d74 <EventFlag>
 80001e2:	4603      	mov	r3, r0
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d003      	beq.n	80001f0 <main+0x68>
			activity = 0;
 80001e8:	4b2c      	ldr	r3, [pc, #176]	; (800029c <main+0x114>)
 80001ea:	2200      	movs	r2, #0
 80001ec:	701a      	strb	r2, [r3, #0]
			goto gotoUpdate;
 80001ee:	e03e      	b.n	800026e <main+0xe6>
		} else if (EventFlag(&time_irq[1], &flag_irq[1], EXTI1_IRQn)) {
 80001f0:	2207      	movs	r2, #7
 80001f2:	492b      	ldr	r1, [pc, #172]	; (80002a0 <main+0x118>)
 80001f4:	482b      	ldr	r0, [pc, #172]	; (80002a4 <main+0x11c>)
 80001f6:	f000 fdbd 	bl	8000d74 <EventFlag>
 80001fa:	4603      	mov	r3, r0
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d003      	beq.n	8000208 <main+0x80>
			activity = 1;
 8000200:	4b26      	ldr	r3, [pc, #152]	; (800029c <main+0x114>)
 8000202:	2201      	movs	r2, #1
 8000204:	701a      	strb	r2, [r3, #0]
			goto gotoUpdate;
 8000206:	e032      	b.n	800026e <main+0xe6>
		} else if (EventFlag(&time_irq[2], &flag_irq[2], EXTI2_IRQn)) {
 8000208:	2208      	movs	r2, #8
 800020a:	4927      	ldr	r1, [pc, #156]	; (80002a8 <main+0x120>)
 800020c:	4827      	ldr	r0, [pc, #156]	; (80002ac <main+0x124>)
 800020e:	f000 fdb1 	bl	8000d74 <EventFlag>
 8000212:	4603      	mov	r3, r0
 8000214:	2b00      	cmp	r3, #0
 8000216:	d125      	bne.n	8000264 <main+0xdc>
			goto gotoUpdate;
		} else if (EventFlag(&time_irq[3], &flag_irq[3], EXTI3_IRQn)) {
 8000218:	2209      	movs	r2, #9
 800021a:	4925      	ldr	r1, [pc, #148]	; (80002b0 <main+0x128>)
 800021c:	4825      	ldr	r0, [pc, #148]	; (80002b4 <main+0x12c>)
 800021e:	f000 fda9 	bl	8000d74 <EventFlag>
 8000222:	4603      	mov	r3, r0
 8000224:	2b00      	cmp	r3, #0
 8000226:	d11f      	bne.n	8000268 <main+0xe0>
			goto gotoUpdate;
		} else if (EventFlag(&time_irq[4], &flag_irq[4], EXTI4_IRQn)) {
 8000228:	220a      	movs	r2, #10
 800022a:	4923      	ldr	r1, [pc, #140]	; (80002b8 <main+0x130>)
 800022c:	4823      	ldr	r0, [pc, #140]	; (80002bc <main+0x134>)
 800022e:	f000 fda1 	bl	8000d74 <EventFlag>
 8000232:	4603      	mov	r3, r0
 8000234:	2b00      	cmp	r3, #0
 8000236:	d119      	bne.n	800026c <main+0xe4>
			goto gotoUpdate;
		}
		if (pointer != __HAL_TIM_GET_COUNTER(&htim1) / 2) {
 8000238:	4b21      	ldr	r3, [pc, #132]	; (80002c0 <main+0x138>)
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	461a      	mov	r2, r3
 800023e:	4b21      	ldr	r3, [pc, #132]	; (80002c4 <main+0x13c>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000244:	085b      	lsrs	r3, r3, #1
 8000246:	429a      	cmp	r2, r3
 8000248:	d007      	beq.n	800025a <main+0xd2>
			pointer = __HAL_TIM_GET_COUNTER(&htim1) / 2;
 800024a:	4b1e      	ldr	r3, [pc, #120]	; (80002c4 <main+0x13c>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000250:	085b      	lsrs	r3, r3, #1
 8000252:	b2da      	uxtb	r2, r3
 8000254:	4b1a      	ldr	r3, [pc, #104]	; (80002c0 <main+0x138>)
 8000256:	701a      	strb	r2, [r3, #0]
			goto gotoUpdate;
 8000258:	e009      	b.n	800026e <main+0xe6>
		} else
			if (update != 255) {
 800025a:	4b1b      	ldr	r3, [pc, #108]	; (80002c8 <main+0x140>)
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	2bff      	cmp	r3, #255	; 0xff
 8000260:	d0ba      	beq.n	80001d8 <main+0x50>
			gotoUpdate: ScreenUpdate(update);
 8000262:	e004      	b.n	800026e <main+0xe6>
			goto gotoUpdate;
 8000264:	bf00      	nop
 8000266:	e002      	b.n	800026e <main+0xe6>
			goto gotoUpdate;
 8000268:	bf00      	nop
 800026a:	e000      	b.n	800026e <main+0xe6>
			goto gotoUpdate;
 800026c:	bf00      	nop
			gotoUpdate: ScreenUpdate(update);
 800026e:	4b16      	ldr	r3, [pc, #88]	; (80002c8 <main+0x140>)
 8000270:	781b      	ldrb	r3, [r3, #0]
 8000272:	4618      	mov	r0, r3
 8000274:	f000 fd1e 	bl	8000cb4 <ScreenUpdate>
			update = 255;
 8000278:	4b13      	ldr	r3, [pc, #76]	; (80002c8 <main+0x140>)
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	701a      	strb	r2, [r3, #0]
		if (EventFlag(&time_irq[0], &flag_irq[0], EXTI0_IRQn)) {
 800027e:	e7ab      	b.n	80001d8 <main+0x50>
 8000280:	08000795 	.word	0x08000795
 8000284:	08000889 	.word	0x08000889
 8000288:	08007e58 	.word	0x08007e58
 800028c:	20000548 	.word	0x20000548
 8000290:	08006bd4 	.word	0x08006bd4
 8000294:	200000b8 	.word	0x200000b8
 8000298:	200005d0 	.word	0x200005d0
 800029c:	20000001 	.word	0x20000001
 80002a0:	200000b9 	.word	0x200000b9
 80002a4:	200005d4 	.word	0x200005d4
 80002a8:	200000ba 	.word	0x200000ba
 80002ac:	200005d8 	.word	0x200005d8
 80002b0:	200000bb 	.word	0x200000bb
 80002b4:	200005dc 	.word	0x200005dc
 80002b8:	200000bc 	.word	0x200000bc
 80002bc:	200005e0 	.word	0x200005e0
 80002c0:	200000b4 	.word	0x200000b4
 80002c4:	2000062c 	.word	0x2000062c
 80002c8:	20000002 	.word	0x20000002

080002cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b094      	sub	sp, #80	; 0x50
 80002d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002d6:	2228      	movs	r2, #40	; 0x28
 80002d8:	2100      	movs	r1, #0
 80002da:	4618      	mov	r0, r3
 80002dc:	f006 f818 	bl	8006310 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e0:	f107 0314 	add.w	r3, r7, #20
 80002e4:	2200      	movs	r2, #0
 80002e6:	601a      	str	r2, [r3, #0]
 80002e8:	605a      	str	r2, [r3, #4]
 80002ea:	609a      	str	r2, [r3, #8]
 80002ec:	60da      	str	r2, [r3, #12]
 80002ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002f0:	1d3b      	adds	r3, r7, #4
 80002f2:	2200      	movs	r2, #0
 80002f4:	601a      	str	r2, [r3, #0]
 80002f6:	605a      	str	r2, [r3, #4]
 80002f8:	609a      	str	r2, [r3, #8]
 80002fa:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80002fc:	2305      	movs	r3, #5
 80002fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000300:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000304:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000306:	2300      	movs	r3, #0
 8000308:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800030a:	2301      	movs	r3, #1
 800030c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800030e:	2301      	movs	r3, #1
 8000310:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000312:	2302      	movs	r3, #2
 8000314:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000316:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800031a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800031c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000320:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000322:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000326:	4618      	mov	r0, r3
 8000328:	f003 fbe0 	bl	8003aec <HAL_RCC_OscConfig>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000332:	f000 fd73 	bl	8000e1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000336:	230f      	movs	r3, #15
 8000338:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800033a:	2302      	movs	r3, #2
 800033c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800033e:	2300      	movs	r3, #0
 8000340:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000342:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000346:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000348:	2300      	movs	r3, #0
 800034a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800034c:	f107 0314 	add.w	r3, r7, #20
 8000350:	2102      	movs	r1, #2
 8000352:	4618      	mov	r0, r3
 8000354:	f003 fe4a 	bl	8003fec <HAL_RCC_ClockConfig>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800035e:	f000 fd5d 	bl	8000e1c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000362:	2301      	movs	r3, #1
 8000364:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000366:	f44f 7380 	mov.w	r3, #256	; 0x100
 800036a:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800036c:	1d3b      	adds	r3, r7, #4
 800036e:	4618      	mov	r0, r3
 8000370:	f003 ffc4 	bl	80042fc <HAL_RCCEx_PeriphCLKConfig>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800037a:	f000 fd4f 	bl	8000e1c <Error_Handler>
  }
}
 800037e:	bf00      	nop
 8000380:	3750      	adds	r7, #80	; 0x50
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}
	...

08000388 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b084      	sub	sp, #16
 800038c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800038e:	f107 030c 	add.w	r3, r7, #12
 8000392:	2100      	movs	r1, #0
 8000394:	460a      	mov	r2, r1
 8000396:	801a      	strh	r2, [r3, #0]
 8000398:	460a      	mov	r2, r1
 800039a:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 800039c:	2300      	movs	r3, #0
 800039e:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN RTC_Init 1 */
	RTC_AlarmTypeDef sAlarm = { 0 };
 80003a0:	463b      	mov	r3, r7
 80003a2:	2200      	movs	r2, #0
 80003a4:	601a      	str	r2, [r3, #0]
 80003a6:	605a      	str	r2, [r3, #4]
  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80003a8:	4b2b      	ldr	r3, [pc, #172]	; (8000458 <MX_RTC_Init+0xd0>)
 80003aa:	4a2c      	ldr	r2, [pc, #176]	; (800045c <MX_RTC_Init+0xd4>)
 80003ac:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80003ae:	4b2a      	ldr	r3, [pc, #168]	; (8000458 <MX_RTC_Init+0xd0>)
 80003b0:	f04f 32ff 	mov.w	r2, #4294967295
 80003b4:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80003b6:	4b28      	ldr	r3, [pc, #160]	; (8000458 <MX_RTC_Init+0xd0>)
 80003b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80003bc:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80003be:	4826      	ldr	r0, [pc, #152]	; (8000458 <MX_RTC_Init+0xd0>)
 80003c0:	f004 f90e 	bl	80045e0 <HAL_RTC_Init>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d001      	beq.n	80003ce <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80003ca:	f000 fd27 	bl	8000e1c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 80003ce:	2300      	movs	r3, #0
 80003d0:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = 0;
 80003d2:	2300      	movs	r3, #0
 80003d4:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = 0;
 80003d6:	2300      	movs	r3, #0
 80003d8:	73bb      	strb	r3, [r7, #14]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80003da:	f107 030c 	add.w	r3, r7, #12
 80003de:	2200      	movs	r2, #0
 80003e0:	4619      	mov	r1, r3
 80003e2:	481d      	ldr	r0, [pc, #116]	; (8000458 <MX_RTC_Init+0xd0>)
 80003e4:	f004 f992 	bl	800470c <HAL_RTC_SetTime>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <MX_RTC_Init+0x6a>
  {
    Error_Handler();
 80003ee:	f000 fd15 	bl	8000e1c <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 80003f2:	2301      	movs	r3, #1
 80003f4:	723b      	strb	r3, [r7, #8]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 80003f6:	2301      	movs	r3, #1
 80003f8:	727b      	strb	r3, [r7, #9]
  DateToUpdate.Date = 1;
 80003fa:	2301      	movs	r3, #1
 80003fc:	72bb      	strb	r3, [r7, #10]
  DateToUpdate.Year = 0;
 80003fe:	2300      	movs	r3, #0
 8000400:	72fb      	strb	r3, [r7, #11]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 8000402:	f107 0308 	add.w	r3, r7, #8
 8000406:	2200      	movs	r2, #0
 8000408:	4619      	mov	r1, r3
 800040a:	4813      	ldr	r0, [pc, #76]	; (8000458 <MX_RTC_Init+0xd0>)
 800040c:	f004 faee 	bl	80049ec <HAL_RTC_SetDate>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8000416:	f000 fd01 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

	sAlarm.Alarm = RTC_ALARM_A;
 800041a:	2300      	movs	r3, #0
 800041c:	607b      	str	r3, [r7, #4]
	sAlarm.AlarmTime.Hours = 0;
 800041e:	2300      	movs	r3, #0
 8000420:	703b      	strb	r3, [r7, #0]
	sAlarm.AlarmTime.Minutes = 0;
 8000422:	2300      	movs	r3, #0
 8000424:	707b      	strb	r3, [r7, #1]
	sAlarm.AlarmTime.Seconds = 30;
 8000426:	231e      	movs	r3, #30
 8000428:	70bb      	strb	r3, [r7, #2]

	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK) {
 800042a:	463b      	mov	r3, r7
 800042c:	2200      	movs	r2, #0
 800042e:	4619      	mov	r1, r3
 8000430:	4809      	ldr	r0, [pc, #36]	; (8000458 <MX_RTC_Init+0xd0>)
 8000432:	f004 fbe5 	bl	8004c00 <HAL_RTC_SetAlarm_IT>
 8000436:	4603      	mov	r3, r0
 8000438:	2b00      	cmp	r3, #0
 800043a:	d001      	beq.n	8000440 <MX_RTC_Init+0xb8>
		Error_Handler();
 800043c:	f000 fcee 	bl	8000e1c <Error_Handler>
	}

	HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0x0F, 0);
 8000440:	2200      	movs	r2, #0
 8000442:	210f      	movs	r1, #15
 8000444:	2029      	movs	r0, #41	; 0x29
 8000446:	f003 f8ba 	bl	80035be <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800044a:	2029      	movs	r0, #41	; 0x29
 800044c:	f003 f8d3 	bl	80035f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE END RTC_Init 2 */

}
 8000450:	bf00      	nop
 8000452:	3710      	adds	r7, #16
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}
 8000458:	200004dc 	.word	0x200004dc
 800045c:	40002800 	.word	0x40002800

08000460 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000464:	4b17      	ldr	r3, [pc, #92]	; (80004c4 <MX_SPI2_Init+0x64>)
 8000466:	4a18      	ldr	r2, [pc, #96]	; (80004c8 <MX_SPI2_Init+0x68>)
 8000468:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800046a:	4b16      	ldr	r3, [pc, #88]	; (80004c4 <MX_SPI2_Init+0x64>)
 800046c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000470:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000472:	4b14      	ldr	r3, [pc, #80]	; (80004c4 <MX_SPI2_Init+0x64>)
 8000474:	2200      	movs	r2, #0
 8000476:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000478:	4b12      	ldr	r3, [pc, #72]	; (80004c4 <MX_SPI2_Init+0x64>)
 800047a:	2200      	movs	r2, #0
 800047c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800047e:	4b11      	ldr	r3, [pc, #68]	; (80004c4 <MX_SPI2_Init+0x64>)
 8000480:	2200      	movs	r2, #0
 8000482:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000484:	4b0f      	ldr	r3, [pc, #60]	; (80004c4 <MX_SPI2_Init+0x64>)
 8000486:	2201      	movs	r2, #1
 8000488:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800048a:	4b0e      	ldr	r3, [pc, #56]	; (80004c4 <MX_SPI2_Init+0x64>)
 800048c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000490:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000492:	4b0c      	ldr	r3, [pc, #48]	; (80004c4 <MX_SPI2_Init+0x64>)
 8000494:	2228      	movs	r2, #40	; 0x28
 8000496:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000498:	4b0a      	ldr	r3, [pc, #40]	; (80004c4 <MX_SPI2_Init+0x64>)
 800049a:	2200      	movs	r2, #0
 800049c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800049e:	4b09      	ldr	r3, [pc, #36]	; (80004c4 <MX_SPI2_Init+0x64>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004a4:	4b07      	ldr	r3, [pc, #28]	; (80004c4 <MX_SPI2_Init+0x64>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80004aa:	4b06      	ldr	r3, [pc, #24]	; (80004c4 <MX_SPI2_Init+0x64>)
 80004ac:	220a      	movs	r2, #10
 80004ae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80004b0:	4804      	ldr	r0, [pc, #16]	; (80004c4 <MX_SPI2_Init+0x64>)
 80004b2:	f004 ff23 	bl	80052fc <HAL_SPI_Init>
 80004b6:	4603      	mov	r3, r0
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d001      	beq.n	80004c0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80004bc:	f000 fcae 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80004c0:	bf00      	nop
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	200004f0 	.word	0x200004f0
 80004c8:	40003800 	.word	0x40003800

080004cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b08c      	sub	sp, #48	; 0x30
 80004d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80004d2:	f107 030c 	add.w	r3, r7, #12
 80004d6:	2224      	movs	r2, #36	; 0x24
 80004d8:	2100      	movs	r1, #0
 80004da:	4618      	mov	r0, r3
 80004dc:	f005 ff18 	bl	8006310 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004e0:	1d3b      	adds	r3, r7, #4
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004e8:	4b22      	ldr	r3, [pc, #136]	; (8000574 <MX_TIM1_Init+0xa8>)
 80004ea:	4a23      	ldr	r2, [pc, #140]	; (8000578 <MX_TIM1_Init+0xac>)
 80004ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80004ee:	4b21      	ldr	r3, [pc, #132]	; (8000574 <MX_TIM1_Init+0xa8>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004f4:	4b1f      	ldr	r3, [pc, #124]	; (8000574 <MX_TIM1_Init+0xa8>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80004fa:	4b1e      	ldr	r3, [pc, #120]	; (8000574 <MX_TIM1_Init+0xa8>)
 80004fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000500:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000502:	4b1c      	ldr	r3, [pc, #112]	; (8000574 <MX_TIM1_Init+0xa8>)
 8000504:	2200      	movs	r2, #0
 8000506:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000508:	4b1a      	ldr	r3, [pc, #104]	; (8000574 <MX_TIM1_Init+0xa8>)
 800050a:	2200      	movs	r2, #0
 800050c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800050e:	4b19      	ldr	r3, [pc, #100]	; (8000574 <MX_TIM1_Init+0xa8>)
 8000510:	2200      	movs	r2, #0
 8000512:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000514:	2301      	movs	r3, #1
 8000516:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000518:	2300      	movs	r3, #0
 800051a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800051c:	2301      	movs	r3, #1
 800051e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000520:	2300      	movs	r3, #0
 8000522:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 8000524:	2305      	movs	r3, #5
 8000526:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000528:	2300      	movs	r3, #0
 800052a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800052c:	2301      	movs	r3, #1
 800052e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000530:	2300      	movs	r3, #0
 8000532:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 5;
 8000534:	2305      	movs	r3, #5
 8000536:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000538:	f107 030c 	add.w	r3, r7, #12
 800053c:	4619      	mov	r1, r3
 800053e:	480d      	ldr	r0, [pc, #52]	; (8000574 <MX_TIM1_Init+0xa8>)
 8000540:	f005 f991 	bl	8005866 <HAL_TIM_Encoder_Init>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800054a:	f000 fc67 	bl	8000e1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800054e:	2300      	movs	r3, #0
 8000550:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000552:	2300      	movs	r3, #0
 8000554:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000556:	1d3b      	adds	r3, r7, #4
 8000558:	4619      	mov	r1, r3
 800055a:	4806      	ldr	r0, [pc, #24]	; (8000574 <MX_TIM1_Init+0xa8>)
 800055c:	f005 fe3e 	bl	80061dc <HAL_TIMEx_MasterConfigSynchronization>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000566:	f000 fc59 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800056a:	bf00      	nop
 800056c:	3730      	adds	r7, #48	; 0x30
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	2000062c 	.word	0x2000062c
 8000578:	40012c00 	.word	0x40012c00

0800057c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b08a      	sub	sp, #40	; 0x28
 8000580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000582:	f107 0320 	add.w	r3, r7, #32
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800058c:	1d3b      	adds	r3, r7, #4
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]
 8000598:	611a      	str	r2, [r3, #16]
 800059a:	615a      	str	r2, [r3, #20]
 800059c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800059e:	4b22      	ldr	r3, [pc, #136]	; (8000628 <MX_TIM3_Init+0xac>)
 80005a0:	4a22      	ldr	r2, [pc, #136]	; (800062c <MX_TIM3_Init+0xb0>)
 80005a2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 80005a4:	4b20      	ldr	r3, [pc, #128]	; (8000628 <MX_TIM3_Init+0xac>)
 80005a6:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80005aa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ac:	4b1e      	ldr	r3, [pc, #120]	; (8000628 <MX_TIM3_Init+0xac>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80005b2:	4b1d      	ldr	r3, [pc, #116]	; (8000628 <MX_TIM3_Init+0xac>)
 80005b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005b8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005ba:	4b1b      	ldr	r3, [pc, #108]	; (8000628 <MX_TIM3_Init+0xac>)
 80005bc:	2200      	movs	r2, #0
 80005be:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005c0:	4b19      	ldr	r3, [pc, #100]	; (8000628 <MX_TIM3_Init+0xac>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80005c6:	4818      	ldr	r0, [pc, #96]	; (8000628 <MX_TIM3_Init+0xac>)
 80005c8:	f005 f8fe 	bl	80057c8 <HAL_TIM_PWM_Init>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80005d2:	f000 fc23 	bl	8000e1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005d6:	2300      	movs	r3, #0
 80005d8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005da:	2300      	movs	r3, #0
 80005dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80005de:	f107 0320 	add.w	r3, r7, #32
 80005e2:	4619      	mov	r1, r3
 80005e4:	4810      	ldr	r0, [pc, #64]	; (8000628 <MX_TIM3_Init+0xac>)
 80005e6:	f005 fdf9 	bl	80061dc <HAL_TIMEx_MasterConfigSynchronization>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80005f0:	f000 fc14 	bl	8000e1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005f4:	2360      	movs	r3, #96	; 0x60
 80005f6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005fc:	2300      	movs	r3, #0
 80005fe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000600:	2300      	movs	r3, #0
 8000602:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000604:	1d3b      	adds	r3, r7, #4
 8000606:	2208      	movs	r2, #8
 8000608:	4619      	mov	r1, r3
 800060a:	4807      	ldr	r0, [pc, #28]	; (8000628 <MX_TIM3_Init+0xac>)
 800060c:	f005 fb1a 	bl	8005c44 <HAL_TIM_PWM_ConfigChannel>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000616:	f000 fc01 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800061a:	4803      	ldr	r0, [pc, #12]	; (8000628 <MX_TIM3_Init+0xac>)
 800061c:	f000 fd08 	bl	8001030 <HAL_TIM_MspPostInit>

}
 8000620:	bf00      	nop
 8000622:	3728      	adds	r7, #40	; 0x28
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	200005e4 	.word	0x200005e4
 800062c:	40000400 	.word	0x40000400

08000630 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b088      	sub	sp, #32
 8000634:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000636:	f107 0310 	add.w	r3, r7, #16
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000644:	4b4e      	ldr	r3, [pc, #312]	; (8000780 <MX_GPIO_Init+0x150>)
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	4a4d      	ldr	r2, [pc, #308]	; (8000780 <MX_GPIO_Init+0x150>)
 800064a:	f043 0310 	orr.w	r3, r3, #16
 800064e:	6193      	str	r3, [r2, #24]
 8000650:	4b4b      	ldr	r3, [pc, #300]	; (8000780 <MX_GPIO_Init+0x150>)
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	f003 0310 	and.w	r3, r3, #16
 8000658:	60fb      	str	r3, [r7, #12]
 800065a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800065c:	4b48      	ldr	r3, [pc, #288]	; (8000780 <MX_GPIO_Init+0x150>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	4a47      	ldr	r2, [pc, #284]	; (8000780 <MX_GPIO_Init+0x150>)
 8000662:	f043 0320 	orr.w	r3, r3, #32
 8000666:	6193      	str	r3, [r2, #24]
 8000668:	4b45      	ldr	r3, [pc, #276]	; (8000780 <MX_GPIO_Init+0x150>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	f003 0320 	and.w	r3, r3, #32
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000674:	4b42      	ldr	r3, [pc, #264]	; (8000780 <MX_GPIO_Init+0x150>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	4a41      	ldr	r2, [pc, #260]	; (8000780 <MX_GPIO_Init+0x150>)
 800067a:	f043 0304 	orr.w	r3, r3, #4
 800067e:	6193      	str	r3, [r2, #24]
 8000680:	4b3f      	ldr	r3, [pc, #252]	; (8000780 <MX_GPIO_Init+0x150>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	f003 0304 	and.w	r3, r3, #4
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800068c:	4b3c      	ldr	r3, [pc, #240]	; (8000780 <MX_GPIO_Init+0x150>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	4a3b      	ldr	r2, [pc, #236]	; (8000780 <MX_GPIO_Init+0x150>)
 8000692:	f043 0308 	orr.w	r3, r3, #8
 8000696:	6193      	str	r3, [r2, #24]
 8000698:	4b39      	ldr	r3, [pc, #228]	; (8000780 <MX_GPIO_Init+0x150>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	f003 0308 	and.w	r3, r3, #8
 80006a0:	603b      	str	r3, [r7, #0]
 80006a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80006a4:	2201      	movs	r2, #1
 80006a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006aa:	4836      	ldr	r0, [pc, #216]	; (8000784 <MX_GPIO_Init+0x154>)
 80006ac:	f003 f9e2 	bl	8003a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 80006b0:	2201      	movs	r2, #1
 80006b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006b6:	4834      	ldr	r0, [pc, #208]	; (8000788 <MX_GPIO_Init+0x158>)
 80006b8:	f003 f9dc 	bl	8003a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80006bc:	230f      	movs	r3, #15
 80006be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006c0:	4b32      	ldr	r3, [pc, #200]	; (800078c <MX_GPIO_Init+0x15c>)
 80006c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006c4:	2301      	movs	r3, #1
 80006c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c8:	f107 0310 	add.w	r3, r7, #16
 80006cc:	4619      	mov	r1, r3
 80006ce:	482e      	ldr	r0, [pc, #184]	; (8000788 <MX_GPIO_Init+0x158>)
 80006d0:	f002 ffba 	bl	8003648 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80006d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006da:	2301      	movs	r3, #1
 80006dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	2300      	movs	r3, #0
 80006e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006e2:	2303      	movs	r3, #3
 80006e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e6:	f107 0310 	add.w	r3, r7, #16
 80006ea:	4619      	mov	r1, r3
 80006ec:	4825      	ldr	r0, [pc, #148]	; (8000784 <MX_GPIO_Init+0x154>)
 80006ee:	f002 ffab 	bl	8003648 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80006f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f8:	2301      	movs	r3, #1
 80006fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000700:	2303      	movs	r3, #3
 8000702:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000704:	f107 0310 	add.w	r3, r7, #16
 8000708:	4619      	mov	r1, r3
 800070a:	481f      	ldr	r0, [pc, #124]	; (8000788 <MX_GPIO_Init+0x158>)
 800070c:	f002 ff9c 	bl	8003648 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000710:	2310      	movs	r3, #16
 8000712:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000714:	4b1e      	ldr	r3, [pc, #120]	; (8000790 <MX_GPIO_Init+0x160>)
 8000716:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000718:	2301      	movs	r3, #1
 800071a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800071c:	f107 0310 	add.w	r3, r7, #16
 8000720:	4619      	mov	r1, r3
 8000722:	4818      	ldr	r0, [pc, #96]	; (8000784 <MX_GPIO_Init+0x154>)
 8000724:	f002 ff90 	bl	8003648 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000728:	2200      	movs	r2, #0
 800072a:	2100      	movs	r1, #0
 800072c:	2006      	movs	r0, #6
 800072e:	f002 ff46 	bl	80035be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000732:	2006      	movs	r0, #6
 8000734:	f002 ff5f 	bl	80035f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000738:	2200      	movs	r2, #0
 800073a:	2100      	movs	r1, #0
 800073c:	2007      	movs	r0, #7
 800073e:	f002 ff3e 	bl	80035be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000742:	2007      	movs	r0, #7
 8000744:	f002 ff57 	bl	80035f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000748:	2200      	movs	r2, #0
 800074a:	2100      	movs	r1, #0
 800074c:	2008      	movs	r0, #8
 800074e:	f002 ff36 	bl	80035be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000752:	2008      	movs	r0, #8
 8000754:	f002 ff4f 	bl	80035f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000758:	2200      	movs	r2, #0
 800075a:	2100      	movs	r1, #0
 800075c:	2009      	movs	r0, #9
 800075e:	f002 ff2e 	bl	80035be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000762:	2009      	movs	r0, #9
 8000764:	f002 ff47 	bl	80035f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000768:	2200      	movs	r2, #0
 800076a:	2100      	movs	r1, #0
 800076c:	200a      	movs	r0, #10
 800076e:	f002 ff26 	bl	80035be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000772:	200a      	movs	r0, #10
 8000774:	f002 ff3f 	bl	80035f6 <HAL_NVIC_EnableIRQ>

}
 8000778:	bf00      	nop
 800077a:	3720      	adds	r7, #32
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	40021000 	.word	0x40021000
 8000784:	40010c00 	.word	0x40010c00
 8000788:	40010800 	.word	0x40010800
 800078c:	10210000 	.word	0x10210000
 8000790:	10310000 	.word	0x10310000

08000794 <U8x8Stm32GPIOAndDelay>:

/* USER CODE BEGIN 4 */
uint8_t U8x8Stm32GPIOAndDelay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int,
		void *arg_ptr) {
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0
 800079a:	60f8      	str	r0, [r7, #12]
 800079c:	607b      	str	r3, [r7, #4]
 800079e:	460b      	mov	r3, r1
 80007a0:	72fb      	strb	r3, [r7, #11]
 80007a2:	4613      	mov	r3, r2
 80007a4:	72bb      	strb	r3, [r7, #10]
	/* STM32 supports HW SPI, Remove unused cases like U8X8_MSG_DELAY_XXX & U8X8_MSG_GPIO_XXX */
	switch (msg) {
 80007a6:	7afb      	ldrb	r3, [r7, #11]
 80007a8:	3b28      	subs	r3, #40	; 0x28
 80007aa:	2b23      	cmp	r3, #35	; 0x23
 80007ac:	d85f      	bhi.n	800086e <U8x8Stm32GPIOAndDelay+0xda>
 80007ae:	a201      	add	r2, pc, #4	; (adr r2, 80007b4 <U8x8Stm32GPIOAndDelay+0x20>)
 80007b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007b4:	08000873 	.word	0x08000873
 80007b8:	08000845 	.word	0x08000845
 80007bc:	0800086f 	.word	0x0800086f
 80007c0:	0800086f 	.word	0x0800086f
 80007c4:	0800086f 	.word	0x0800086f
 80007c8:	0800086f 	.word	0x0800086f
 80007cc:	0800086f 	.word	0x0800086f
 80007d0:	0800086f 	.word	0x0800086f
 80007d4:	0800086f 	.word	0x0800086f
 80007d8:	0800086f 	.word	0x0800086f
 80007dc:	0800086f 	.word	0x0800086f
 80007e0:	0800086f 	.word	0x0800086f
 80007e4:	0800086f 	.word	0x0800086f
 80007e8:	0800086f 	.word	0x0800086f
 80007ec:	0800086f 	.word	0x0800086f
 80007f0:	0800086f 	.word	0x0800086f
 80007f4:	0800086f 	.word	0x0800086f
 80007f8:	0800086f 	.word	0x0800086f
 80007fc:	0800086f 	.word	0x0800086f
 8000800:	0800086f 	.word	0x0800086f
 8000804:	0800086f 	.word	0x0800086f
 8000808:	0800086f 	.word	0x0800086f
 800080c:	0800086f 	.word	0x0800086f
 8000810:	0800086f 	.word	0x0800086f
 8000814:	0800086f 	.word	0x0800086f
 8000818:	0800086f 	.word	0x0800086f
 800081c:	0800086f 	.word	0x0800086f
 8000820:	0800086f 	.word	0x0800086f
 8000824:	0800086f 	.word	0x0800086f
 8000828:	0800086f 	.word	0x0800086f
 800082c:	0800086f 	.word	0x0800086f
 8000830:	0800086f 	.word	0x0800086f
 8000834:	0800086f 	.word	0x0800086f
 8000838:	0800084f 	.word	0x0800084f
 800083c:	08000873 	.word	0x08000873
 8000840:	0800085f 	.word	0x0800085f
	case U8X8_MSG_GPIO_AND_DELAY_INIT:
		/* Insert codes for initialization */
		break;
	case U8X8_MSG_DELAY_MILLI:
		/* ms Delay */
		HAL_Delay(arg_int);
 8000844:	7abb      	ldrb	r3, [r7, #10]
 8000846:	4618      	mov	r0, r3
 8000848:	f002 fd9e 	bl	8003388 <HAL_Delay>
		break;
 800084c:	e012      	b.n	8000874 <U8x8Stm32GPIOAndDelay+0xe0>
	case U8X8_MSG_GPIO_CS:
		/* Insert codes for SS pin control */
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, arg_int);
 800084e:	7abb      	ldrb	r3, [r7, #10]
 8000850:	461a      	mov	r2, r3
 8000852:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000856:	480a      	ldr	r0, [pc, #40]	; (8000880 <U8x8Stm32GPIOAndDelay+0xec>)
 8000858:	f003 f90c 	bl	8003a74 <HAL_GPIO_WritePin>
		break;
 800085c:	e00a      	b.n	8000874 <U8x8Stm32GPIOAndDelay+0xe0>
		/* Insert codes for DC pin control */
		//HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, arg_int);
		break;
	case U8X8_MSG_GPIO_RESET:
		/* Insert codes for RST pin control */
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, arg_int);
 800085e:	7abb      	ldrb	r3, [r7, #10]
 8000860:	461a      	mov	r2, r3
 8000862:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000866:	4807      	ldr	r0, [pc, #28]	; (8000884 <U8x8Stm32GPIOAndDelay+0xf0>)
 8000868:	f003 f904 	bl	8003a74 <HAL_GPIO_WritePin>
		break;
 800086c:	e002      	b.n	8000874 <U8x8Stm32GPIOAndDelay+0xe0>
	default:
		//u8x8_SetGPIOResult(u8x8, 1);
		return 1;
 800086e:	2301      	movs	r3, #1
 8000870:	e001      	b.n	8000876 <U8x8Stm32GPIOAndDelay+0xe2>
		break;
 8000872:	bf00      	nop
	}
	return 1;
 8000874:	2301      	movs	r3, #1
}
 8000876:	4618      	mov	r0, r3
 8000878:	3710      	adds	r7, #16
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40010c00 	.word	0x40010c00
 8000884:	40010800 	.word	0x40010800

08000888 <U8x8ByteSTM32HWSPI>:

uint8_t U8x8ByteSTM32HWSPI(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int,
		void *arg_ptr) {
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0
 800088e:	60f8      	str	r0, [r7, #12]
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	460b      	mov	r3, r1
 8000894:	72fb      	strb	r3, [r7, #11]
 8000896:	4613      	mov	r3, r2
 8000898:	72bb      	strb	r3, [r7, #10]
	switch (msg) {
 800089a:	7afb      	ldrb	r3, [r7, #11]
 800089c:	3b14      	subs	r3, #20
 800089e:	2b0c      	cmp	r3, #12
 80008a0:	d848      	bhi.n	8000934 <U8x8ByteSTM32HWSPI+0xac>
 80008a2:	a201      	add	r2, pc, #4	; (adr r2, 80008a8 <U8x8ByteSTM32HWSPI+0x20>)
 80008a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008a8:	08000939 	.word	0x08000939
 80008ac:	08000935 	.word	0x08000935
 80008b0:	08000935 	.word	0x08000935
 80008b4:	080008dd 	.word	0x080008dd
 80008b8:	08000905 	.word	0x08000905
 80008bc:	0800091d 	.word	0x0800091d
 80008c0:	08000935 	.word	0x08000935
 80008c4:	08000935 	.word	0x08000935
 80008c8:	08000935 	.word	0x08000935
 80008cc:	08000935 	.word	0x08000935
 80008d0:	08000935 	.word	0x08000935
 80008d4:	08000935 	.word	0x08000935
 80008d8:	080008f7 	.word	0x080008f7
	case U8X8_MSG_BYTE_SEND:
		/* Insert codes to transmit data */
		if (HAL_SPI_Transmit(&hspi2, arg_ptr, arg_int, 1000) != HAL_OK)
 80008dc:	7abb      	ldrb	r3, [r7, #10]
 80008de:	b29a      	uxth	r2, r3
 80008e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008e4:	6879      	ldr	r1, [r7, #4]
 80008e6:	4818      	ldr	r0, [pc, #96]	; (8000948 <U8x8ByteSTM32HWSPI+0xc0>)
 80008e8:	f004 fd8c 	bl	8005404 <HAL_SPI_Transmit>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d024      	beq.n	800093c <U8x8ByteSTM32HWSPI+0xb4>
			return 0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	e024      	b.n	8000940 <U8x8ByteSTM32HWSPI+0xb8>
	case U8X8_MSG_BYTE_INIT:
		/* Insert codes to begin SPI transmission */
		break;
	case U8X8_MSG_BYTE_SET_DC:
		/* Control DC pin, U8X8_MSG_GPIO_DC will be called */
		u8x8_gpio_SetDC(u8x8, arg_int);
 80008f6:	7abb      	ldrb	r3, [r7, #10]
 80008f8:	461a      	mov	r2, r3
 80008fa:	214a      	movs	r1, #74	; 0x4a
 80008fc:	68f8      	ldr	r0, [r7, #12]
 80008fe:	f002 fc49 	bl	8003194 <u8x8_gpio_call>
		break;
 8000902:	e01c      	b.n	800093e <U8x8ByteSTM32HWSPI+0xb6>
	case U8X8_MSG_BYTE_START_TRANSFER:
		/* Select slave, U8X8_MSG_GPIO_CS will be called */
		u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	461a      	mov	r2, r3
 800090c:	2149      	movs	r1, #73	; 0x49
 800090e:	68f8      	ldr	r0, [r7, #12]
 8000910:	f002 fc40 	bl	8003194 <u8x8_gpio_call>
		HAL_Delay(1);
 8000914:	2001      	movs	r0, #1
 8000916:	f002 fd37 	bl	8003388 <HAL_Delay>
		break;
 800091a:	e010      	b.n	800093e <U8x8ByteSTM32HWSPI+0xb6>
	case U8X8_MSG_BYTE_END_TRANSFER:
		HAL_Delay(1);
 800091c:	2001      	movs	r0, #1
 800091e:	f002 fd33 	bl	8003388 <HAL_Delay>
		/* Insert codes to end SPI transmission */
		u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	785b      	ldrb	r3, [r3, #1]
 8000928:	461a      	mov	r2, r3
 800092a:	2149      	movs	r1, #73	; 0x49
 800092c:	68f8      	ldr	r0, [r7, #12]
 800092e:	f002 fc31 	bl	8003194 <u8x8_gpio_call>
		break;
 8000932:	e004      	b.n	800093e <U8x8ByteSTM32HWSPI+0xb6>
	default:
		return 0;
 8000934:	2300      	movs	r3, #0
 8000936:	e003      	b.n	8000940 <U8x8ByteSTM32HWSPI+0xb8>
		break;
 8000938:	bf00      	nop
 800093a:	e000      	b.n	800093e <U8x8ByteSTM32HWSPI+0xb6>
		break;
 800093c:	bf00      	nop
	}
	return 1;
 800093e:	2301      	movs	r3, #1
}
 8000940:	4618      	mov	r0, r3
 8000942:	3710      	adds	r7, #16
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	200004f0 	.word	0x200004f0

0800094c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 8000956:	88fb      	ldrh	r3, [r7, #6]
 8000958:	3b01      	subs	r3, #1
 800095a:	2b0f      	cmp	r3, #15
 800095c:	d87c      	bhi.n	8000a58 <HAL_GPIO_EXTI_Callback+0x10c>
 800095e:	a201      	add	r2, pc, #4	; (adr r2, 8000964 <HAL_GPIO_EXTI_Callback+0x18>)
 8000960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000964:	080009a5 	.word	0x080009a5
 8000968:	080009c9 	.word	0x080009c9
 800096c:	08000a59 	.word	0x08000a59
 8000970:	080009ed 	.word	0x080009ed
 8000974:	08000a59 	.word	0x08000a59
 8000978:	08000a59 	.word	0x08000a59
 800097c:	08000a59 	.word	0x08000a59
 8000980:	08000a11 	.word	0x08000a11
 8000984:	08000a59 	.word	0x08000a59
 8000988:	08000a59 	.word	0x08000a59
 800098c:	08000a59 	.word	0x08000a59
 8000990:	08000a59 	.word	0x08000a59
 8000994:	08000a59 	.word	0x08000a59
 8000998:	08000a59 	.word	0x08000a59
 800099c:	08000a59 	.word	0x08000a59
 80009a0:	08000a35 	.word	0x08000a35
	case GPIO_PIN_0:
		HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80009a4:	2006      	movs	r0, #6
 80009a6:	f002 fe34 	bl	8003612 <HAL_NVIC_DisableIRQ>
		flag_irq[0]++;
 80009aa:	4b2d      	ldr	r3, [pc, #180]	; (8000a60 <HAL_GPIO_EXTI_Callback+0x114>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	3301      	adds	r3, #1
 80009b0:	b2da      	uxtb	r2, r3
 80009b2:	4b2b      	ldr	r3, [pc, #172]	; (8000a60 <HAL_GPIO_EXTI_Callback+0x114>)
 80009b4:	701a      	strb	r2, [r3, #0]
		time_irq[0] = HAL_GetTick();
 80009b6:	f002 fcdd 	bl	8003374 <HAL_GetTick>
 80009ba:	4602      	mov	r2, r0
 80009bc:	4b29      	ldr	r3, [pc, #164]	; (8000a64 <HAL_GPIO_EXTI_Callback+0x118>)
 80009be:	601a      	str	r2, [r3, #0]
		update = 0;
 80009c0:	4b29      	ldr	r3, [pc, #164]	; (8000a68 <HAL_GPIO_EXTI_Callback+0x11c>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	701a      	strb	r2, [r3, #0]
		break;
 80009c6:	e047      	b.n	8000a58 <HAL_GPIO_EXTI_Callback+0x10c>
	case GPIO_PIN_1:
		HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 80009c8:	2007      	movs	r0, #7
 80009ca:	f002 fe22 	bl	8003612 <HAL_NVIC_DisableIRQ>
		flag_irq[1]++;
 80009ce:	4b24      	ldr	r3, [pc, #144]	; (8000a60 <HAL_GPIO_EXTI_Callback+0x114>)
 80009d0:	785b      	ldrb	r3, [r3, #1]
 80009d2:	3301      	adds	r3, #1
 80009d4:	b2da      	uxtb	r2, r3
 80009d6:	4b22      	ldr	r3, [pc, #136]	; (8000a60 <HAL_GPIO_EXTI_Callback+0x114>)
 80009d8:	705a      	strb	r2, [r3, #1]
		time_irq[1] = HAL_GetTick();
 80009da:	f002 fccb 	bl	8003374 <HAL_GetTick>
 80009de:	4602      	mov	r2, r0
 80009e0:	4b20      	ldr	r3, [pc, #128]	; (8000a64 <HAL_GPIO_EXTI_Callback+0x118>)
 80009e2:	605a      	str	r2, [r3, #4]
		update = 1;
 80009e4:	4b20      	ldr	r3, [pc, #128]	; (8000a68 <HAL_GPIO_EXTI_Callback+0x11c>)
 80009e6:	2201      	movs	r2, #1
 80009e8:	701a      	strb	r2, [r3, #0]
		break;
 80009ea:	e035      	b.n	8000a58 <HAL_GPIO_EXTI_Callback+0x10c>
	case GPIO_PIN_2:
		HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 80009ec:	2008      	movs	r0, #8
 80009ee:	f002 fe10 	bl	8003612 <HAL_NVIC_DisableIRQ>
		flag_irq[2]++;
 80009f2:	4b1b      	ldr	r3, [pc, #108]	; (8000a60 <HAL_GPIO_EXTI_Callback+0x114>)
 80009f4:	789b      	ldrb	r3, [r3, #2]
 80009f6:	3301      	adds	r3, #1
 80009f8:	b2da      	uxtb	r2, r3
 80009fa:	4b19      	ldr	r3, [pc, #100]	; (8000a60 <HAL_GPIO_EXTI_Callback+0x114>)
 80009fc:	709a      	strb	r2, [r3, #2]
		time_irq[2] = HAL_GetTick();
 80009fe:	f002 fcb9 	bl	8003374 <HAL_GetTick>
 8000a02:	4602      	mov	r2, r0
 8000a04:	4b17      	ldr	r3, [pc, #92]	; (8000a64 <HAL_GPIO_EXTI_Callback+0x118>)
 8000a06:	609a      	str	r2, [r3, #8]
		update = 2;
 8000a08:	4b17      	ldr	r3, [pc, #92]	; (8000a68 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000a0a:	2202      	movs	r2, #2
 8000a0c:	701a      	strb	r2, [r3, #0]
		break;
 8000a0e:	e023      	b.n	8000a58 <HAL_GPIO_EXTI_Callback+0x10c>
	case GPIO_PIN_3:
		HAL_NVIC_DisableIRQ(EXTI3_IRQn);
 8000a10:	2009      	movs	r0, #9
 8000a12:	f002 fdfe 	bl	8003612 <HAL_NVIC_DisableIRQ>
		flag_irq[3]++;
 8000a16:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <HAL_GPIO_EXTI_Callback+0x114>)
 8000a18:	78db      	ldrb	r3, [r3, #3]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	b2da      	uxtb	r2, r3
 8000a1e:	4b10      	ldr	r3, [pc, #64]	; (8000a60 <HAL_GPIO_EXTI_Callback+0x114>)
 8000a20:	70da      	strb	r2, [r3, #3]
		time_irq[3] = HAL_GetTick();
 8000a22:	f002 fca7 	bl	8003374 <HAL_GetTick>
 8000a26:	4602      	mov	r2, r0
 8000a28:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <HAL_GPIO_EXTI_Callback+0x118>)
 8000a2a:	60da      	str	r2, [r3, #12]
		update = 3;
 8000a2c:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000a2e:	2203      	movs	r2, #3
 8000a30:	701a      	strb	r2, [r3, #0]
		break;
 8000a32:	e011      	b.n	8000a58 <HAL_GPIO_EXTI_Callback+0x10c>
	case GPIO_PIN_4:
		HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 8000a34:	200a      	movs	r0, #10
 8000a36:	f002 fdec 	bl	8003612 <HAL_NVIC_DisableIRQ>
		flag_irq[4]++;
 8000a3a:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <HAL_GPIO_EXTI_Callback+0x114>)
 8000a3c:	791b      	ldrb	r3, [r3, #4]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	b2da      	uxtb	r2, r3
 8000a42:	4b07      	ldr	r3, [pc, #28]	; (8000a60 <HAL_GPIO_EXTI_Callback+0x114>)
 8000a44:	711a      	strb	r2, [r3, #4]
		time_irq[4] = HAL_GetTick();
 8000a46:	f002 fc95 	bl	8003374 <HAL_GetTick>
 8000a4a:	4602      	mov	r2, r0
 8000a4c:	4b05      	ldr	r3, [pc, #20]	; (8000a64 <HAL_GPIO_EXTI_Callback+0x118>)
 8000a4e:	611a      	str	r2, [r3, #16]
		update = 4;
 8000a50:	4b05      	ldr	r3, [pc, #20]	; (8000a68 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000a52:	2204      	movs	r2, #4
 8000a54:	701a      	strb	r2, [r3, #0]
	}
}
 8000a56:	e7ff      	b.n	8000a58 <HAL_GPIO_EXTI_Callback+0x10c>
 8000a58:	bf00      	nop
 8000a5a:	3708      	adds	r7, #8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	200000b8 	.word	0x200000b8
 8000a64:	200005d0 	.word	0x200005d0
 8000a68:	20000002 	.word	0x20000002

08000a6c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
		//update = 1;
	}
}
 8000a74:	bf00      	nop
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bc80      	pop	{r7}
 8000a7c:	4770      	bx	lr

08000a7e <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8000a7e:	b480      	push	{r7}
 8000a80:	b083      	sub	sp, #12
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	6078      	str	r0, [r7, #4]
	//sprintf((char*) stAlarm, "ZAZ");
}
 8000a86:	bf00      	nop
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bc80      	pop	{r7}
 8000a8e:	4770      	bx	lr

08000a90 <MainActivity>:

void MainActivity(void) {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b086      	sub	sp, #24
 8000a94:	af02      	add	r7, sp, #8
	u8g2_FirstPage(&u8g2);
 8000a96:	4851      	ldr	r0, [pc, #324]	; (8000bdc <MainActivity+0x14c>)
 8000a98:	f000 fcd6 	bl	8001448 <u8g2_FirstPage>
	do {
		u8g2_ClearBuffer(&u8g2);
 8000a9c:	484f      	ldr	r0, [pc, #316]	; (8000bdc <MainActivity+0x14c>)
 8000a9e:	f000 fc48 	bl	8001332 <u8g2_ClearBuffer>
		u8g2_SetDrawColor(&u8g2, 1);
 8000aa2:	2101      	movs	r1, #1
 8000aa4:	484d      	ldr	r0, [pc, #308]	; (8000bdc <MainActivity+0x14c>)
 8000aa6:	f001 fda9 	bl	80025fc <u8g2_SetDrawColor>
		u8g2_DrawFrame(&u8g2, 0, 1, 15, 15);
 8000aaa:	230f      	movs	r3, #15
 8000aac:	9300      	str	r3, [sp, #0]
 8000aae:	230f      	movs	r3, #15
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	4849      	ldr	r0, [pc, #292]	; (8000bdc <MainActivity+0x14c>)
 8000ab6:	f000 fbe4 	bl	8001282 <u8g2_DrawFrame>
		u8g2_DrawFilledEllipse(&u8g2, 14, 1, 7, 7, U8G2_DRAW_LOWER_LEFT);
 8000aba:	2304      	movs	r3, #4
 8000abc:	9301      	str	r3, [sp, #4]
 8000abe:	2307      	movs	r3, #7
 8000ac0:	9300      	str	r3, [sp, #0]
 8000ac2:	2307      	movs	r3, #7
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	210e      	movs	r1, #14
 8000ac8:	4844      	ldr	r0, [pc, #272]	; (8000bdc <MainActivity+0x14c>)
 8000aca:	f000 fe75 	bl	80017b8 <u8g2_DrawFilledEllipse>
		u8g2_DrawFrame(&u8g2, 0, 17, 15, 15);
 8000ace:	230f      	movs	r3, #15
 8000ad0:	9300      	str	r3, [sp, #0]
 8000ad2:	230f      	movs	r3, #15
 8000ad4:	2211      	movs	r2, #17
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	4840      	ldr	r0, [pc, #256]	; (8000bdc <MainActivity+0x14c>)
 8000ada:	f000 fbd2 	bl	8001282 <u8g2_DrawFrame>
		u8g2_DrawFilledEllipse(&u8g2, 14, 31, 7, 7, U8G2_DRAW_UPPER_LEFT);
 8000ade:	2302      	movs	r3, #2
 8000ae0:	9301      	str	r3, [sp, #4]
 8000ae2:	2307      	movs	r3, #7
 8000ae4:	9300      	str	r3, [sp, #0]
 8000ae6:	2307      	movs	r3, #7
 8000ae8:	221f      	movs	r2, #31
 8000aea:	210e      	movs	r1, #14
 8000aec:	483b      	ldr	r0, [pc, #236]	; (8000bdc <MainActivity+0x14c>)
 8000aee:	f000 fe63 	bl	80017b8 <u8g2_DrawFilledEllipse>
		u8g2_DrawFrame(&u8g2, 0, 33, 15, 15);
 8000af2:	230f      	movs	r3, #15
 8000af4:	9300      	str	r3, [sp, #0]
 8000af6:	230f      	movs	r3, #15
 8000af8:	2221      	movs	r2, #33	; 0x21
 8000afa:	2100      	movs	r1, #0
 8000afc:	4837      	ldr	r0, [pc, #220]	; (8000bdc <MainActivity+0x14c>)
 8000afe:	f000 fbc0 	bl	8001282 <u8g2_DrawFrame>
		u8g2_DrawFilledEllipse(&u8g2, 0, 47, 7, 7, U8G2_DRAW_UPPER_RIGHT);
 8000b02:	2301      	movs	r3, #1
 8000b04:	9301      	str	r3, [sp, #4]
 8000b06:	2307      	movs	r3, #7
 8000b08:	9300      	str	r3, [sp, #0]
 8000b0a:	2307      	movs	r3, #7
 8000b0c:	222f      	movs	r2, #47	; 0x2f
 8000b0e:	2100      	movs	r1, #0
 8000b10:	4832      	ldr	r0, [pc, #200]	; (8000bdc <MainActivity+0x14c>)
 8000b12:	f000 fe51 	bl	80017b8 <u8g2_DrawFilledEllipse>
		u8g2_DrawFrame(&u8g2, 0, 49, 15, 15);
 8000b16:	230f      	movs	r3, #15
 8000b18:	9300      	str	r3, [sp, #0]
 8000b1a:	230f      	movs	r3, #15
 8000b1c:	2231      	movs	r2, #49	; 0x31
 8000b1e:	2100      	movs	r1, #0
 8000b20:	482e      	ldr	r0, [pc, #184]	; (8000bdc <MainActivity+0x14c>)
 8000b22:	f000 fbae 	bl	8001282 <u8g2_DrawFrame>
		//if (lowerHeat)
		u8g2_DrawFilledEllipse(&u8g2, 7, 63, 7, 3,
 8000b26:	2303      	movs	r3, #3
 8000b28:	9301      	str	r3, [sp, #4]
 8000b2a:	2303      	movs	r3, #3
 8000b2c:	9300      	str	r3, [sp, #0]
 8000b2e:	2307      	movs	r3, #7
 8000b30:	223f      	movs	r2, #63	; 0x3f
 8000b32:	2107      	movs	r1, #7
 8000b34:	4829      	ldr	r0, [pc, #164]	; (8000bdc <MainActivity+0x14c>)
 8000b36:	f000 fe3f 	bl	80017b8 <u8g2_DrawFilledEllipse>
		U8G2_DRAW_UPPER_LEFT | U8G2_DRAW_UPPER_RIGHT);
		//if (upperHeat)
		u8g2_DrawFilledEllipse(&u8g2, 7, 49, 7, 3,
 8000b3a:	230c      	movs	r3, #12
 8000b3c:	9301      	str	r3, [sp, #4]
 8000b3e:	2303      	movs	r3, #3
 8000b40:	9300      	str	r3, [sp, #0]
 8000b42:	2307      	movs	r3, #7
 8000b44:	2231      	movs	r2, #49	; 0x31
 8000b46:	2107      	movs	r1, #7
 8000b48:	4824      	ldr	r0, [pc, #144]	; (8000bdc <MainActivity+0x14c>)
 8000b4a:	f000 fe35 	bl	80017b8 <u8g2_DrawFilledEllipse>
		U8G2_DRAW_LOWER_LEFT | U8G2_DRAW_LOWER_RIGHT);
		//if (heatOn)
		//{
		u8g2_DrawVLine(&u8g2, 5, 54, 5);
 8000b4e:	2305      	movs	r3, #5
 8000b50:	2236      	movs	r2, #54	; 0x36
 8000b52:	2105      	movs	r1, #5
 8000b54:	4821      	ldr	r0, [pc, #132]	; (8000bdc <MainActivity+0x14c>)
 8000b56:	f001 fd37 	bl	80025c8 <u8g2_DrawVLine>
		u8g2_DrawVLine(&u8g2, 9, 54, 5);
 8000b5a:	2305      	movs	r3, #5
 8000b5c:	2236      	movs	r2, #54	; 0x36
 8000b5e:	2109      	movs	r1, #9
 8000b60:	481e      	ldr	r0, [pc, #120]	; (8000bdc <MainActivity+0x14c>)
 8000b62:	f001 fd31 	bl	80025c8 <u8g2_DrawVLine>
		u8g2_SetDrawColor(&u8g2, 2);
 8000b66:	2102      	movs	r1, #2
 8000b68:	481c      	ldr	r0, [pc, #112]	; (8000bdc <MainActivity+0x14c>)
 8000b6a:	f001 fd47 	bl	80025fc <u8g2_SetDrawColor>
		u8g2_DrawHLine(&u8g2, 5, 56, 2);
 8000b6e:	2302      	movs	r3, #2
 8000b70:	2238      	movs	r2, #56	; 0x38
 8000b72:	2105      	movs	r1, #5
 8000b74:	4819      	ldr	r0, [pc, #100]	; (8000bdc <MainActivity+0x14c>)
 8000b76:	f001 fd0d 	bl	8002594 <u8g2_DrawHLine>
		u8g2_DrawHLine(&u8g2, 9, 56, 2);
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	2238      	movs	r2, #56	; 0x38
 8000b7e:	2109      	movs	r1, #9
 8000b80:	4816      	ldr	r0, [pc, #88]	; (8000bdc <MainActivity+0x14c>)
 8000b82:	f001 fd07 	bl	8002594 <u8g2_DrawHLine>
		u8g2_SetDrawColor(&u8g2, 1);
 8000b86:	2101      	movs	r1, #1
 8000b88:	4814      	ldr	r0, [pc, #80]	; (8000bdc <MainActivity+0x14c>)
 8000b8a:	f001 fd37 	bl	80025fc <u8g2_SetDrawColor>
		//}
		uint8_t stime[9];
		RTC_TimeShow(stime);
 8000b8e:	1d3b      	adds	r3, r7, #4
 8000b90:	4618      	mov	r0, r3
 8000b92:	f000 f91d 	bl	8000dd0 <RTC_TimeShow>
		u8g2_DrawUTF8(&u8g2, 17, 16 * 1 - 2, stime);
 8000b96:	1d3b      	adds	r3, r7, #4
 8000b98:	220e      	movs	r2, #14
 8000b9a:	2111      	movs	r1, #17
 8000b9c:	480f      	ldr	r0, [pc, #60]	; (8000bdc <MainActivity+0x14c>)
 8000b9e:	f001 fb41 	bl	8002224 <u8g2_DrawUTF8>
		//u8g2_DrawUTF8(&u8g2, 17, 16 * 2 - 2, stAlarm);
		//u8g2_DrawUTF8(&u8g2, 17, 16 * 3 - 2, time);
		//u8g2_DrawUTF8(&u8g2, 17, 16 * 4 - 2, time);
		u8g2_SetDrawColor(&u8g2, 2);
 8000ba2:	2102      	movs	r1, #2
 8000ba4:	480d      	ldr	r0, [pc, #52]	; (8000bdc <MainActivity+0x14c>)
 8000ba6:	f001 fd29 	bl	80025fc <u8g2_SetDrawColor>
		u8g2_DrawBox(&u8g2, 16, 1 + 16 * (pointer), 112, 15);
 8000baa:	4b0d      	ldr	r3, [pc, #52]	; (8000be0 <MainActivity+0x150>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	011b      	lsls	r3, r3, #4
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	b2da      	uxtb	r2, r3
 8000bb6:	230f      	movs	r3, #15
 8000bb8:	9300      	str	r3, [sp, #0]
 8000bba:	2370      	movs	r3, #112	; 0x70
 8000bbc:	2110      	movs	r1, #16
 8000bbe:	4807      	ldr	r0, [pc, #28]	; (8000bdc <MainActivity+0x14c>)
 8000bc0:	f000 fb28 	bl	8001214 <u8g2_DrawBox>
		//HAL_Delay(1200);
		//u8g2_ClearBuffer(&u8g2);
		//u8g2_SetBitmapMode(&u8g2,1);
		//u8g2_DrawBitmap(&u8g2, 0, 0, bitmap_height, bitmap_width,  bitmap);

	} while (u8g2_NextPage(&u8g2));
 8000bc4:	4805      	ldr	r0, [pc, #20]	; (8000bdc <MainActivity+0x14c>)
 8000bc6:	f000 fc53 	bl	8001470 <u8g2_NextPage>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	f47f af65 	bne.w	8000a9c <MainActivity+0xc>
}
 8000bd2:	bf00      	nop
 8000bd4:	3710      	adds	r7, #16
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000548 	.word	0x20000548
 8000be0:	200000b4 	.word	0x200000b4

08000be4 <OrderActivity>:

void OrderActivity(void) {
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b086      	sub	sp, #24
 8000be8:	af02      	add	r7, sp, #8
	u8g2_FirstPage(&u8g2);
 8000bea:	482d      	ldr	r0, [pc, #180]	; (8000ca0 <OrderActivity+0xbc>)
 8000bec:	f000 fc2c 	bl	8001448 <u8g2_FirstPage>
	do {
		u8g2_ClearBuffer(&u8g2);
 8000bf0:	482b      	ldr	r0, [pc, #172]	; (8000ca0 <OrderActivity+0xbc>)
 8000bf2:	f000 fb9e 	bl	8001332 <u8g2_ClearBuffer>
		u8g2_SetDrawColor(&u8g2, 1);
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	4829      	ldr	r0, [pc, #164]	; (8000ca0 <OrderActivity+0xbc>)
 8000bfa:	f001 fcff 	bl	80025fc <u8g2_SetDrawColor>

		u8g2_DrawFrame(&u8g2, 0, 1, 15, 15);
 8000bfe:	230f      	movs	r3, #15
 8000c00:	9300      	str	r3, [sp, #0]
 8000c02:	230f      	movs	r3, #15
 8000c04:	2201      	movs	r2, #1
 8000c06:	2100      	movs	r1, #0
 8000c08:	4825      	ldr	r0, [pc, #148]	; (8000ca0 <OrderActivity+0xbc>)
 8000c0a:	f000 fb3a 	bl	8001282 <u8g2_DrawFrame>
		u8g2_DrawFilledEllipse(&u8g2, 14, 1, 7, 7, U8G2_DRAW_LOWER_LEFT);
 8000c0e:	2304      	movs	r3, #4
 8000c10:	9301      	str	r3, [sp, #4]
 8000c12:	2307      	movs	r3, #7
 8000c14:	9300      	str	r3, [sp, #0]
 8000c16:	2307      	movs	r3, #7
 8000c18:	2201      	movs	r2, #1
 8000c1a:	210e      	movs	r1, #14
 8000c1c:	4820      	ldr	r0, [pc, #128]	; (8000ca0 <OrderActivity+0xbc>)
 8000c1e:	f000 fdcb 	bl	80017b8 <u8g2_DrawFilledEllipse>

		u8g2_DrawUTF8(&u8g2, 17, 14, "Меню");
 8000c22:	4b20      	ldr	r3, [pc, #128]	; (8000ca4 <OrderActivity+0xc0>)
 8000c24:	220e      	movs	r2, #14
 8000c26:	2111      	movs	r1, #17
 8000c28:	481d      	ldr	r0, [pc, #116]	; (8000ca0 <OrderActivity+0xbc>)
 8000c2a:	f001 fafb 	bl	8002224 <u8g2_DrawUTF8>
		u8g2_DrawHLine(&u8g2, 0, 15, 128);
 8000c2e:	2380      	movs	r3, #128	; 0x80
 8000c30:	220f      	movs	r2, #15
 8000c32:	2100      	movs	r1, #0
 8000c34:	481a      	ldr	r0, [pc, #104]	; (8000ca0 <OrderActivity+0xbc>)
 8000c36:	f001 fcad 	bl	8002594 <u8g2_DrawHLine>
		u8g2_DrawUTF8(&u8g2, 1, 30, "Режим: 3");
 8000c3a:	4b1b      	ldr	r3, [pc, #108]	; (8000ca8 <OrderActivity+0xc4>)
 8000c3c:	221e      	movs	r2, #30
 8000c3e:	2101      	movs	r1, #1
 8000c40:	4817      	ldr	r0, [pc, #92]	; (8000ca0 <OrderActivity+0xbc>)
 8000c42:	f001 faef 	bl	8002224 <u8g2_DrawUTF8>
		//u8g2_DrawUTF8(&u8g2, 1, 46, "Время: 00:12:49");
		uint8_t stime[9];
		RTC_TimeShow(stime);
 8000c46:	1d3b      	adds	r3, r7, #4
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f000 f8c1 	bl	8000dd0 <RTC_TimeShow>
		u8g2_DrawUTF8(&u8g2, 1, 46, stime);
 8000c4e:	1d3b      	adds	r3, r7, #4
 8000c50:	222e      	movs	r2, #46	; 0x2e
 8000c52:	2101      	movs	r1, #1
 8000c54:	4812      	ldr	r0, [pc, #72]	; (8000ca0 <OrderActivity+0xbc>)
 8000c56:	f001 fae5 	bl	8002224 <u8g2_DrawUTF8>
		u8g2_DrawUTF8(&u8g2, 1, 62, "3 pointer");
 8000c5a:	4b14      	ldr	r3, [pc, #80]	; (8000cac <OrderActivity+0xc8>)
 8000c5c:	223e      	movs	r2, #62	; 0x3e
 8000c5e:	2101      	movs	r1, #1
 8000c60:	480f      	ldr	r0, [pc, #60]	; (8000ca0 <OrderActivity+0xbc>)
 8000c62:	f001 fadf 	bl	8002224 <u8g2_DrawUTF8>
		u8g2_SetDrawColor(&u8g2, 2);
 8000c66:	2102      	movs	r1, #2
 8000c68:	480d      	ldr	r0, [pc, #52]	; (8000ca0 <OrderActivity+0xbc>)
 8000c6a:	f001 fcc7 	bl	80025fc <u8g2_SetDrawColor>
		u8g2_DrawBox(&u8g2, 0, 1 + 16 * (pointer + 1), 128, 15);
 8000c6e:	4b10      	ldr	r3, [pc, #64]	; (8000cb0 <OrderActivity+0xcc>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	3301      	adds	r3, #1
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	011b      	lsls	r3, r3, #4
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	b2da      	uxtb	r2, r3
 8000c7e:	230f      	movs	r3, #15
 8000c80:	9300      	str	r3, [sp, #0]
 8000c82:	2380      	movs	r3, #128	; 0x80
 8000c84:	2100      	movs	r1, #0
 8000c86:	4806      	ldr	r0, [pc, #24]	; (8000ca0 <OrderActivity+0xbc>)
 8000c88:	f000 fac4 	bl	8001214 <u8g2_DrawBox>
	} while (u8g2_NextPage(&u8g2));
 8000c8c:	4804      	ldr	r0, [pc, #16]	; (8000ca0 <OrderActivity+0xbc>)
 8000c8e:	f000 fbef 	bl	8001470 <u8g2_NextPage>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d1ab      	bne.n	8000bf0 <OrderActivity+0xc>
}
 8000c98:	bf00      	nop
 8000c9a:	3710      	adds	r7, #16
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20000548 	.word	0x20000548
 8000ca4:	08006b5c 	.word	0x08006b5c
 8000ca8:	08006b68 	.word	0x08006b68
 8000cac:	08006b78 	.word	0x08006b78
 8000cb0:	200000b4 	.word	0x200000b4

08000cb4 <ScreenUpdate>:

void ScreenUpdate(uint8_t button) {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	71fb      	strb	r3, [r7, #7]
	if (activityOLD != activity) {
 8000cbe:	4b18      	ldr	r3, [pc, #96]	; (8000d20 <ScreenUpdate+0x6c>)
 8000cc0:	781a      	ldrb	r2, [r3, #0]
 8000cc2:	4b18      	ldr	r3, [pc, #96]	; (8000d24 <ScreenUpdate+0x70>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	d016      	beq.n	8000cf8 <ScreenUpdate+0x44>
		activityOLD = activity;
 8000cca:	4b16      	ldr	r3, [pc, #88]	; (8000d24 <ScreenUpdate+0x70>)
 8000ccc:	781a      	ldrb	r2, [r3, #0]
 8000cce:	4b14      	ldr	r3, [pc, #80]	; (8000d20 <ScreenUpdate+0x6c>)
 8000cd0:	701a      	strb	r2, [r3, #0]
		switch (activity) {
 8000cd2:	4b14      	ldr	r3, [pc, #80]	; (8000d24 <ScreenUpdate+0x70>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d002      	beq.n	8000ce0 <ScreenUpdate+0x2c>
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d005      	beq.n	8000cea <ScreenUpdate+0x36>
 8000cde:	e009      	b.n	8000cf4 <ScreenUpdate+0x40>
		case 0:
			TIM1_ReConfig(7, 1);
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	2007      	movs	r0, #7
 8000ce4:	f000 f820 	bl	8000d28 <TIM1_ReConfig>
			break;
 8000ce8:	e007      	b.n	8000cfa <ScreenUpdate+0x46>
		case 1:
			TIM1_ReConfig(5, 1);
 8000cea:	2101      	movs	r1, #1
 8000cec:	2005      	movs	r0, #5
 8000cee:	f000 f81b 	bl	8000d28 <TIM1_ReConfig>
			break;
 8000cf2:	e002      	b.n	8000cfa <ScreenUpdate+0x46>
		default:
			__NOP();
 8000cf4:	bf00      	nop
 8000cf6:	e000      	b.n	8000cfa <ScreenUpdate+0x46>
		}
	}
 8000cf8:	bf00      	nop
	switch (activity) {
 8000cfa:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <ScreenUpdate+0x70>)
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d002      	beq.n	8000d08 <ScreenUpdate+0x54>
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d003      	beq.n	8000d0e <ScreenUpdate+0x5a>
 8000d06:	e005      	b.n	8000d14 <ScreenUpdate+0x60>
	case 0:
		MainActivity();
 8000d08:	f7ff fec2 	bl	8000a90 <MainActivity>
		break;
 8000d0c:	e003      	b.n	8000d16 <ScreenUpdate+0x62>
	case 1:
		OrderActivity();
 8000d0e:	f7ff ff69 	bl	8000be4 <OrderActivity>
		break;
 8000d12:	e000      	b.n	8000d16 <ScreenUpdate+0x62>
	default:
		__NOP();
 8000d14:	bf00      	nop
	}
}
 8000d16:	bf00      	nop
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	20000000 	.word	0x20000000
 8000d24:	20000001 	.word	0x20000001

08000d28 <TIM1_ReConfig>:

void TIM1_ReConfig(uint32_t period, uint32_t cnt) {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	6039      	str	r1, [r7, #0]
	if (HAL_TIM_Encoder_DeInit(&htim1) != HAL_OK) {
 8000d32:	480e      	ldr	r0, [pc, #56]	; (8000d6c <TIM1_ReConfig+0x44>)
 8000d34:	f004 fe39 	bl	80059aa <HAL_TIM_Encoder_DeInit>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <TIM1_ReConfig+0x1a>
		Error_Handler();
 8000d3e:	f000 f86d 	bl	8000e1c <Error_Handler>
	}
	htim1.Init.Period = period;
 8000d42:	4a0a      	ldr	r2, [pc, #40]	; (8000d6c <TIM1_ReConfig+0x44>)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	60d3      	str	r3, [r2, #12]
	if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK) {
 8000d48:	4909      	ldr	r1, [pc, #36]	; (8000d70 <TIM1_ReConfig+0x48>)
 8000d4a:	4808      	ldr	r0, [pc, #32]	; (8000d6c <TIM1_ReConfig+0x44>)
 8000d4c:	f004 fd8b 	bl	8005866 <HAL_TIM_Encoder_Init>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <TIM1_ReConfig+0x32>
		Error_Handler();
 8000d56:	f000 f861 	bl	8000e1c <Error_Handler>
	}
	htim1.Instance->CNT = cnt;
 8000d5a:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <TIM1_ReConfig+0x44>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	683a      	ldr	r2, [r7, #0]
 8000d60:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	2000062c 	.word	0x2000062c
 8000d70:	20000090 	.word	0x20000090

08000d74 <EventFlag>:

_Bool EventFlag(uint32_t *time_irq, uint8_t *flag_irq, IRQn_Type exti) {
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	4613      	mov	r3, r2
 8000d80:	71fb      	strb	r3, [r7, #7]
	if ((*flag_irq == 1)
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d11a      	bne.n	8000dc0 <EventFlag+0x4c>
			&& (HAL_GetTick() - *time_irq) > 100) {
 8000d8a:	f002 faf3 	bl	8003374 <HAL_GetTick>
 8000d8e:	4602      	mov	r2, r0
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	2b64      	cmp	r3, #100	; 0x64
 8000d98:	d912      	bls.n	8000dc0 <EventFlag+0x4c>
		__HAL_GPIO_EXTI_CLEAR_IT(exti);
 8000d9a:	4a0c      	ldr	r2, [pc, #48]	; (8000dcc <EventFlag+0x58>)
 8000d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da0:	6153      	str	r3, [r2, #20]
		NVIC_ClearPendingIRQ(exti);
 8000da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff f9d0 	bl	800014c <__NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(exti);
 8000dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f002 fc20 	bl	80035f6 <HAL_NVIC_EnableIRQ>
//		if (*flag_irq == 1) {
//			(*flag_irq)++;
//			return (_Bool) 0;
//		} else {
			*flag_irq = 0;
 8000db6:	68bb      	ldr	r3, [r7, #8]
 8000db8:	2200      	movs	r2, #0
 8000dba:	701a      	strb	r2, [r3, #0]
			return (_Bool) 1;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	e000      	b.n	8000dc2 <EventFlag+0x4e>
//		}
	}
	return (_Bool) 0;
 8000dc0:	2300      	movs	r3, #0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3710      	adds	r7, #16
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40010400 	.word	0x40010400

08000dd0 <RTC_TimeShow>:

static void RTC_TimeShow(uint8_t *showtime) {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af02      	add	r7, sp, #8
 8000dd6:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef sdatestructureget;
	RTC_TimeTypeDef stimestructureget;

	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &stimestructureget, RTC_FORMAT_BIN);
 8000dd8:	f107 0308 	add.w	r3, r7, #8
 8000ddc:	2200      	movs	r2, #0
 8000dde:	4619      	mov	r1, r3
 8000de0:	480c      	ldr	r0, [pc, #48]	; (8000e14 <RTC_TimeShow+0x44>)
 8000de2:	f003 fd2b 	bl	800483c <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &sdatestructureget, RTC_FORMAT_BIN);
 8000de6:	f107 030c 	add.w	r3, r7, #12
 8000dea:	2200      	movs	r2, #0
 8000dec:	4619      	mov	r1, r3
 8000dee:	4809      	ldr	r0, [pc, #36]	; (8000e14 <RTC_TimeShow+0x44>)
 8000df0:	f003 feb2 	bl	8004b58 <HAL_RTC_GetDate>
	/* Display time Format : hh:mm:ss */
	sprintf((char*) showtime, "%02d:%02d:%02d", stimestructureget.Hours,
 8000df4:	7a3b      	ldrb	r3, [r7, #8]
 8000df6:	461a      	mov	r2, r3
			stimestructureget.Minutes, stimestructureget.Seconds);
 8000df8:	7a7b      	ldrb	r3, [r7, #9]
	sprintf((char*) showtime, "%02d:%02d:%02d", stimestructureget.Hours,
 8000dfa:	4619      	mov	r1, r3
			stimestructureget.Minutes, stimestructureget.Seconds);
 8000dfc:	7abb      	ldrb	r3, [r7, #10]
	sprintf((char*) showtime, "%02d:%02d:%02d", stimestructureget.Hours,
 8000dfe:	9300      	str	r3, [sp, #0]
 8000e00:	460b      	mov	r3, r1
 8000e02:	4905      	ldr	r1, [pc, #20]	; (8000e18 <RTC_TimeShow+0x48>)
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f005 fa8b 	bl	8006320 <siprintf>
}
 8000e0a:	bf00      	nop
 8000e0c:	3710      	adds	r7, #16
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	200004dc 	.word	0x200004dc
 8000e18:	08006b84 	.word	0x08006b84

08000e1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bc80      	pop	{r7}
 8000e26:	4770      	bx	lr

08000e28 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b085      	sub	sp, #20
 8000e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e2e:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <HAL_MspInit+0x5c>)
 8000e30:	699b      	ldr	r3, [r3, #24]
 8000e32:	4a14      	ldr	r2, [pc, #80]	; (8000e84 <HAL_MspInit+0x5c>)
 8000e34:	f043 0301 	orr.w	r3, r3, #1
 8000e38:	6193      	str	r3, [r2, #24]
 8000e3a:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <HAL_MspInit+0x5c>)
 8000e3c:	699b      	ldr	r3, [r3, #24]
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	60bb      	str	r3, [r7, #8]
 8000e44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e46:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <HAL_MspInit+0x5c>)
 8000e48:	69db      	ldr	r3, [r3, #28]
 8000e4a:	4a0e      	ldr	r2, [pc, #56]	; (8000e84 <HAL_MspInit+0x5c>)
 8000e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e50:	61d3      	str	r3, [r2, #28]
 8000e52:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <HAL_MspInit+0x5c>)
 8000e54:	69db      	ldr	r3, [r3, #28]
 8000e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e5a:	607b      	str	r3, [r7, #4]
 8000e5c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e5e:	4b0a      	ldr	r3, [pc, #40]	; (8000e88 <HAL_MspInit+0x60>)
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	4a04      	ldr	r2, [pc, #16]	; (8000e88 <HAL_MspInit+0x60>)
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	3714      	adds	r7, #20
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bc80      	pop	{r7}
 8000e82:	4770      	bx	lr
 8000e84:	40021000 	.word	0x40021000
 8000e88:	40010000 	.word	0x40010000

08000e8c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a0f      	ldr	r2, [pc, #60]	; (8000ed8 <HAL_RTC_MspInit+0x4c>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d118      	bne.n	8000ed0 <HAL_RTC_MspInit+0x44>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000e9e:	f002 fe19 	bl	8003ad4 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000ea2:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <HAL_RTC_MspInit+0x50>)
 8000ea4:	69db      	ldr	r3, [r3, #28]
 8000ea6:	4a0d      	ldr	r2, [pc, #52]	; (8000edc <HAL_RTC_MspInit+0x50>)
 8000ea8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000eac:	61d3      	str	r3, [r2, #28]
 8000eae:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <HAL_RTC_MspInit+0x50>)
 8000eb0:	69db      	ldr	r3, [r3, #28]
 8000eb2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000eba:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <HAL_RTC_MspInit+0x54>)
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	2029      	movs	r0, #41	; 0x29
 8000ec6:	f002 fb7a 	bl	80035be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000eca:	2029      	movs	r0, #41	; 0x29
 8000ecc:	f002 fb93 	bl	80035f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000ed0:	bf00      	nop
 8000ed2:	3710      	adds	r7, #16
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40002800 	.word	0x40002800
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	4242043c 	.word	0x4242043c

08000ee4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b088      	sub	sp, #32
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eec:	f107 0310 	add.w	r3, r7, #16
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a16      	ldr	r2, [pc, #88]	; (8000f58 <HAL_SPI_MspInit+0x74>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d124      	bne.n	8000f4e <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f04:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <HAL_SPI_MspInit+0x78>)
 8000f06:	69db      	ldr	r3, [r3, #28]
 8000f08:	4a14      	ldr	r2, [pc, #80]	; (8000f5c <HAL_SPI_MspInit+0x78>)
 8000f0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f0e:	61d3      	str	r3, [r2, #28]
 8000f10:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <HAL_SPI_MspInit+0x78>)
 8000f12:	69db      	ldr	r3, [r3, #28]
 8000f14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f1c:	4b0f      	ldr	r3, [pc, #60]	; (8000f5c <HAL_SPI_MspInit+0x78>)
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	4a0e      	ldr	r2, [pc, #56]	; (8000f5c <HAL_SPI_MspInit+0x78>)
 8000f22:	f043 0308 	orr.w	r3, r3, #8
 8000f26:	6193      	str	r3, [r2, #24]
 8000f28:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <HAL_SPI_MspInit+0x78>)
 8000f2a:	699b      	ldr	r3, [r3, #24]
 8000f2c:	f003 0308 	and.w	r3, r3, #8
 8000f30:	60bb      	str	r3, [r7, #8]
 8000f32:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000f34:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000f38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f42:	f107 0310 	add.w	r3, r7, #16
 8000f46:	4619      	mov	r1, r3
 8000f48:	4805      	ldr	r0, [pc, #20]	; (8000f60 <HAL_SPI_MspInit+0x7c>)
 8000f4a:	f002 fb7d 	bl	8003648 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000f4e:	bf00      	nop
 8000f50:	3720      	adds	r7, #32
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40003800 	.word	0x40003800
 8000f5c:	40021000 	.word	0x40021000
 8000f60:	40010c00 	.word	0x40010c00

08000f64 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b088      	sub	sp, #32
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6c:	f107 0310 	add.w	r3, r7, #16
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a1a      	ldr	r2, [pc, #104]	; (8000fe8 <HAL_TIM_Encoder_MspInit+0x84>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d12c      	bne.n	8000fde <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f84:	4b19      	ldr	r3, [pc, #100]	; (8000fec <HAL_TIM_Encoder_MspInit+0x88>)
 8000f86:	699b      	ldr	r3, [r3, #24]
 8000f88:	4a18      	ldr	r2, [pc, #96]	; (8000fec <HAL_TIM_Encoder_MspInit+0x88>)
 8000f8a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f8e:	6193      	str	r3, [r2, #24]
 8000f90:	4b16      	ldr	r3, [pc, #88]	; (8000fec <HAL_TIM_Encoder_MspInit+0x88>)
 8000f92:	699b      	ldr	r3, [r3, #24]
 8000f94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9c:	4b13      	ldr	r3, [pc, #76]	; (8000fec <HAL_TIM_Encoder_MspInit+0x88>)
 8000f9e:	699b      	ldr	r3, [r3, #24]
 8000fa0:	4a12      	ldr	r2, [pc, #72]	; (8000fec <HAL_TIM_Encoder_MspInit+0x88>)
 8000fa2:	f043 0304 	orr.w	r3, r3, #4
 8000fa6:	6193      	str	r3, [r2, #24]
 8000fa8:	4b10      	ldr	r3, [pc, #64]	; (8000fec <HAL_TIM_Encoder_MspInit+0x88>)
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	f003 0304 	and.w	r3, r3, #4
 8000fb0:	60bb      	str	r3, [r7, #8]
 8000fb2:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000fb4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fb8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc2:	f107 0310 	add.w	r3, r7, #16
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4809      	ldr	r0, [pc, #36]	; (8000ff0 <HAL_TIM_Encoder_MspInit+0x8c>)
 8000fca:	f002 fb3d 	bl	8003648 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	201b      	movs	r0, #27
 8000fd4:	f002 faf3 	bl	80035be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000fd8:	201b      	movs	r0, #27
 8000fda:	f002 fb0c 	bl	80035f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000fde:	bf00      	nop
 8000fe0:	3720      	adds	r7, #32
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40012c00 	.word	0x40012c00
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	40010800 	.word	0x40010800

08000ff4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a09      	ldr	r2, [pc, #36]	; (8001028 <HAL_TIM_PWM_MspInit+0x34>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d10b      	bne.n	800101e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001006:	4b09      	ldr	r3, [pc, #36]	; (800102c <HAL_TIM_PWM_MspInit+0x38>)
 8001008:	69db      	ldr	r3, [r3, #28]
 800100a:	4a08      	ldr	r2, [pc, #32]	; (800102c <HAL_TIM_PWM_MspInit+0x38>)
 800100c:	f043 0302 	orr.w	r3, r3, #2
 8001010:	61d3      	str	r3, [r2, #28]
 8001012:	4b06      	ldr	r3, [pc, #24]	; (800102c <HAL_TIM_PWM_MspInit+0x38>)
 8001014:	69db      	ldr	r3, [r3, #28]
 8001016:	f003 0302 	and.w	r3, r3, #2
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800101e:	bf00      	nop
 8001020:	3714      	adds	r7, #20
 8001022:	46bd      	mov	sp, r7
 8001024:	bc80      	pop	{r7}
 8001026:	4770      	bx	lr
 8001028:	40000400 	.word	0x40000400
 800102c:	40021000 	.word	0x40021000

08001030 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b088      	sub	sp, #32
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001038:	f107 0310 	add.w	r3, r7, #16
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a0f      	ldr	r2, [pc, #60]	; (8001088 <HAL_TIM_MspPostInit+0x58>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d117      	bne.n	8001080 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001050:	4b0e      	ldr	r3, [pc, #56]	; (800108c <HAL_TIM_MspPostInit+0x5c>)
 8001052:	699b      	ldr	r3, [r3, #24]
 8001054:	4a0d      	ldr	r2, [pc, #52]	; (800108c <HAL_TIM_MspPostInit+0x5c>)
 8001056:	f043 0308 	orr.w	r3, r3, #8
 800105a:	6193      	str	r3, [r2, #24]
 800105c:	4b0b      	ldr	r3, [pc, #44]	; (800108c <HAL_TIM_MspPostInit+0x5c>)
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	f003 0308 	and.w	r3, r3, #8
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001068:	2301      	movs	r3, #1
 800106a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106c:	2302      	movs	r3, #2
 800106e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001070:	2303      	movs	r3, #3
 8001072:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001074:	f107 0310 	add.w	r3, r7, #16
 8001078:	4619      	mov	r1, r3
 800107a:	4805      	ldr	r0, [pc, #20]	; (8001090 <HAL_TIM_MspPostInit+0x60>)
 800107c:	f002 fae4 	bl	8003648 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001080:	bf00      	nop
 8001082:	3720      	adds	r7, #32
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40000400 	.word	0x40000400
 800108c:	40021000 	.word	0x40021000
 8001090:	40010c00 	.word	0x40010c00

08001094 <HAL_TIM_Encoder_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspDeInit(TIM_HandleTypeDef* htim_encoder)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  if(htim_encoder->Instance==TIM1)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a0a      	ldr	r2, [pc, #40]	; (80010cc <HAL_TIM_Encoder_MspDeInit+0x38>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d10d      	bne.n	80010c2 <HAL_TIM_Encoder_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspDeInit 0 */

  /* USER CODE END TIM1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM1_CLK_DISABLE();
 80010a6:	4b0a      	ldr	r3, [pc, #40]	; (80010d0 <HAL_TIM_Encoder_MspDeInit+0x3c>)
 80010a8:	699b      	ldr	r3, [r3, #24]
 80010aa:	4a09      	ldr	r2, [pc, #36]	; (80010d0 <HAL_TIM_Encoder_MspDeInit+0x3c>)
 80010ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80010b0:	6193      	str	r3, [r2, #24]

    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8|GPIO_PIN_9);
 80010b2:	f44f 7140 	mov.w	r1, #768	; 0x300
 80010b6:	4807      	ldr	r0, [pc, #28]	; (80010d4 <HAL_TIM_Encoder_MspDeInit+0x40>)
 80010b8:	f002 fc20 	bl	80038fc <HAL_GPIO_DeInit>

    /* TIM1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(TIM1_CC_IRQn);
 80010bc:	201b      	movs	r0, #27
 80010be:	f002 faa8 	bl	8003612 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN TIM1_MspDeInit 1 */

  /* USER CODE END TIM1_MspDeInit 1 */
  }

}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40012c00 	.word	0x40012c00
 80010d0:	40021000 	.word	0x40021000
 80010d4:	40010800 	.word	0x40010800

080010d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	bc80      	pop	{r7}
 80010e2:	4770      	bx	lr

080010e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010e8:	e7fe      	b.n	80010e8 <HardFault_Handler+0x4>

080010ea <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010ee:	e7fe      	b.n	80010ee <MemManage_Handler+0x4>

080010f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010f4:	e7fe      	b.n	80010f4 <BusFault_Handler+0x4>

080010f6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010fa:	e7fe      	b.n	80010fa <UsageFault_Handler+0x4>

080010fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr

08001108 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr

08001114 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	bc80      	pop	{r7}
 800111e:	4770      	bx	lr

08001120 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001124:	f002 f914 	bl	8003350 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}

0800112c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001130:	2001      	movs	r0, #1
 8001132:	f002 fcb7 	bl	8003aa4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}

0800113a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800113e:	2002      	movs	r0, #2
 8001140:	f002 fcb0 	bl	8003aa4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}

08001148 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800114c:	2004      	movs	r0, #4
 800114e:	f002 fca9 	bl	8003aa4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}

08001156 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800115a:	2008      	movs	r0, #8
 800115c:	f002 fca2 	bl	8003aa4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001160:	bf00      	nop
 8001162:	bd80      	pop	{r7, pc}

08001164 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001168:	2010      	movs	r0, #16
 800116a:	f002 fc9b 	bl	8003aa4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
	...

08001174 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001178:	4802      	ldr	r0, [pc, #8]	; (8001184 <TIM1_CC_IRQHandler+0x10>)
 800117a:	f004 fc5a 	bl	8005a32 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	2000062c 	.word	0x2000062c

08001188 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800118c:	4802      	ldr	r0, [pc, #8]	; (8001198 <RTC_Alarm_IRQHandler+0x10>)
 800118e:	f003 fdeb 	bl	8004d68 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	200004dc 	.word	0x200004dc

0800119c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011a4:	4a14      	ldr	r2, [pc, #80]	; (80011f8 <_sbrk+0x5c>)
 80011a6:	4b15      	ldr	r3, [pc, #84]	; (80011fc <_sbrk+0x60>)
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011b0:	4b13      	ldr	r3, [pc, #76]	; (8001200 <_sbrk+0x64>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d102      	bne.n	80011be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011b8:	4b11      	ldr	r3, [pc, #68]	; (8001200 <_sbrk+0x64>)
 80011ba:	4a12      	ldr	r2, [pc, #72]	; (8001204 <_sbrk+0x68>)
 80011bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011be:	4b10      	ldr	r3, [pc, #64]	; (8001200 <_sbrk+0x64>)
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4413      	add	r3, r2
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d207      	bcs.n	80011dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011cc:	f005 f876 	bl	80062bc <__errno>
 80011d0:	4602      	mov	r2, r0
 80011d2:	230c      	movs	r3, #12
 80011d4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80011d6:	f04f 33ff 	mov.w	r3, #4294967295
 80011da:	e009      	b.n	80011f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011dc:	4b08      	ldr	r3, [pc, #32]	; (8001200 <_sbrk+0x64>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011e2:	4b07      	ldr	r3, [pc, #28]	; (8001200 <_sbrk+0x64>)
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4413      	add	r3, r2
 80011ea:	4a05      	ldr	r2, [pc, #20]	; (8001200 <_sbrk+0x64>)
 80011ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ee:	68fb      	ldr	r3, [r7, #12]
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3718      	adds	r7, #24
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20005000 	.word	0x20005000
 80011fc:	00000400 	.word	0x00000400
 8001200:	200000c0 	.word	0x200000c0
 8001204:	20000680 	.word	0x20000680

08001208 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr

08001214 <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af02      	add	r7, sp, #8
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	4608      	mov	r0, r1
 800121e:	4611      	mov	r1, r2
 8001220:	461a      	mov	r2, r3
 8001222:	4603      	mov	r3, r0
 8001224:	70fb      	strb	r3, [r7, #3]
 8001226:	460b      	mov	r3, r1
 8001228:	70bb      	strb	r3, [r7, #2]
 800122a:	4613      	mov	r3, r2
 800122c:	707b      	strb	r3, [r7, #1]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 800122e:	78fa      	ldrb	r2, [r7, #3]
 8001230:	787b      	ldrb	r3, [r7, #1]
 8001232:	4413      	add	r3, r2
 8001234:	b2d8      	uxtb	r0, r3
 8001236:	78ba      	ldrb	r2, [r7, #2]
 8001238:	7c3b      	ldrb	r3, [r7, #16]
 800123a:	4413      	add	r3, r2
 800123c:	b2db      	uxtb	r3, r3
 800123e:	78ba      	ldrb	r2, [r7, #2]
 8001240:	78f9      	ldrb	r1, [r7, #3]
 8001242:	9300      	str	r3, [sp, #0]
 8001244:	4603      	mov	r3, r0
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f001 fa21 	bl	800268e <u8g2_IsIntersection>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d013      	beq.n	800127a <u8g2_DrawBox+0x66>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 8001252:	e00e      	b.n	8001272 <u8g2_DrawBox+0x5e>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8001254:	7878      	ldrb	r0, [r7, #1]
 8001256:	78ba      	ldrb	r2, [r7, #2]
 8001258:	78f9      	ldrb	r1, [r7, #3]
 800125a:	2300      	movs	r3, #0
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	4603      	mov	r3, r0
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f001 f914 	bl	800248e <u8g2_DrawHVLine>
    y++;    
 8001266:	78bb      	ldrb	r3, [r7, #2]
 8001268:	3301      	adds	r3, #1
 800126a:	70bb      	strb	r3, [r7, #2]
    h--;
 800126c:	7c3b      	ldrb	r3, [r7, #16]
 800126e:	3b01      	subs	r3, #1
 8001270:	743b      	strb	r3, [r7, #16]
  while( h != 0 )
 8001272:	7c3b      	ldrb	r3, [r7, #16]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d1ed      	bne.n	8001254 <u8g2_DrawBox+0x40>
 8001278:	e000      	b.n	800127c <u8g2_DrawBox+0x68>
    return;
 800127a:	bf00      	nop
  }
}
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <u8g2_DrawFrame>:
  restriction: does not work for w = 0 or h = 0
  ToDo:
    pixel in the corners are drawn twice. This could be optimized.
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b086      	sub	sp, #24
 8001286:	af02      	add	r7, sp, #8
 8001288:	6078      	str	r0, [r7, #4]
 800128a:	4608      	mov	r0, r1
 800128c:	4611      	mov	r1, r2
 800128e:	461a      	mov	r2, r3
 8001290:	4603      	mov	r3, r0
 8001292:	70fb      	strb	r3, [r7, #3]
 8001294:	460b      	mov	r3, r1
 8001296:	70bb      	strb	r3, [r7, #2]
 8001298:	4613      	mov	r3, r2
 800129a:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t xtmp = x;
 800129c:	78fb      	ldrb	r3, [r7, #3]
 800129e:	73fb      	strb	r3, [r7, #15]
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 80012a0:	78fa      	ldrb	r2, [r7, #3]
 80012a2:	787b      	ldrb	r3, [r7, #1]
 80012a4:	4413      	add	r3, r2
 80012a6:	b2d8      	uxtb	r0, r3
 80012a8:	78ba      	ldrb	r2, [r7, #2]
 80012aa:	7e3b      	ldrb	r3, [r7, #24]
 80012ac:	4413      	add	r3, r2
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	78ba      	ldrb	r2, [r7, #2]
 80012b2:	78f9      	ldrb	r1, [r7, #3]
 80012b4:	9300      	str	r3, [sp, #0]
 80012b6:	4603      	mov	r3, r0
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f001 f9e8 	bl	800268e <u8g2_IsIntersection>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d032      	beq.n	800132a <u8g2_DrawFrame+0xa8>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
 80012c4:	7878      	ldrb	r0, [r7, #1]
 80012c6:	78ba      	ldrb	r2, [r7, #2]
 80012c8:	78f9      	ldrb	r1, [r7, #3]
 80012ca:	2300      	movs	r3, #0
 80012cc:	9300      	str	r3, [sp, #0]
 80012ce:	4603      	mov	r3, r0
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f001 f8dc 	bl	800248e <u8g2_DrawHVLine>
  u8g2_DrawHVLine(u8g2, x, y, h, 1);
 80012d6:	7e38      	ldrb	r0, [r7, #24]
 80012d8:	78ba      	ldrb	r2, [r7, #2]
 80012da:	78f9      	ldrb	r1, [r7, #3]
 80012dc:	2301      	movs	r3, #1
 80012de:	9300      	str	r3, [sp, #0]
 80012e0:	4603      	mov	r3, r0
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f001 f8d3 	bl	800248e <u8g2_DrawHVLine>
  x+=w;
 80012e8:	78fa      	ldrb	r2, [r7, #3]
 80012ea:	787b      	ldrb	r3, [r7, #1]
 80012ec:	4413      	add	r3, r2
 80012ee:	70fb      	strb	r3, [r7, #3]
  x--;
 80012f0:	78fb      	ldrb	r3, [r7, #3]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	70fb      	strb	r3, [r7, #3]
  u8g2_DrawHVLine(u8g2, x, y, h, 1);
 80012f6:	7e38      	ldrb	r0, [r7, #24]
 80012f8:	78ba      	ldrb	r2, [r7, #2]
 80012fa:	78f9      	ldrb	r1, [r7, #3]
 80012fc:	2301      	movs	r3, #1
 80012fe:	9300      	str	r3, [sp, #0]
 8001300:	4603      	mov	r3, r0
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f001 f8c3 	bl	800248e <u8g2_DrawHVLine>
  y+=h;
 8001308:	78ba      	ldrb	r2, [r7, #2]
 800130a:	7e3b      	ldrb	r3, [r7, #24]
 800130c:	4413      	add	r3, r2
 800130e:	70bb      	strb	r3, [r7, #2]
  y--;
 8001310:	78bb      	ldrb	r3, [r7, #2]
 8001312:	3b01      	subs	r3, #1
 8001314:	70bb      	strb	r3, [r7, #2]
  u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 8001316:	7878      	ldrb	r0, [r7, #1]
 8001318:	78ba      	ldrb	r2, [r7, #2]
 800131a:	7bf9      	ldrb	r1, [r7, #15]
 800131c:	2300      	movs	r3, #0
 800131e:	9300      	str	r3, [sp, #0]
 8001320:	4603      	mov	r3, r0
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f001 f8b3 	bl	800248e <u8g2_DrawHVLine>
 8001328:	e000      	b.n	800132c <u8g2_DrawFrame+0xaa>
    return;
 800132a:	bf00      	nop
}
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b084      	sub	sp, #16
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	7c1b      	ldrb	r3, [r3, #16]
 8001340:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001348:	461a      	mov	r2, r3
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	fb02 f303 	mul.w	r3, r2, r3
 8001350:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	00db      	lsls	r3, r3, #3
 8001356:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800135c:	68fa      	ldr	r2, [r7, #12]
 800135e:	2100      	movs	r1, #0
 8001360:	4618      	mov	r0, r3
 8001362:	f004 ffd5 	bl	8006310 <memset>
}
 8001366:	bf00      	nop
 8001368:	3710      	adds	r7, #16
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b086      	sub	sp, #24
 8001372:	af02      	add	r7, sp, #8
 8001374:	6078      	str	r0, [r7, #4]
 8001376:	460b      	mov	r3, r1
 8001378:	70fb      	strb	r3, [r7, #3]
 800137a:	4613      	mov	r3, r2
 800137c:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	7c1b      	ldrb	r3, [r3, #16]
 8001384:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8001386:	78fb      	ldrb	r3, [r7, #3]
 8001388:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800138e:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8001390:	7bfb      	ldrb	r3, [r7, #15]
 8001392:	b29b      	uxth	r3, r3
 8001394:	89ba      	ldrh	r2, [r7, #12]
 8001396:	fb02 f303 	mul.w	r3, r2, r3
 800139a:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 800139c:	89bb      	ldrh	r3, [r7, #12]
 800139e:	00db      	lsls	r3, r3, #3
 80013a0:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 80013a2:	89bb      	ldrh	r3, [r7, #12]
 80013a4:	68ba      	ldr	r2, [r7, #8]
 80013a6:	4413      	add	r3, r2
 80013a8:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 80013aa:	7bf9      	ldrb	r1, [r7, #15]
 80013ac:	78ba      	ldrb	r2, [r7, #2]
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	9300      	str	r3, [sp, #0]
 80013b2:	460b      	mov	r3, r1
 80013b4:	2100      	movs	r1, #0
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f001 fe8c 	bl	80030d4 <u8x8_DrawTile>
}
 80013bc:	bf00      	nop
 80013be:	3710      	adds	r7, #16
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013d6:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013de:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	7c5b      	ldrb	r3, [r3, #17]
 80013e6:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 80013e8:	7bba      	ldrb	r2, [r7, #14]
 80013ea:	7bfb      	ldrb	r3, [r7, #15]
 80013ec:	4619      	mov	r1, r3
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f7ff ffbd 	bl	800136e <u8g2_send_tile_row>
    src_row++;
 80013f4:	7bfb      	ldrb	r3, [r7, #15]
 80013f6:	3301      	adds	r3, #1
 80013f8:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 80013fa:	7bbb      	ldrb	r3, [r7, #14]
 80013fc:	3301      	adds	r3, #1
 80013fe:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8001400:	7bfa      	ldrb	r2, [r7, #15]
 8001402:	7b7b      	ldrb	r3, [r7, #13]
 8001404:	429a      	cmp	r2, r3
 8001406:	d203      	bcs.n	8001410 <u8g2_send_buffer+0x4c>
 8001408:	7bba      	ldrb	r2, [r7, #14]
 800140a:	7b3b      	ldrb	r3, [r7, #12]
 800140c:	429a      	cmp	r2, r3
 800140e:	d3eb      	bcc.n	80013e8 <u8g2_send_buffer+0x24>
}
 8001410:	bf00      	nop
 8001412:	3710      	adds	r7, #16
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <u8g2_SetBufferCurrTileRow>:
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
}

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	460b      	mov	r3, r1
 8001422:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	78fa      	ldrb	r2, [r7, #3]
 8001428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  u8g2->cb->update_dimension(u8g2);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	4798      	blx	r3
}
 8001440:	bf00      	nop
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}

08001448 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8001456:	2b00      	cmp	r3, #0
 8001458:	d002      	beq.n	8001460 <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f7ff ff69 	bl	8001332 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8001460:	2100      	movs	r1, #0
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f7ff ffd8 	bl	8001418 <u8g2_SetBufferCurrTileRow>
}
 8001468:	bf00      	nop
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f7ff ffa3 	bl	80013c4 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001484:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 800148c:	7bfb      	ldrb	r3, [r7, #15]
 800148e:	4413      	add	r3, r2
 8001490:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	7c5b      	ldrb	r3, [r3, #17]
 8001498:	7bfa      	ldrb	r2, [r7, #15]
 800149a:	429a      	cmp	r2, r3
 800149c:	d304      	bcc.n	80014a8 <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f001 fe69 	bl	8003176 <u8x8_RefreshDisplay>
    return 0;
 80014a4:	2300      	movs	r3, #0
 80014a6:	e00d      	b.n	80014c4 <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d002      	beq.n	80014b8 <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7ff ff3d 	bl	8001332 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 80014b8:	7bfb      	ldrb	r3, [r7, #15]
 80014ba:	4619      	mov	r1, r3
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f7ff ffab 	bl	8001418 <u8g2_SetBufferCurrTileRow>
  return 1;
 80014c2:	2301      	movs	r3, #1
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3710      	adds	r7, #16
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <u8g2_draw_filled_ellipse_section>:
/*==============================================*/
/* Filled Ellipse */

static void u8g2_draw_filled_ellipse_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option) U8G2_NOINLINE;
static void u8g2_draw_filled_ellipse_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	4608      	mov	r0, r1
 80014d6:	4611      	mov	r1, r2
 80014d8:	461a      	mov	r2, r3
 80014da:	4603      	mov	r3, r0
 80014dc:	70fb      	strb	r3, [r7, #3]
 80014de:	460b      	mov	r3, r1
 80014e0:	70bb      	strb	r3, [r7, #2]
 80014e2:	4613      	mov	r3, r2
 80014e4:	707b      	strb	r3, [r7, #1]
    /* upper right */
    if ( option & U8G2_DRAW_UPPER_RIGHT )
 80014e6:	7d3b      	ldrb	r3, [r7, #20]
 80014e8:	f003 0301 	and.w	r3, r3, #1
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d00d      	beq.n	800150c <u8g2_draw_filled_ellipse_section+0x40>
    {
      u8g2_DrawVLine(u8g2, x0+x, y0-y, y+1);
 80014f0:	787a      	ldrb	r2, [r7, #1]
 80014f2:	78fb      	ldrb	r3, [r7, #3]
 80014f4:	4413      	add	r3, r2
 80014f6:	b2d9      	uxtb	r1, r3
 80014f8:	7c3a      	ldrb	r2, [r7, #16]
 80014fa:	78bb      	ldrb	r3, [r7, #2]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	b2da      	uxtb	r2, r3
 8001500:	78bb      	ldrb	r3, [r7, #2]
 8001502:	3301      	adds	r3, #1
 8001504:	b2db      	uxtb	r3, r3
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f001 f85e 	bl	80025c8 <u8g2_DrawVLine>
    }
    
    /* upper left */
    if ( option & U8G2_DRAW_UPPER_LEFT )
 800150c:	7d3b      	ldrb	r3, [r7, #20]
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	2b00      	cmp	r3, #0
 8001514:	d00d      	beq.n	8001532 <u8g2_draw_filled_ellipse_section+0x66>
    {
      u8g2_DrawVLine(u8g2, x0-x, y0-y, y+1);
 8001516:	787a      	ldrb	r2, [r7, #1]
 8001518:	78fb      	ldrb	r3, [r7, #3]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	b2d9      	uxtb	r1, r3
 800151e:	7c3a      	ldrb	r2, [r7, #16]
 8001520:	78bb      	ldrb	r3, [r7, #2]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	b2da      	uxtb	r2, r3
 8001526:	78bb      	ldrb	r3, [r7, #2]
 8001528:	3301      	adds	r3, #1
 800152a:	b2db      	uxtb	r3, r3
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f001 f84b 	bl	80025c8 <u8g2_DrawVLine>
    }
    
    /* lower right */
    if ( option & U8G2_DRAW_LOWER_RIGHT )
 8001532:	7d3b      	ldrb	r3, [r7, #20]
 8001534:	f003 0308 	and.w	r3, r3, #8
 8001538:	2b00      	cmp	r3, #0
 800153a:	d00a      	beq.n	8001552 <u8g2_draw_filled_ellipse_section+0x86>
    {
      u8g2_DrawVLine(u8g2, x0+x, y0, y+1);
 800153c:	787a      	ldrb	r2, [r7, #1]
 800153e:	78fb      	ldrb	r3, [r7, #3]
 8001540:	4413      	add	r3, r2
 8001542:	b2d9      	uxtb	r1, r3
 8001544:	78bb      	ldrb	r3, [r7, #2]
 8001546:	3301      	adds	r3, #1
 8001548:	b2db      	uxtb	r3, r3
 800154a:	7c3a      	ldrb	r2, [r7, #16]
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f001 f83b 	bl	80025c8 <u8g2_DrawVLine>
    }
    
    /* lower left */
    if ( option & U8G2_DRAW_LOWER_LEFT )
 8001552:	7d3b      	ldrb	r3, [r7, #20]
 8001554:	f003 0304 	and.w	r3, r3, #4
 8001558:	2b00      	cmp	r3, #0
 800155a:	d00a      	beq.n	8001572 <u8g2_draw_filled_ellipse_section+0xa6>
    {
      u8g2_DrawVLine(u8g2, x0-x, y0, y+1);
 800155c:	787a      	ldrb	r2, [r7, #1]
 800155e:	78fb      	ldrb	r3, [r7, #3]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	b2d9      	uxtb	r1, r3
 8001564:	78bb      	ldrb	r3, [r7, #2]
 8001566:	3301      	adds	r3, #1
 8001568:	b2db      	uxtb	r3, r3
 800156a:	7c3a      	ldrb	r2, [r7, #16]
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f001 f82b 	bl	80025c8 <u8g2_DrawVLine>
    }
}
 8001572:	bf00      	nop
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <u8g2_draw_filled_ellipse>:

static void u8g2_draw_filled_ellipse(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rx, u8g2_uint_t ry, uint8_t option)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b088      	sub	sp, #32
 800157e:	af02      	add	r7, sp, #8
 8001580:	6078      	str	r0, [r7, #4]
 8001582:	4608      	mov	r0, r1
 8001584:	4611      	mov	r1, r2
 8001586:	461a      	mov	r2, r3
 8001588:	4603      	mov	r3, r0
 800158a:	70fb      	strb	r3, [r7, #3]
 800158c:	460b      	mov	r3, r1
 800158e:	70bb      	strb	r3, [r7, #2]
 8001590:	4613      	mov	r3, r2
 8001592:	707b      	strb	r3, [r7, #1]
  u8g2_long_t err;
  u8g2_long_t rxrx2;
  u8g2_long_t ryry2;
  u8g2_long_t stopx, stopy;
  
  rxrx2 = rx;
 8001594:	787b      	ldrb	r3, [r7, #1]
 8001596:	817b      	strh	r3, [r7, #10]
  rxrx2 *= rx;
 8001598:	787b      	ldrb	r3, [r7, #1]
 800159a:	b29b      	uxth	r3, r3
 800159c:	897a      	ldrh	r2, [r7, #10]
 800159e:	fb02 f303 	mul.w	r3, r2, r3
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	817b      	strh	r3, [r7, #10]
  rxrx2 *= 2;
 80015a6:	897b      	ldrh	r3, [r7, #10]
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	817b      	strh	r3, [r7, #10]
  
  ryry2 = ry;
 80015ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015b2:	813b      	strh	r3, [r7, #8]
  ryry2 *= ry;
 80015b4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	893a      	ldrh	r2, [r7, #8]
 80015bc:	fb02 f303 	mul.w	r3, r2, r3
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	813b      	strh	r3, [r7, #8]
  ryry2 *= 2;
 80015c4:	893b      	ldrh	r3, [r7, #8]
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	813b      	strh	r3, [r7, #8]
  
  x = rx;
 80015cc:	787b      	ldrb	r3, [r7, #1]
 80015ce:	75fb      	strb	r3, [r7, #23]
  y = 0;
 80015d0:	2300      	movs	r3, #0
 80015d2:	75bb      	strb	r3, [r7, #22]
  
  xchg = 1;
 80015d4:	2301      	movs	r3, #1
 80015d6:	82bb      	strh	r3, [r7, #20]
  xchg -= rx;
 80015d8:	8aba      	ldrh	r2, [r7, #20]
 80015da:	787b      	ldrb	r3, [r7, #1]
 80015dc:	b29b      	uxth	r3, r3
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	82bb      	strh	r3, [r7, #20]
  xchg -= rx;
 80015e4:	8aba      	ldrh	r2, [r7, #20]
 80015e6:	787b      	ldrb	r3, [r7, #1]
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	82bb      	strh	r3, [r7, #20]
  xchg *= ry;
 80015f0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	8aba      	ldrh	r2, [r7, #20]
 80015f8:	fb02 f303 	mul.w	r3, r2, r3
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	82bb      	strh	r3, [r7, #20]
  xchg *= ry;
 8001600:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001604:	b29b      	uxth	r3, r3
 8001606:	8aba      	ldrh	r2, [r7, #20]
 8001608:	fb02 f303 	mul.w	r3, r2, r3
 800160c:	b29b      	uxth	r3, r3
 800160e:	82bb      	strh	r3, [r7, #20]
  
  ychg = rx;
 8001610:	787b      	ldrb	r3, [r7, #1]
 8001612:	827b      	strh	r3, [r7, #18]
  ychg *= rx;
 8001614:	787b      	ldrb	r3, [r7, #1]
 8001616:	b29b      	uxth	r3, r3
 8001618:	8a7a      	ldrh	r2, [r7, #18]
 800161a:	fb02 f303 	mul.w	r3, r2, r3
 800161e:	b29b      	uxth	r3, r3
 8001620:	827b      	strh	r3, [r7, #18]
  
  err = 0;
 8001622:	2300      	movs	r3, #0
 8001624:	823b      	strh	r3, [r7, #16]
  
  stopx = ryry2;
 8001626:	893b      	ldrh	r3, [r7, #8]
 8001628:	81fb      	strh	r3, [r7, #14]
  stopx *= rx;
 800162a:	787b      	ldrb	r3, [r7, #1]
 800162c:	b29b      	uxth	r3, r3
 800162e:	89fa      	ldrh	r2, [r7, #14]
 8001630:	fb02 f303 	mul.w	r3, r2, r3
 8001634:	b29b      	uxth	r3, r3
 8001636:	81fb      	strh	r3, [r7, #14]
  stopy = 0;
 8001638:	2300      	movs	r3, #0
 800163a:	81bb      	strh	r3, [r7, #12]
  
  while( stopx >= stopy )
 800163c:	e037      	b.n	80016ae <u8g2_draw_filled_ellipse+0x134>
  {
    u8g2_draw_filled_ellipse_section(u8g2, x, y, x0, y0, option);
 800163e:	78f8      	ldrb	r0, [r7, #3]
 8001640:	7dba      	ldrb	r2, [r7, #22]
 8001642:	7df9      	ldrb	r1, [r7, #23]
 8001644:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001648:	9301      	str	r3, [sp, #4]
 800164a:	78bb      	ldrb	r3, [r7, #2]
 800164c:	9300      	str	r3, [sp, #0]
 800164e:	4603      	mov	r3, r0
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f7ff ff3b 	bl	80014cc <u8g2_draw_filled_ellipse_section>
    y++;
 8001656:	7dbb      	ldrb	r3, [r7, #22]
 8001658:	3301      	adds	r3, #1
 800165a:	75bb      	strb	r3, [r7, #22]
    stopy += rxrx2;
 800165c:	89ba      	ldrh	r2, [r7, #12]
 800165e:	897b      	ldrh	r3, [r7, #10]
 8001660:	4413      	add	r3, r2
 8001662:	b29b      	uxth	r3, r3
 8001664:	81bb      	strh	r3, [r7, #12]
    err += ychg;
 8001666:	8a3a      	ldrh	r2, [r7, #16]
 8001668:	8a7b      	ldrh	r3, [r7, #18]
 800166a:	4413      	add	r3, r2
 800166c:	b29b      	uxth	r3, r3
 800166e:	823b      	strh	r3, [r7, #16]
    ychg += rxrx2;
 8001670:	8a7a      	ldrh	r2, [r7, #18]
 8001672:	897b      	ldrh	r3, [r7, #10]
 8001674:	4413      	add	r3, r2
 8001676:	b29b      	uxth	r3, r3
 8001678:	827b      	strh	r3, [r7, #18]
    if ( 2*err+xchg > 0 )
 800167a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800167e:	005a      	lsls	r2, r3, #1
 8001680:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001684:	4413      	add	r3, r2
 8001686:	2b00      	cmp	r3, #0
 8001688:	dd11      	ble.n	80016ae <u8g2_draw_filled_ellipse+0x134>
    {
      x--;
 800168a:	7dfb      	ldrb	r3, [r7, #23]
 800168c:	3b01      	subs	r3, #1
 800168e:	75fb      	strb	r3, [r7, #23]
      stopx -= ryry2;
 8001690:	89fa      	ldrh	r2, [r7, #14]
 8001692:	893b      	ldrh	r3, [r7, #8]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	b29b      	uxth	r3, r3
 8001698:	81fb      	strh	r3, [r7, #14]
      err += xchg;
 800169a:	8a3a      	ldrh	r2, [r7, #16]
 800169c:	8abb      	ldrh	r3, [r7, #20]
 800169e:	4413      	add	r3, r2
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	823b      	strh	r3, [r7, #16]
      xchg += ryry2;      
 80016a4:	8aba      	ldrh	r2, [r7, #20]
 80016a6:	893b      	ldrh	r3, [r7, #8]
 80016a8:	4413      	add	r3, r2
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	82bb      	strh	r3, [r7, #20]
  while( stopx >= stopy )
 80016ae:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80016b2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	dac1      	bge.n	800163e <u8g2_draw_filled_ellipse+0xc4>
    }
  }

  x = 0;
 80016ba:	2300      	movs	r3, #0
 80016bc:	75fb      	strb	r3, [r7, #23]
  y = ry;
 80016be:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016c2:	75bb      	strb	r3, [r7, #22]
  
  xchg = ry;
 80016c4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016c8:	82bb      	strh	r3, [r7, #20]
  xchg *= ry;
 80016ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	8aba      	ldrh	r2, [r7, #20]
 80016d2:	fb02 f303 	mul.w	r3, r2, r3
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	82bb      	strh	r3, [r7, #20]
  
  ychg = 1;
 80016da:	2301      	movs	r3, #1
 80016dc:	827b      	strh	r3, [r7, #18]
  ychg -= ry;
 80016de:	8a7a      	ldrh	r2, [r7, #18]
 80016e0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	827b      	strh	r3, [r7, #18]
  ychg -= ry;
 80016ec:	8a7a      	ldrh	r2, [r7, #18]
 80016ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	827b      	strh	r3, [r7, #18]
  ychg *= rx;
 80016fa:	787b      	ldrb	r3, [r7, #1]
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	8a7a      	ldrh	r2, [r7, #18]
 8001700:	fb02 f303 	mul.w	r3, r2, r3
 8001704:	b29b      	uxth	r3, r3
 8001706:	827b      	strh	r3, [r7, #18]
  ychg *= rx;
 8001708:	787b      	ldrb	r3, [r7, #1]
 800170a:	b29b      	uxth	r3, r3
 800170c:	8a7a      	ldrh	r2, [r7, #18]
 800170e:	fb02 f303 	mul.w	r3, r2, r3
 8001712:	b29b      	uxth	r3, r3
 8001714:	827b      	strh	r3, [r7, #18]
  
  err = 0;
 8001716:	2300      	movs	r3, #0
 8001718:	823b      	strh	r3, [r7, #16]
  
  stopx = 0;
 800171a:	2300      	movs	r3, #0
 800171c:	81fb      	strh	r3, [r7, #14]

  stopy = rxrx2;
 800171e:	897b      	ldrh	r3, [r7, #10]
 8001720:	81bb      	strh	r3, [r7, #12]
  stopy *= ry;
 8001722:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001726:	b29b      	uxth	r3, r3
 8001728:	89ba      	ldrh	r2, [r7, #12]
 800172a:	fb02 f303 	mul.w	r3, r2, r3
 800172e:	b29b      	uxth	r3, r3
 8001730:	81bb      	strh	r3, [r7, #12]
  

  while( stopx <= stopy )
 8001732:	e037      	b.n	80017a4 <u8g2_draw_filled_ellipse+0x22a>
  {
    u8g2_draw_filled_ellipse_section(u8g2, x, y, x0, y0, option);
 8001734:	78f8      	ldrb	r0, [r7, #3]
 8001736:	7dba      	ldrb	r2, [r7, #22]
 8001738:	7df9      	ldrb	r1, [r7, #23]
 800173a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800173e:	9301      	str	r3, [sp, #4]
 8001740:	78bb      	ldrb	r3, [r7, #2]
 8001742:	9300      	str	r3, [sp, #0]
 8001744:	4603      	mov	r3, r0
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff fec0 	bl	80014cc <u8g2_draw_filled_ellipse_section>
    x++;
 800174c:	7dfb      	ldrb	r3, [r7, #23]
 800174e:	3301      	adds	r3, #1
 8001750:	75fb      	strb	r3, [r7, #23]
    stopx += ryry2;
 8001752:	89fa      	ldrh	r2, [r7, #14]
 8001754:	893b      	ldrh	r3, [r7, #8]
 8001756:	4413      	add	r3, r2
 8001758:	b29b      	uxth	r3, r3
 800175a:	81fb      	strh	r3, [r7, #14]
    err += xchg;
 800175c:	8a3a      	ldrh	r2, [r7, #16]
 800175e:	8abb      	ldrh	r3, [r7, #20]
 8001760:	4413      	add	r3, r2
 8001762:	b29b      	uxth	r3, r3
 8001764:	823b      	strh	r3, [r7, #16]
    xchg += ryry2;
 8001766:	8aba      	ldrh	r2, [r7, #20]
 8001768:	893b      	ldrh	r3, [r7, #8]
 800176a:	4413      	add	r3, r2
 800176c:	b29b      	uxth	r3, r3
 800176e:	82bb      	strh	r3, [r7, #20]
    if ( 2*err+ychg > 0 )
 8001770:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001774:	005a      	lsls	r2, r3, #1
 8001776:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800177a:	4413      	add	r3, r2
 800177c:	2b00      	cmp	r3, #0
 800177e:	dd11      	ble.n	80017a4 <u8g2_draw_filled_ellipse+0x22a>
    {
      y--;
 8001780:	7dbb      	ldrb	r3, [r7, #22]
 8001782:	3b01      	subs	r3, #1
 8001784:	75bb      	strb	r3, [r7, #22]
      stopy -= rxrx2;
 8001786:	89ba      	ldrh	r2, [r7, #12]
 8001788:	897b      	ldrh	r3, [r7, #10]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	b29b      	uxth	r3, r3
 800178e:	81bb      	strh	r3, [r7, #12]
      err += ychg;
 8001790:	8a3a      	ldrh	r2, [r7, #16]
 8001792:	8a7b      	ldrh	r3, [r7, #18]
 8001794:	4413      	add	r3, r2
 8001796:	b29b      	uxth	r3, r3
 8001798:	823b      	strh	r3, [r7, #16]
      ychg += rxrx2;
 800179a:	8a7a      	ldrh	r2, [r7, #18]
 800179c:	897b      	ldrh	r3, [r7, #10]
 800179e:	4413      	add	r3, r2
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	827b      	strh	r3, [r7, #18]
  while( stopx <= stopy )
 80017a4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80017a8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	ddc1      	ble.n	8001734 <u8g2_draw_filled_ellipse+0x1ba>
    }
  }
  
}
 80017b0:	bf00      	nop
 80017b2:	3718      	adds	r7, #24
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <u8g2_DrawFilledEllipse>:

void u8g2_DrawFilledEllipse(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rx, u8g2_uint_t ry, uint8_t option)
{
 80017b8:	b590      	push	{r4, r7, lr}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af02      	add	r7, sp, #8
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	4608      	mov	r0, r1
 80017c2:	4611      	mov	r1, r2
 80017c4:	461a      	mov	r2, r3
 80017c6:	4603      	mov	r3, r0
 80017c8:	70fb      	strb	r3, [r7, #3]
 80017ca:	460b      	mov	r3, r1
 80017cc:	70bb      	strb	r3, [r7, #2]
 80017ce:	4613      	mov	r3, r2
 80017d0:	707b      	strb	r3, [r7, #1]
  /* check for bounding box */
#ifdef U8G2_WITH_INTERSECTION
  {
    if ( u8g2_IsIntersection(u8g2, x0-rx, y0-ry, x0+rx+1, y0+ry+1) == 0 ) 
 80017d2:	78fa      	ldrb	r2, [r7, #3]
 80017d4:	787b      	ldrb	r3, [r7, #1]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	b2d9      	uxtb	r1, r3
 80017da:	78ba      	ldrb	r2, [r7, #2]
 80017dc:	7e3b      	ldrb	r3, [r7, #24]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	b2d8      	uxtb	r0, r3
 80017e2:	78fa      	ldrb	r2, [r7, #3]
 80017e4:	787b      	ldrb	r3, [r7, #1]
 80017e6:	4413      	add	r3, r2
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	3301      	adds	r3, #1
 80017ec:	b2dc      	uxtb	r4, r3
 80017ee:	78ba      	ldrb	r2, [r7, #2]
 80017f0:	7e3b      	ldrb	r3, [r7, #24]
 80017f2:	4413      	add	r3, r2
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	3301      	adds	r3, #1
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	9300      	str	r3, [sp, #0]
 80017fc:	4623      	mov	r3, r4
 80017fe:	4602      	mov	r2, r0
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f000 ff44 	bl	800268e <u8g2_IsIntersection>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d00b      	beq.n	8001824 <u8g2_DrawFilledEllipse+0x6c>
      return;
  }
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_draw_filled_ellipse(u8g2, x0, y0, rx, ry, option);
 800180c:	7878      	ldrb	r0, [r7, #1]
 800180e:	78ba      	ldrb	r2, [r7, #2]
 8001810:	78f9      	ldrb	r1, [r7, #3]
 8001812:	7f3b      	ldrb	r3, [r7, #28]
 8001814:	9301      	str	r3, [sp, #4]
 8001816:	7e3b      	ldrb	r3, [r7, #24]
 8001818:	9300      	str	r3, [sp, #0]
 800181a:	4603      	mov	r3, r0
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f7ff feac 	bl	800157a <u8g2_draw_filled_ellipse>
 8001822:	e000      	b.n	8001826 <u8g2_DrawFilledEllipse+0x6e>
      return;
 8001824:	bf00      	nop
}
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	bd90      	pop	{r4, r7, pc}

0800182c <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2208      	movs	r2, #8
 8001838:	701a      	strb	r2, [r3, #0]
  return buf;
 800183a:	4b03      	ldr	r3, [pc, #12]	; (8001848 <u8g2_m_16_8_f+0x1c>)
  #endif
}
 800183c:	4618      	mov	r0, r3
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	bc80      	pop	{r7}
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	200000c4 	.word	0x200000c4

0800184c <u8g2_Setup_st7920_s_128x64_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_horizontal_right_lsb, rotation);
}
/* st7920 f */
void u8g2_Setup_st7920_s_128x64_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b088      	sub	sp, #32
 8001850:	af02      	add	r7, sp, #8
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
 8001858:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_st7920_128x64, u8x8_cad_st7920_spi, byte_cb, gpio_and_delay_cb);
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	9300      	str	r3, [sp, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a0b      	ldr	r2, [pc, #44]	; (8001890 <u8g2_Setup_st7920_s_128x64_f+0x44>)
 8001862:	490c      	ldr	r1, [pc, #48]	; (8001894 <u8g2_Setup_st7920_s_128x64_f+0x48>)
 8001864:	68f8      	ldr	r0, [r7, #12]
 8001866:	f001 fce9 	bl	800323c <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 800186a:	f107 0313 	add.w	r3, r7, #19
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff ffdc 	bl	800182c <u8g2_m_16_8_f>
 8001874:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_horizontal_right_lsb, rotation);
 8001876:	7cfa      	ldrb	r2, [r7, #19]
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	9300      	str	r3, [sp, #0]
 800187c:	4b06      	ldr	r3, [pc, #24]	; (8001898 <u8g2_Setup_st7920_s_128x64_f+0x4c>)
 800187e:	6979      	ldr	r1, [r7, #20]
 8001880:	68f8      	ldr	r0, [r7, #12]
 8001882:	f000 ffd5 	bl	8002830 <u8g2_SetupBuffer>
}
 8001886:	bf00      	nop
 8001888:	3718      	adds	r7, #24
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	08002d65 	.word	0x08002d65
 8001894:	08002ff5 	.word	0x08002ff5
 8001898:	080026e5 	.word	0x080026e5

0800189c <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	460b      	mov	r3, r1
 80018a6:	70fb      	strb	r3, [r7, #3]
  font += offset;
 80018a8:	78fb      	ldrb	r3, [r7, #3]
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	4413      	add	r3, r2
 80018ae:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	781b      	ldrb	r3, [r3, #0]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bc80      	pop	{r7}
 80018bc:	4770      	bx	lr

080018be <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 80018be:	b480      	push	{r7}
 80018c0:	b085      	sub	sp, #20
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
 80018c6:	460b      	mov	r3, r1
 80018c8:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 80018ca:	78fb      	ldrb	r3, [r7, #3]
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	4413      	add	r3, r2
 80018d0:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	81fb      	strh	r3, [r7, #14]
    font++;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3301      	adds	r3, #1
 80018dc:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 80018de:	89fb      	ldrh	r3, [r7, #14]
 80018e0:	021b      	lsls	r3, r3, #8
 80018e2:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	89fb      	ldrh	r3, [r7, #14]
 80018ec:	4413      	add	r3, r2
 80018ee:	81fb      	strh	r3, [r7, #14]
    return pos;
 80018f0:	89fb      	ldrh	r3, [r7, #14]
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3714      	adds	r7, #20
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bc80      	pop	{r7}
 80018fa:	4770      	bx	lr

080018fc <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8001906:	2100      	movs	r1, #0
 8001908:	6838      	ldr	r0, [r7, #0]
 800190a:	f7ff ffc7 	bl	800189c <u8g2_font_get_byte>
 800190e:	4603      	mov	r3, r0
 8001910:	461a      	mov	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8001916:	2101      	movs	r1, #1
 8001918:	6838      	ldr	r0, [r7, #0]
 800191a:	f7ff ffbf 	bl	800189c <u8g2_font_get_byte>
 800191e:	4603      	mov	r3, r0
 8001920:	461a      	mov	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8001926:	2102      	movs	r1, #2
 8001928:	6838      	ldr	r0, [r7, #0]
 800192a:	f7ff ffb7 	bl	800189c <u8g2_font_get_byte>
 800192e:	4603      	mov	r3, r0
 8001930:	461a      	mov	r2, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8001936:	2103      	movs	r1, #3
 8001938:	6838      	ldr	r0, [r7, #0]
 800193a:	f7ff ffaf 	bl	800189c <u8g2_font_get_byte>
 800193e:	4603      	mov	r3, r0
 8001940:	461a      	mov	r2, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8001946:	2104      	movs	r1, #4
 8001948:	6838      	ldr	r0, [r7, #0]
 800194a:	f7ff ffa7 	bl	800189c <u8g2_font_get_byte>
 800194e:	4603      	mov	r3, r0
 8001950:	461a      	mov	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8001956:	2105      	movs	r1, #5
 8001958:	6838      	ldr	r0, [r7, #0]
 800195a:	f7ff ff9f 	bl	800189c <u8g2_font_get_byte>
 800195e:	4603      	mov	r3, r0
 8001960:	461a      	mov	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8001966:	2106      	movs	r1, #6
 8001968:	6838      	ldr	r0, [r7, #0]
 800196a:	f7ff ff97 	bl	800189c <u8g2_font_get_byte>
 800196e:	4603      	mov	r3, r0
 8001970:	461a      	mov	r2, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8001976:	2107      	movs	r1, #7
 8001978:	6838      	ldr	r0, [r7, #0]
 800197a:	f7ff ff8f 	bl	800189c <u8g2_font_get_byte>
 800197e:	4603      	mov	r3, r0
 8001980:	461a      	mov	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8001986:	2108      	movs	r1, #8
 8001988:	6838      	ldr	r0, [r7, #0]
 800198a:	f7ff ff87 	bl	800189c <u8g2_font_get_byte>
 800198e:	4603      	mov	r3, r0
 8001990:	461a      	mov	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8001996:	2109      	movs	r1, #9
 8001998:	6838      	ldr	r0, [r7, #0]
 800199a:	f7ff ff7f 	bl	800189c <u8g2_font_get_byte>
 800199e:	4603      	mov	r3, r0
 80019a0:	b25a      	sxtb	r2, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 80019a6:	210a      	movs	r1, #10
 80019a8:	6838      	ldr	r0, [r7, #0]
 80019aa:	f7ff ff77 	bl	800189c <u8g2_font_get_byte>
 80019ae:	4603      	mov	r3, r0
 80019b0:	b25a      	sxtb	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 80019b6:	210b      	movs	r1, #11
 80019b8:	6838      	ldr	r0, [r7, #0]
 80019ba:	f7ff ff6f 	bl	800189c <u8g2_font_get_byte>
 80019be:	4603      	mov	r3, r0
 80019c0:	b25a      	sxtb	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 80019c6:	210c      	movs	r1, #12
 80019c8:	6838      	ldr	r0, [r7, #0]
 80019ca:	f7ff ff67 	bl	800189c <u8g2_font_get_byte>
 80019ce:	4603      	mov	r3, r0
 80019d0:	b25a      	sxtb	r2, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 80019d6:	210d      	movs	r1, #13
 80019d8:	6838      	ldr	r0, [r7, #0]
 80019da:	f7ff ff5f 	bl	800189c <u8g2_font_get_byte>
 80019de:	4603      	mov	r3, r0
 80019e0:	b25a      	sxtb	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 80019e6:	210e      	movs	r1, #14
 80019e8:	6838      	ldr	r0, [r7, #0]
 80019ea:	f7ff ff57 	bl	800189c <u8g2_font_get_byte>
 80019ee:	4603      	mov	r3, r0
 80019f0:	b25a      	sxtb	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 80019f6:	210f      	movs	r1, #15
 80019f8:	6838      	ldr	r0, [r7, #0]
 80019fa:	f7ff ff4f 	bl	800189c <u8g2_font_get_byte>
 80019fe:	4603      	mov	r3, r0
 8001a00:	b25a      	sxtb	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8001a06:	2110      	movs	r1, #16
 8001a08:	6838      	ldr	r0, [r7, #0]
 8001a0a:	f7ff ff47 	bl	800189c <u8g2_font_get_byte>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	b25a      	sxtb	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8001a16:	2111      	movs	r1, #17
 8001a18:	6838      	ldr	r0, [r7, #0]
 8001a1a:	f7ff ff50 	bl	80018be <u8g2_font_get_word>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	461a      	mov	r2, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8001a26:	2113      	movs	r1, #19
 8001a28:	6838      	ldr	r0, [r7, #0]
 8001a2a:	f7ff ff48 	bl	80018be <u8g2_font_get_word>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	461a      	mov	r2, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8001a36:	2115      	movs	r1, #21
 8001a38:	6838      	ldr	r0, [r7, #0]
 8001a3a:	f7ff ff40 	bl	80018be <u8g2_font_get_word>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	461a      	mov	r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	82da      	strh	r2, [r3, #22]
#endif
}
 8001a46:	bf00      	nop
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8001a4e:	b480      	push	{r7}
 8001a50:	b085      	sub	sp, #20
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
 8001a56:	460b      	mov	r3, r1
 8001a58:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	7a9b      	ldrb	r3, [r3, #10]
 8001a5e:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8001a68:	7bfa      	ldrb	r2, [r7, #15]
 8001a6a:	7b7b      	ldrb	r3, [r7, #13]
 8001a6c:	fa42 f303 	asr.w	r3, r2, r3
 8001a70:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 8001a72:	7b7b      	ldrb	r3, [r7, #13]
 8001a74:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 8001a76:	7bba      	ldrb	r2, [r7, #14]
 8001a78:	78fb      	ldrb	r3, [r7, #3]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8001a7e:	7bbb      	ldrb	r3, [r7, #14]
 8001a80:	2b07      	cmp	r3, #7
 8001a82:	d91a      	bls.n	8001aba <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8001a84:	2308      	movs	r3, #8
 8001a86:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8001a88:	7b3a      	ldrb	r2, [r7, #12]
 8001a8a:	7b7b      	ldrb	r3, [r7, #13]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	1c5a      	adds	r2, r3, #1
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	7b3b      	ldrb	r3, [r7, #12]
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	b25a      	sxtb	r2, r3
 8001aaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	b25b      	sxtb	r3, r3
 8001ab2:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8001ab4:	7bbb      	ldrb	r3, [r7, #14]
 8001ab6:	3b08      	subs	r3, #8
 8001ab8:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8001aba:	78fb      	ldrb	r3, [r7, #3]
 8001abc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	43db      	mvns	r3, r3
 8001ac8:	b2da      	uxtb	r2, r3
 8001aca:	7bfb      	ldrb	r3, [r7, #15]
 8001acc:	4013      	ands	r3, r2
 8001ace:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	7bba      	ldrb	r2, [r7, #14]
 8001ad4:	729a      	strb	r2, [r3, #10]
  return val;
 8001ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3714      	adds	r7, #20
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bc80      	pop	{r7}
 8001ae0:	4770      	bx	lr

08001ae2 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b084      	sub	sp, #16
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
 8001aea:	460b      	mov	r3, r1
 8001aec:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8001aee:	78fb      	ldrb	r3, [r7, #3]
 8001af0:	4619      	mov	r1, r3
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7ff ffab 	bl	8001a4e <u8g2_font_decode_get_unsigned_bits>
 8001af8:	4603      	mov	r3, r0
 8001afa:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8001afc:	2301      	movs	r3, #1
 8001afe:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8001b00:	78fb      	ldrb	r3, [r7, #3]
 8001b02:	3b01      	subs	r3, #1
 8001b04:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8001b06:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001b0a:	78fb      	ldrb	r3, [r7, #3]
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8001b12:	7bfa      	ldrb	r2, [r7, #15]
 8001b14:	7bbb      	ldrb	r3, [r7, #14]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	73fb      	strb	r3, [r7, #15]
  return v;
 8001b1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3710      	adds	r7, #16
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8001b28:	b490      	push	{r4, r7}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4604      	mov	r4, r0
 8001b30:	4608      	mov	r0, r1
 8001b32:	4611      	mov	r1, r2
 8001b34:	461a      	mov	r2, r3
 8001b36:	4623      	mov	r3, r4
 8001b38:	71fb      	strb	r3, [r7, #7]
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	71bb      	strb	r3, [r7, #6]
 8001b3e:	460b      	mov	r3, r1
 8001b40:	717b      	strb	r3, [r7, #5]
 8001b42:	4613      	mov	r3, r2
 8001b44:	713b      	strb	r3, [r7, #4]
  switch(dir)
 8001b46:	793b      	ldrb	r3, [r7, #4]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d008      	beq.n	8001b5e <u8g2_add_vector_y+0x36>
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d00b      	beq.n	8001b68 <u8g2_add_vector_y+0x40>
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d10e      	bne.n	8001b72 <u8g2_add_vector_y+0x4a>
  {
    case 0:
      dy += y;
 8001b54:	797a      	ldrb	r2, [r7, #5]
 8001b56:	79fb      	ldrb	r3, [r7, #7]
 8001b58:	4413      	add	r3, r2
 8001b5a:	71fb      	strb	r3, [r7, #7]
      break;
 8001b5c:	e00e      	b.n	8001b7c <u8g2_add_vector_y+0x54>
    case 1:
      dy += x;
 8001b5e:	79ba      	ldrb	r2, [r7, #6]
 8001b60:	79fb      	ldrb	r3, [r7, #7]
 8001b62:	4413      	add	r3, r2
 8001b64:	71fb      	strb	r3, [r7, #7]
      break;
 8001b66:	e009      	b.n	8001b7c <u8g2_add_vector_y+0x54>
    case 2:
      dy -= y;
 8001b68:	797b      	ldrb	r3, [r7, #5]
 8001b6a:	79fa      	ldrb	r2, [r7, #7]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	71fb      	strb	r3, [r7, #7]
      break;
 8001b70:	e004      	b.n	8001b7c <u8g2_add_vector_y+0x54>
    default:
      dy -= x;
 8001b72:	79bb      	ldrb	r3, [r7, #6]
 8001b74:	79fa      	ldrb	r2, [r7, #7]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	71fb      	strb	r3, [r7, #7]
      break;      
 8001b7a:	bf00      	nop
  }
  return dy;
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bc90      	pop	{r4, r7}
 8001b86:	4770      	bx	lr

08001b88 <u8g2_add_vector_x>:

static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8001b88:	b490      	push	{r4, r7}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4604      	mov	r4, r0
 8001b90:	4608      	mov	r0, r1
 8001b92:	4611      	mov	r1, r2
 8001b94:	461a      	mov	r2, r3
 8001b96:	4623      	mov	r3, r4
 8001b98:	71fb      	strb	r3, [r7, #7]
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	71bb      	strb	r3, [r7, #6]
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	717b      	strb	r3, [r7, #5]
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	713b      	strb	r3, [r7, #4]
  switch(dir)
 8001ba6:	793b      	ldrb	r3, [r7, #4]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d008      	beq.n	8001bbe <u8g2_add_vector_x+0x36>
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d00b      	beq.n	8001bc8 <u8g2_add_vector_x+0x40>
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d10e      	bne.n	8001bd2 <u8g2_add_vector_x+0x4a>
  {
    case 0:
      dx += x;
 8001bb4:	79ba      	ldrb	r2, [r7, #6]
 8001bb6:	79fb      	ldrb	r3, [r7, #7]
 8001bb8:	4413      	add	r3, r2
 8001bba:	71fb      	strb	r3, [r7, #7]
      break;
 8001bbc:	e00e      	b.n	8001bdc <u8g2_add_vector_x+0x54>
    case 1:
      dx -= y;
 8001bbe:	797b      	ldrb	r3, [r7, #5]
 8001bc0:	79fa      	ldrb	r2, [r7, #7]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	71fb      	strb	r3, [r7, #7]
      break;
 8001bc6:	e009      	b.n	8001bdc <u8g2_add_vector_x+0x54>
    case 2:
      dx -= x;
 8001bc8:	79bb      	ldrb	r3, [r7, #6]
 8001bca:	79fa      	ldrb	r2, [r7, #7]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	71fb      	strb	r3, [r7, #7]
      break;
 8001bd0:	e004      	b.n	8001bdc <u8g2_add_vector_x+0x54>
    default:
      dx += y;
 8001bd2:	797a      	ldrb	r2, [r7, #5]
 8001bd4:	79fb      	ldrb	r3, [r7, #7]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	71fb      	strb	r3, [r7, #7]
      break;      
 8001bda:	bf00      	nop
  }
  return dx;
 8001bdc:	79fb      	ldrb	r3, [r7, #7]
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bc90      	pop	{r4, r7}
 8001be6:	4770      	bx	lr

08001be8 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b088      	sub	sp, #32
 8001bec:	af02      	add	r7, sp, #8
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	70fb      	strb	r3, [r7, #3]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	3358      	adds	r3, #88	; 0x58
 8001bfc:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8001bfe:	78fb      	ldrb	r3, [r7, #3]
 8001c00:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001c08:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8001c10:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001c18:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8001c1a:	7bfa      	ldrb	r2, [r7, #15]
 8001c1c:	7d7b      	ldrb	r3, [r7, #21]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8001c22:	7bfb      	ldrb	r3, [r7, #15]
 8001c24:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8001c26:	7dfa      	ldrb	r2, [r7, #23]
 8001c28:	7bfb      	ldrb	r3, [r7, #15]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d201      	bcs.n	8001c32 <u8g2_font_decode_len+0x4a>
      current = cnt;
 8001c2e:	7dfb      	ldrb	r3, [r7, #23]
 8001c30:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	791b      	ldrb	r3, [r3, #4]
 8001c36:	73bb      	strb	r3, [r7, #14]
    y = decode->target_y;
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	795b      	ldrb	r3, [r3, #5]
 8001c3c:	737b      	strb	r3, [r7, #13]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8001c3e:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8001c42:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	7b9b      	ldrb	r3, [r3, #14]
 8001c4a:	7bb8      	ldrb	r0, [r7, #14]
 8001c4c:	f7ff ff9c 	bl	8001b88 <u8g2_add_vector_x>
 8001c50:	4603      	mov	r3, r0
 8001c52:	73bb      	strb	r3, [r7, #14]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8001c54:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8001c58:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	7b9b      	ldrb	r3, [r3, #14]
 8001c60:	7b78      	ldrb	r0, [r7, #13]
 8001c62:	f7ff ff61 	bl	8001b28 <u8g2_add_vector_y>
 8001c66:	4603      	mov	r3, r0
 8001c68:	737b      	strb	r3, [r7, #13]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8001c6a:	78bb      	ldrb	r3, [r7, #2]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d00f      	beq.n	8001c90 <u8g2_font_decode_len+0xa8>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	7b1a      	ldrb	r2, [r3, #12]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
      u8g2_DrawHVLine(u8g2, 
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	7b9b      	ldrb	r3, [r3, #14]
 8001c7e:	7db8      	ldrb	r0, [r7, #22]
 8001c80:	7b7a      	ldrb	r2, [r7, #13]
 8001c82:	7bb9      	ldrb	r1, [r7, #14]
 8001c84:	9300      	str	r3, [sp, #0]
 8001c86:	4603      	mov	r3, r0
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f000 fc00 	bl	800248e <u8g2_DrawHVLine>
 8001c8e:	e012      	b.n	8001cb6 <u8g2_font_decode_len+0xce>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	7adb      	ldrb	r3, [r3, #11]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d10e      	bne.n	8001cb6 <u8g2_font_decode_len+0xce>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	7b5a      	ldrb	r2, [r3, #13]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
      u8g2_DrawHVLine(u8g2, 
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	7b9b      	ldrb	r3, [r3, #14]
 8001ca6:	7db8      	ldrb	r0, [r7, #22]
 8001ca8:	7b7a      	ldrb	r2, [r7, #13]
 8001caa:	7bb9      	ldrb	r1, [r7, #14]
 8001cac:	9300      	str	r3, [sp, #0]
 8001cae:	4603      	mov	r3, r0
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f000 fbec 	bl	800248e <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8001cb6:	7dfa      	ldrb	r2, [r7, #23]
 8001cb8:	7bfb      	ldrb	r3, [r7, #15]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d309      	bcc.n	8001cd2 <u8g2_font_decode_len+0xea>
      break;
    cnt -= rem;
 8001cbe:	7dfa      	ldrb	r2, [r7, #23]
 8001cc0:	7bfb      	ldrb	r3, [r7, #15]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	757b      	strb	r3, [r7, #21]
    ly++;
 8001cca:	7d3b      	ldrb	r3, [r7, #20]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8001cd0:	e79f      	b.n	8001c12 <u8g2_font_decode_len+0x2a>
      break;
 8001cd2:	bf00      	nop
  }
  lx += cnt;
 8001cd4:	7d7a      	ldrb	r2, [r7, #21]
 8001cd6:	7dfb      	ldrb	r3, [r7, #23]
 8001cd8:	4413      	add	r3, r2
 8001cda:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8001cdc:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	719a      	strb	r2, [r3, #6]
  decode->y = ly;
 8001ce4:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	71da      	strb	r2, [r3, #7]
  
}
 8001cec:	bf00      	nop
 8001cee:	3718      	adds	r7, #24
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	3358      	adds	r3, #88	; 0x58
 8001d02:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	683a      	ldr	r2, [r7, #0]
 8001d08:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	729a      	strb	r2, [r3, #10]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8001d16:	4619      	mov	r1, r3
 8001d18:	68f8      	ldr	r0, [r7, #12]
 8001d1a:	f7ff fe98 	bl	8001a4e <u8g2_font_decode_get_unsigned_bits>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	b25a      	sxtb	r2, r3
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	721a      	strb	r2, [r3, #8]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	68f8      	ldr	r0, [r7, #12]
 8001d30:	f7ff fe8d 	bl	8001a4e <u8g2_font_decode_get_unsigned_bits>
 8001d34:	4603      	mov	r3, r0
 8001d36:	b25a      	sxtb	r2, r3
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	725a      	strb	r2, [r3, #9]
  
  decode->fg_color = u8g2->draw_color;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	731a      	strb	r2, [r3, #12]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	7b1b      	ldrb	r3, [r3, #12]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	bf0c      	ite	eq
 8001d4e:	2301      	moveq	r3, #1
 8001d50:	2300      	movne	r3, #0
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	461a      	mov	r2, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	735a      	strb	r2, [r3, #13]
}
 8001d5a:	bf00      	nop
 8001d5c:	3710      	adds	r7, #16
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
	...

08001d64 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b088      	sub	sp, #32
 8001d68:	af02      	add	r7, sp, #8
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	3358      	adds	r3, #88	; 0x58
 8001d72:	613b      	str	r3, [r7, #16]
    
  u8g2_font_setup_decode(u8g2, glyph_data);
 8001d74:	6839      	ldr	r1, [r7, #0]
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f7ff ffbc 	bl	8001cf4 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001d82:	73fb      	strb	r3, [r7, #15]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	6938      	ldr	r0, [r7, #16]
 8001d8e:	f7ff fea8 	bl	8001ae2 <u8g2_font_decode_get_signed_bits>
 8001d92:	4603      	mov	r3, r0
 8001d94:	73bb      	strb	r3, [r7, #14]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	6938      	ldr	r0, [r7, #16]
 8001da0:	f7ff fe9f 	bl	8001ae2 <u8g2_font_decode_get_signed_bits>
 8001da4:	4603      	mov	r3, r0
 8001da6:	737b      	strb	r3, [r7, #13]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001dae:	4619      	mov	r1, r3
 8001db0:	6938      	ldr	r0, [r7, #16]
 8001db2:	f7ff fe96 	bl	8001ae2 <u8g2_font_decode_get_signed_bits>
 8001db6:	4603      	mov	r3, r0
 8001db8:	733b      	strb	r3, [r7, #12]
  
  if ( decode->glyph_width > 0 )
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	f340 80cf 	ble.w	8001f64 <u8g2_font_decode_glyph+0x200>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	7918      	ldrb	r0, [r3, #4]
 8001dca:	7bfa      	ldrb	r2, [r7, #15]
 8001dcc:	7b7b      	ldrb	r3, [r7, #13]
 8001dce:	4413      	add	r3, r2
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	425b      	negs	r3, r3
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	b25a      	sxtb	r2, r3
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	7b9b      	ldrb	r3, [r3, #14]
 8001ddc:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8001de0:	f7ff fed2 	bl	8001b88 <u8g2_add_vector_x>
 8001de4:	4603      	mov	r3, r0
 8001de6:	461a      	mov	r2, r3
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	711a      	strb	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	7958      	ldrb	r0, [r3, #5]
 8001df0:	7bfa      	ldrb	r2, [r7, #15]
 8001df2:	7b7b      	ldrb	r3, [r7, #13]
 8001df4:	4413      	add	r3, r2
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	425b      	negs	r3, r3
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	b25a      	sxtb	r2, r3
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	7b9b      	ldrb	r3, [r3, #14]
 8001e02:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8001e06:	f7ff fe8f 	bl	8001b28 <u8g2_add_vector_y>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	715a      	strb	r2, [r3, #5]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	791b      	ldrb	r3, [r3, #4]
 8001e16:	75fb      	strb	r3, [r7, #23]
      y0 = decode->target_y;
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	795b      	ldrb	r3, [r3, #5]
 8001e1c:	757b      	strb	r3, [r7, #21]
      x1 = x0;
 8001e1e:	7dfb      	ldrb	r3, [r7, #23]
 8001e20:	75bb      	strb	r3, [r7, #22]
      y1 = y0;
 8001e22:	7d7b      	ldrb	r3, [r7, #21]
 8001e24:	753b      	strb	r3, [r7, #20]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	7b9b      	ldrb	r3, [r3, #14]
 8001e2a:	2b03      	cmp	r3, #3
 8001e2c:	d852      	bhi.n	8001ed4 <u8g2_font_decode_glyph+0x170>
 8001e2e:	a201      	add	r2, pc, #4	; (adr r2, 8001e34 <u8g2_font_decode_glyph+0xd0>)
 8001e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e34:	08001e45 	.word	0x08001e45
 8001e38:	08001e5d 	.word	0x08001e5d
 8001e3c:	08001e81 	.word	0x08001e81
 8001e40:	08001eb1 	.word	0x08001eb1
      {
	case 0:
	    x1 += decode->glyph_width;
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001e4a:	b2da      	uxtb	r2, r3
 8001e4c:	7dbb      	ldrb	r3, [r7, #22]
 8001e4e:	4413      	add	r3, r2
 8001e50:	75bb      	strb	r3, [r7, #22]
	    y1 += h;
 8001e52:	7bfa      	ldrb	r2, [r7, #15]
 8001e54:	7d3b      	ldrb	r3, [r7, #20]
 8001e56:	4413      	add	r3, r2
 8001e58:	753b      	strb	r3, [r7, #20]
	    break;
 8001e5a:	e03b      	b.n	8001ed4 <u8g2_font_decode_glyph+0x170>
	case 1:
	    x0 -= h;
 8001e5c:	7bfb      	ldrb	r3, [r7, #15]
 8001e5e:	7dfa      	ldrb	r2, [r7, #23]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001e64:	7dfb      	ldrb	r3, [r7, #23]
 8001e66:	3301      	adds	r3, #1
 8001e68:	75fb      	strb	r3, [r7, #23]
	    x1++;
 8001e6a:	7dbb      	ldrb	r3, [r7, #22]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	75bb      	strb	r3, [r7, #22]
	    y1 += decode->glyph_width;
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001e76:	b2da      	uxtb	r2, r3
 8001e78:	7d3b      	ldrb	r3, [r7, #20]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	753b      	strb	r3, [r7, #20]
	    break;
 8001e7e:	e029      	b.n	8001ed4 <u8g2_font_decode_glyph+0x170>
	case 2:
	    x0 -= decode->glyph_width;
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	7dfa      	ldrb	r2, [r7, #23]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001e8e:	7dfb      	ldrb	r3, [r7, #23]
 8001e90:	3301      	adds	r3, #1
 8001e92:	75fb      	strb	r3, [r7, #23]
	    x1++;
 8001e94:	7dbb      	ldrb	r3, [r7, #22]
 8001e96:	3301      	adds	r3, #1
 8001e98:	75bb      	strb	r3, [r7, #22]
	    y0 -= h;
 8001e9a:	7bfb      	ldrb	r3, [r7, #15]
 8001e9c:	7d7a      	ldrb	r2, [r7, #21]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001ea2:	7d7b      	ldrb	r3, [r7, #21]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	757b      	strb	r3, [r7, #21]
	    y1++;
 8001ea8:	7d3b      	ldrb	r3, [r7, #20]
 8001eaa:	3301      	adds	r3, #1
 8001eac:	753b      	strb	r3, [r7, #20]
	    break;	  
 8001eae:	e011      	b.n	8001ed4 <u8g2_font_decode_glyph+0x170>
	case 3:
	    x1 += h;
 8001eb0:	7bfa      	ldrb	r2, [r7, #15]
 8001eb2:	7dbb      	ldrb	r3, [r7, #22]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	75bb      	strb	r3, [r7, #22]
	    y0 -= decode->glyph_width;
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	7d7a      	ldrb	r2, [r7, #21]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001ec6:	7d7b      	ldrb	r3, [r7, #21]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	757b      	strb	r3, [r7, #21]
	    y1++;
 8001ecc:	7d3b      	ldrb	r3, [r7, #20]
 8001ece:	3301      	adds	r3, #1
 8001ed0:	753b      	strb	r3, [r7, #20]
	    break;	  
 8001ed2:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8001ed4:	7db8      	ldrb	r0, [r7, #22]
 8001ed6:	7d7a      	ldrb	r2, [r7, #21]
 8001ed8:	7df9      	ldrb	r1, [r7, #23]
 8001eda:	7d3b      	ldrb	r3, [r7, #20]
 8001edc:	9300      	str	r3, [sp, #0]
 8001ede:	4603      	mov	r3, r0
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f000 fbd4 	bl	800268e <u8g2_IsIntersection>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d102      	bne.n	8001ef2 <u8g2_font_decode_glyph+0x18e>
	return d;
 8001eec:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001ef0:	e03a      	b.n	8001f68 <u8g2_font_decode_glyph+0x204>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	719a      	strb	r2, [r3, #6]
    decode->y = 0;
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	2200      	movs	r2, #0
 8001efc:	71da      	strb	r2, [r3, #7]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8001f04:	4619      	mov	r1, r3
 8001f06:	6938      	ldr	r0, [r7, #16]
 8001f08:	f7ff fda1 	bl	8001a4e <u8g2_font_decode_get_unsigned_bits>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	72fb      	strb	r3, [r7, #11]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8001f16:	4619      	mov	r1, r3
 8001f18:	6938      	ldr	r0, [r7, #16]
 8001f1a:	f7ff fd98 	bl	8001a4e <u8g2_font_decode_get_unsigned_bits>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	72bb      	strb	r3, [r7, #10]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8001f22:	7afb      	ldrb	r3, [r7, #11]
 8001f24:	2200      	movs	r2, #0
 8001f26:	4619      	mov	r1, r3
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f7ff fe5d 	bl	8001be8 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8001f2e:	7abb      	ldrb	r3, [r7, #10]
 8001f30:	2201      	movs	r2, #1
 8001f32:	4619      	mov	r1, r3
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f7ff fe57 	bl	8001be8 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8001f3a:	2101      	movs	r1, #1
 8001f3c:	6938      	ldr	r0, [r7, #16]
 8001f3e:	f7ff fd86 	bl	8001a4e <u8g2_font_decode_get_unsigned_bits>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d1ec      	bne.n	8001f22 <u8g2_font_decode_glyph+0x1be>

      if ( decode->y >= h )
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8001f4e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	dd00      	ble.n	8001f58 <u8g2_font_decode_glyph+0x1f4>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8001f56:	e7d2      	b.n	8001efe <u8g2_font_decode_glyph+0x19a>
	break;
 8001f58:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	7b1a      	ldrb	r2, [r3, #12]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
  }
  return d;
 8001f64:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3718      	adds	r7, #24
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	460b      	mov	r3, r1
 8001f7a:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f80:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	3317      	adds	r3, #23
 8001f86:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8001f88:	887b      	ldrh	r3, [r7, #2]
 8001f8a:	2bff      	cmp	r3, #255	; 0xff
 8001f8c:	d82a      	bhi.n	8001fe4 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8001f8e:	887b      	ldrh	r3, [r7, #2]
 8001f90:	2b60      	cmp	r3, #96	; 0x60
 8001f92:	d907      	bls.n	8001fa4 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	617b      	str	r3, [r7, #20]
 8001fa2:	e009      	b.n	8001fb8 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8001fa4:	887b      	ldrh	r3, [r7, #2]
 8001fa6:	2b40      	cmp	r3, #64	; 0x40
 8001fa8:	d906      	bls.n	8001fb8 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d04e      	beq.n	8002060 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	887a      	ldrh	r2, [r7, #2]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d102      	bne.n	8001fd4 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	3302      	adds	r3, #2
 8001fd2:	e049      	b.n	8002068 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	461a      	mov	r2, r3
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	4413      	add	r3, r2
 8001fe0:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001fe2:	e7e9      	b.n	8001fb8 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8001fea:	461a      	mov	r2, r3
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	4413      	add	r3, r2
 8001ff0:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	6938      	ldr	r0, [r7, #16]
 8001ffa:	f7ff fc60 	bl	80018be <u8g2_font_get_word>
 8001ffe:	4603      	mov	r3, r0
 8002000:	461a      	mov	r2, r3
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	4413      	add	r3, r2
 8002006:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8002008:	2102      	movs	r1, #2
 800200a:	6938      	ldr	r0, [r7, #16]
 800200c:	f7ff fc57 	bl	80018be <u8g2_font_get_word>
 8002010:	4603      	mov	r3, r0
 8002012:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	3304      	adds	r3, #4
 8002018:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 800201a:	89fa      	ldrh	r2, [r7, #14]
 800201c:	887b      	ldrh	r3, [r7, #2]
 800201e:	429a      	cmp	r2, r3
 8002020:	d3e9      	bcc.n	8001ff6 <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8002028:	89fb      	ldrh	r3, [r7, #14]
 800202a:	021b      	lsls	r3, r3, #8
 800202c:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	3301      	adds	r3, #1
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	b29a      	uxth	r2, r3
 8002036:	89fb      	ldrh	r3, [r7, #14]
 8002038:	4313      	orrs	r3, r2
 800203a:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 800203c:	89fb      	ldrh	r3, [r7, #14]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d010      	beq.n	8002064 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8002042:	89fa      	ldrh	r2, [r7, #14]
 8002044:	887b      	ldrh	r3, [r7, #2]
 8002046:	429a      	cmp	r2, r3
 8002048:	d102      	bne.n	8002050 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	3303      	adds	r3, #3
 800204e:	e00b      	b.n	8002068 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	3302      	adds	r3, #2
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	461a      	mov	r2, r3
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	4413      	add	r3, r2
 800205c:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 800205e:	e7e0      	b.n	8002022 <u8g2_font_get_glyph_data+0xb2>
	break;
 8002060:	bf00      	nop
 8002062:	e000      	b.n	8002066 <u8g2_font_get_glyph_data+0xf6>
	break;
 8002064:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8002066:	2300      	movs	r3, #0
}
 8002068:	4618      	mov	r0, r3
 800206a:	3718      	adds	r7, #24
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	4608      	mov	r0, r1
 800207a:	4611      	mov	r1, r2
 800207c:	461a      	mov	r2, r3
 800207e:	4603      	mov	r3, r0
 8002080:	70fb      	strb	r3, [r7, #3]
 8002082:	460b      	mov	r3, r1
 8002084:	70bb      	strb	r3, [r7, #2]
 8002086:	4613      	mov	r3, r2
 8002088:	803b      	strh	r3, [r7, #0]
  u8g2_uint_t dx = 0;
 800208a:	2300      	movs	r3, #0
 800208c:	73fb      	strb	r3, [r7, #15]
  u8g2->font_decode.target_x = x;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	78fa      	ldrb	r2, [r7, #3]
 8002092:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  u8g2->font_decode.target_y = y;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	78ba      	ldrb	r2, [r7, #2]
 800209a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 800209e:	883b      	ldrh	r3, [r7, #0]
 80020a0:	4619      	mov	r1, r3
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f7ff ff64 	bl	8001f70 <u8g2_font_get_glyph_data>
 80020a8:	60b8      	str	r0, [r7, #8]
  if ( glyph_data != NULL )
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d005      	beq.n	80020bc <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 80020b0:	68b9      	ldr	r1, [r7, #8]
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f7ff fe56 	bl	8001d64 <u8g2_font_decode_glyph>
 80020b8:	4603      	mov	r3, r0
 80020ba:	73fb      	strb	r3, [r7, #15]
  }
  return dx;
 80020bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
	...

080020c8 <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	4608      	mov	r0, r1
 80020d2:	4611      	mov	r1, r2
 80020d4:	461a      	mov	r2, r3
 80020d6:	4603      	mov	r3, r0
 80020d8:	70fb      	strb	r3, [r7, #3]
 80020da:	460b      	mov	r3, r1
 80020dc:	70bb      	strb	r3, [r7, #2]
 80020de:	4613      	mov	r3, r2
 80020e0:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 80020e8:	2b03      	cmp	r3, #3
 80020ea:	d833      	bhi.n	8002154 <u8g2_DrawGlyph+0x8c>
 80020ec:	a201      	add	r2, pc, #4	; (adr r2, 80020f4 <u8g2_DrawGlyph+0x2c>)
 80020ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020f2:	bf00      	nop
 80020f4:	08002105 	.word	0x08002105
 80020f8:	08002119 	.word	0x08002119
 80020fc:	0800212d 	.word	0x0800212d
 8002100:	08002141 	.word	0x08002141
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	4798      	blx	r3
 800210c:	4603      	mov	r3, r0
 800210e:	461a      	mov	r2, r3
 8002110:	78bb      	ldrb	r3, [r7, #2]
 8002112:	4413      	add	r3, r2
 8002114:	70bb      	strb	r3, [r7, #2]
      break;
 8002116:	e01d      	b.n	8002154 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	4798      	blx	r3
 8002120:	4603      	mov	r3, r0
 8002122:	461a      	mov	r2, r3
 8002124:	78fb      	ldrb	r3, [r7, #3]
 8002126:	1a9b      	subs	r3, r3, r2
 8002128:	70fb      	strb	r3, [r7, #3]
      break;
 800212a:	e013      	b.n	8002154 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	4798      	blx	r3
 8002134:	4603      	mov	r3, r0
 8002136:	461a      	mov	r2, r3
 8002138:	78bb      	ldrb	r3, [r7, #2]
 800213a:	1a9b      	subs	r3, r3, r2
 800213c:	70bb      	strb	r3, [r7, #2]
      break;
 800213e:	e009      	b.n	8002154 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	4798      	blx	r3
 8002148:	4603      	mov	r3, r0
 800214a:	461a      	mov	r2, r3
 800214c:	78fb      	ldrb	r3, [r7, #3]
 800214e:	4413      	add	r3, r2
 8002150:	70fb      	strb	r3, [r7, #3]
      break;
 8002152:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8002154:	883b      	ldrh	r3, [r7, #0]
 8002156:	78ba      	ldrb	r2, [r7, #2]
 8002158:	78f9      	ldrb	r1, [r7, #3]
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f7ff ff88 	bl	8002070 <u8g2_font_draw_glyph>
 8002160:	4603      	mov	r3, r0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop

0800216c <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b086      	sub	sp, #24
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	607b      	str	r3, [r7, #4]
 8002176:	460b      	mov	r3, r1
 8002178:	72fb      	strb	r3, [r7, #11]
 800217a:	4613      	mov	r3, r2
 800217c:	72bb      	strb	r3, [r7, #10]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 800217e:	68f8      	ldr	r0, [r7, #12]
 8002180:	f000 fca9 	bl	8002ad6 <u8x8_utf8_init>
  sum = 0;
 8002184:	2300      	movs	r3, #0
 8002186:	75fb      	strb	r3, [r7, #23]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	7812      	ldrb	r2, [r2, #0]
 8002190:	4611      	mov	r1, r2
 8002192:	68f8      	ldr	r0, [r7, #12]
 8002194:	4798      	blx	r3
 8002196:	4603      	mov	r3, r0
 8002198:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 800219a:	8abb      	ldrh	r3, [r7, #20]
 800219c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d038      	beq.n	8002216 <u8g2_draw_string+0xaa>
      break;
    str++;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	3301      	adds	r3, #1
 80021a8:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 80021aa:	8abb      	ldrh	r3, [r7, #20]
 80021ac:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d0e9      	beq.n	8002188 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 80021b4:	8abb      	ldrh	r3, [r7, #20]
 80021b6:	7aba      	ldrb	r2, [r7, #10]
 80021b8:	7af9      	ldrb	r1, [r7, #11]
 80021ba:	68f8      	ldr	r0, [r7, #12]
 80021bc:	f7ff ff84 	bl	80020c8 <u8g2_DrawGlyph>
 80021c0:	4603      	mov	r3, r0
 80021c2:	74fb      	strb	r3, [r7, #19]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 80021ca:	2b03      	cmp	r3, #3
 80021cc:	d81e      	bhi.n	800220c <u8g2_draw_string+0xa0>
 80021ce:	a201      	add	r2, pc, #4	; (adr r2, 80021d4 <u8g2_draw_string+0x68>)
 80021d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021d4:	080021e5 	.word	0x080021e5
 80021d8:	080021ef 	.word	0x080021ef
 80021dc:	080021f9 	.word	0x080021f9
 80021e0:	08002203 	.word	0x08002203
      {
	case 0:
	  x += delta;
 80021e4:	7afa      	ldrb	r2, [r7, #11]
 80021e6:	7cfb      	ldrb	r3, [r7, #19]
 80021e8:	4413      	add	r3, r2
 80021ea:	72fb      	strb	r3, [r7, #11]
	  break;
 80021ec:	e00e      	b.n	800220c <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 80021ee:	7aba      	ldrb	r2, [r7, #10]
 80021f0:	7cfb      	ldrb	r3, [r7, #19]
 80021f2:	4413      	add	r3, r2
 80021f4:	72bb      	strb	r3, [r7, #10]
	  break;
 80021f6:	e009      	b.n	800220c <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 80021f8:	7afa      	ldrb	r2, [r7, #11]
 80021fa:	7cfb      	ldrb	r3, [r7, #19]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	72fb      	strb	r3, [r7, #11]
	  break;
 8002200:	e004      	b.n	800220c <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8002202:	7aba      	ldrb	r2, [r7, #10]
 8002204:	7cfb      	ldrb	r3, [r7, #19]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	72bb      	strb	r3, [r7, #10]
	  break;
 800220a:	bf00      	nop
      }
#else
      x += delta;
#endif

      sum += delta;    
 800220c:	7dfa      	ldrb	r2, [r7, #23]
 800220e:	7cfb      	ldrb	r3, [r7, #19]
 8002210:	4413      	add	r3, r2
 8002212:	75fb      	strb	r3, [r7, #23]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8002214:	e7b8      	b.n	8002188 <u8g2_draw_string+0x1c>
      break;
 8002216:	bf00      	nop
    }
  }
  return sum;
 8002218:	7dfb      	ldrb	r3, [r7, #23]
}
 800221a:	4618      	mov	r0, r3
 800221c:	3718      	adds	r7, #24
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop

08002224 <u8g2_DrawUTF8>:
21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx  
*/
u8g2_uint_t u8g2_DrawUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	607b      	str	r3, [r7, #4]
 800222e:	460b      	mov	r3, r1
 8002230:	72fb      	strb	r3, [r7, #11]
 8002232:	4613      	mov	r3, r2
 8002234:	72bb      	strb	r3, [r7, #10]
  u8g2->u8x8.next_cb = u8x8_utf8_next;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	4a06      	ldr	r2, [pc, #24]	; (8002254 <u8g2_DrawUTF8+0x30>)
 800223a:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 800223c:	7aba      	ldrb	r2, [r7, #10]
 800223e:	7af9      	ldrb	r1, [r7, #11]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	68f8      	ldr	r0, [r7, #12]
 8002244:	f7ff ff92 	bl	800216c <u8g2_draw_string>
 8002248:	4603      	mov	r3, r0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	08002af1 	.word	0x08002af1

08002258 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002264:	2b00      	cmp	r3, #0
 8002266:	d05d      	beq.n	8002324 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f993 2075 	ldrsb.w	r2, [r3, #117]	; 0x75
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f993 2076 	ldrsb.w	r2, [r3, #118]	; 0x76
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8002286:	2b00      	cmp	r3, #0
 8002288:	d04d      	beq.n	8002326 <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8002290:	2b01      	cmp	r3, #1
 8002292:	d11c      	bne.n	80022ce <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f993 3077 	ldrsb.w	r3, [r3, #119]	; 0x77
 80022a0:	429a      	cmp	r2, r3
 80022a2:	da05      	bge.n	80022b0 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f993 2077 	ldrsb.w	r2, [r3, #119]	; 0x77
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f993 3078 	ldrsb.w	r3, [r3, #120]	; 0x78
 80022bc:	429a      	cmp	r2, r3
 80022be:	dd32      	ble.n	8002326 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f993 2078 	ldrsb.w	r2, [r3, #120]	; 0x78
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 80022cc:	e02b      	b.n	8002326 <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f993 3082 	ldrsb.w	r3, [r3, #130]	; 0x82
 80022d4:	461a      	mov	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f993 3072 	ldrsb.w	r3, [r3, #114]	; 0x72
 80022dc:	4619      	mov	r1, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 80022e4:	440b      	add	r3, r1
 80022e6:	429a      	cmp	r2, r3
 80022e8:	da0d      	bge.n	8002306 <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f993 3072 	ldrsb.w	r3, [r3, #114]	; 0x72
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	4413      	add	r3, r2
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	b25a      	sxtb	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 8002312:	429a      	cmp	r2, r3
 8002314:	dd07      	ble.n	8002326 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f993 2074 	ldrsb.w	r2, [r3, #116]	; 0x74
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 8002322:	e000      	b.n	8002326 <u8g2_UpdateRefHeight+0xce>
    return;
 8002324:	bf00      	nop
  }  
}
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	bc80      	pop	{r7}
 800232c:	4770      	bx	lr

0800232e <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 800232e:	b480      	push	{r7}
 8002330:	b083      	sub	sp, #12
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
  return 0;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	bc80      	pop	{r7}
 8002340:	4770      	bx	lr
	...

08002344 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4a03      	ldr	r2, [pc, #12]	; (800235c <u8g2_SetFontPosBaseline+0x18>)
 8002350:	655a      	str	r2, [r3, #84]	; 0x54
}
 8002352:	bf00      	nop
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	bc80      	pop	{r7}
 800235a:	4770      	bx	lr
 800235c:	0800232f 	.word	0x0800232f

08002360 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800236e:	683a      	ldr	r2, [r7, #0]
 8002370:	429a      	cmp	r2, r3
 8002372:	d00b      	beq.n	800238c <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	683a      	ldr	r2, [r7, #0]
 8002378:	651a      	str	r2, [r3, #80]	; 0x50
    u8g2_read_font_info(&(u8g2->font_info), font);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	3368      	adds	r3, #104	; 0x68
 800237e:	6839      	ldr	r1, [r7, #0]
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff fabb 	bl	80018fc <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f7ff ff66 	bl	8002258 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 800238c:	bf00      	nop
 800238e:	3708      	adds	r7, #8
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <u8g2_SetFontDirection>:
}



void u8g2_SetFontDirection(u8g2_t *u8g2, uint8_t dir)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	460b      	mov	r3, r1
 800239e:	70fb      	strb	r3, [r7, #3]
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = dir;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	78fa      	ldrb	r2, [r7, #3]
 80023a4:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
#endif
}
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bc80      	pop	{r7}
 80023b0:	4770      	bx	lr

080023b2 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 80023b2:	b480      	push	{r7}
 80023b4:	b087      	sub	sp, #28
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	60f8      	str	r0, [r7, #12]
 80023ba:	60b9      	str	r1, [r7, #8]
 80023bc:	4611      	mov	r1, r2
 80023be:	461a      	mov	r2, r3
 80023c0:	460b      	mov	r3, r1
 80023c2:	71fb      	strb	r3, [r7, #7]
 80023c4:	4613      	mov	r3, r2
 80023c6:	71bb      	strb	r3, [r7, #6]
  u8g2_uint_t a = *ap;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	75fb      	strb	r3, [r7, #23]
  u8g2_uint_t b;
  b  = a;
 80023ce:	7dfb      	ldrb	r3, [r7, #23]
 80023d0:	75bb      	strb	r3, [r7, #22]
  b += *len;
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	781a      	ldrb	r2, [r3, #0]
 80023d6:	7dbb      	ldrb	r3, [r7, #22]
 80023d8:	4413      	add	r3, r2
 80023da:	75bb      	strb	r3, [r7, #22]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 80023dc:	7dfa      	ldrb	r2, [r7, #23]
 80023de:	7dbb      	ldrb	r3, [r7, #22]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d90b      	bls.n	80023fc <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 80023e4:	7dfa      	ldrb	r2, [r7, #23]
 80023e6:	79bb      	ldrb	r3, [r7, #6]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d205      	bcs.n	80023f8 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 80023ec:	79bb      	ldrb	r3, [r7, #6]
 80023ee:	75bb      	strb	r3, [r7, #22]
      b--;
 80023f0:	7dbb      	ldrb	r3, [r7, #22]
 80023f2:	3b01      	subs	r3, #1
 80023f4:	75bb      	strb	r3, [r7, #22]
 80023f6:	e001      	b.n	80023fc <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 80023f8:	79fb      	ldrb	r3, [r7, #7]
 80023fa:	75fb      	strb	r3, [r7, #23]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 80023fc:	7dfa      	ldrb	r2, [r7, #23]
 80023fe:	79bb      	ldrb	r3, [r7, #6]
 8002400:	429a      	cmp	r2, r3
 8002402:	d301      	bcc.n	8002408 <u8g2_clip_intersection2+0x56>
    return 0;
 8002404:	2300      	movs	r3, #0
 8002406:	e01c      	b.n	8002442 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8002408:	7dba      	ldrb	r2, [r7, #22]
 800240a:	79fb      	ldrb	r3, [r7, #7]
 800240c:	429a      	cmp	r2, r3
 800240e:	d801      	bhi.n	8002414 <u8g2_clip_intersection2+0x62>
    return 0;
 8002410:	2300      	movs	r3, #0
 8002412:	e016      	b.n	8002442 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8002414:	7dfa      	ldrb	r2, [r7, #23]
 8002416:	79fb      	ldrb	r3, [r7, #7]
 8002418:	429a      	cmp	r2, r3
 800241a:	d201      	bcs.n	8002420 <u8g2_clip_intersection2+0x6e>
    a = c;
 800241c:	79fb      	ldrb	r3, [r7, #7]
 800241e:	75fb      	strb	r3, [r7, #23]
  if ( b > d )
 8002420:	7dba      	ldrb	r2, [r7, #22]
 8002422:	79bb      	ldrb	r3, [r7, #6]
 8002424:	429a      	cmp	r2, r3
 8002426:	d901      	bls.n	800242c <u8g2_clip_intersection2+0x7a>
    b = d;
 8002428:	79bb      	ldrb	r3, [r7, #6]
 800242a:	75bb      	strb	r3, [r7, #22]
  
  *ap = a;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	7dfa      	ldrb	r2, [r7, #23]
 8002430:	701a      	strb	r2, [r3, #0]
  b -= a;
 8002432:	7dba      	ldrb	r2, [r7, #22]
 8002434:	7dfb      	ldrb	r3, [r7, #23]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	75bb      	strb	r3, [r7, #22]
  *len = b;
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	7dba      	ldrb	r2, [r7, #22]
 800243e:	701a      	strb	r2, [r3, #0]
  return 1;
 8002440:	2301      	movs	r3, #1
}
 8002442:	4618      	mov	r0, r3
 8002444:	371c      	adds	r7, #28
 8002446:	46bd      	mov	sp, r7
 8002448:	bc80      	pop	{r7}
 800244a:	4770      	bx	lr

0800244c <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800244c:	b590      	push	{r4, r7, lr}
 800244e:	b085      	sub	sp, #20
 8002450:	af02      	add	r7, sp, #8
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	4608      	mov	r0, r1
 8002456:	4611      	mov	r1, r2
 8002458:	461a      	mov	r2, r3
 800245a:	4603      	mov	r3, r0
 800245c:	70fb      	strb	r3, [r7, #3]
 800245e:	460b      	mov	r3, r1
 8002460:	70bb      	strb	r3, [r7, #2]
 8002462:	4613      	mov	r3, r2
 8002464:	707b      	strb	r3, [r7, #1]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800246c:	78ba      	ldrb	r2, [r7, #2]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	70bb      	strb	r3, [r7, #2]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8002476:	7878      	ldrb	r0, [r7, #1]
 8002478:	78ba      	ldrb	r2, [r7, #2]
 800247a:	78f9      	ldrb	r1, [r7, #3]
 800247c:	7e3b      	ldrb	r3, [r7, #24]
 800247e:	9300      	str	r3, [sp, #0]
 8002480:	4603      	mov	r3, r0
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	47a0      	blx	r4
}
 8002486:	bf00      	nop
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	bd90      	pop	{r4, r7, pc}

0800248e <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800248e:	b590      	push	{r4, r7, lr}
 8002490:	b085      	sub	sp, #20
 8002492:	af02      	add	r7, sp, #8
 8002494:	6078      	str	r0, [r7, #4]
 8002496:	4608      	mov	r0, r1
 8002498:	4611      	mov	r1, r2
 800249a:	461a      	mov	r2, r3
 800249c:	4603      	mov	r3, r0
 800249e:	70fb      	strb	r3, [r7, #3]
 80024a0:	460b      	mov	r3, r1
 80024a2:	70bb      	strb	r3, [r7, #2]
 80024a4:	4613      	mov	r3, r2
 80024a6:	707b      	strb	r3, [r7, #1]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d06d      	beq.n	800258e <u8g2_DrawHVLine+0x100>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 80024b2:	787b      	ldrb	r3, [r7, #1]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d06a      	beq.n	800258e <u8g2_DrawHVLine+0x100>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 80024b8:	787b      	ldrb	r3, [r7, #1]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d918      	bls.n	80024f0 <u8g2_DrawHVLine+0x62>
      {
	if ( dir == 2 )
 80024be:	7e3b      	ldrb	r3, [r7, #24]
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d109      	bne.n	80024d8 <u8g2_DrawHVLine+0x4a>
	{
	  x -= len;
 80024c4:	78fa      	ldrb	r2, [r7, #3]
 80024c6:	787b      	ldrb	r3, [r7, #1]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	70fb      	strb	r3, [r7, #3]
	  x++;
 80024ce:	78fb      	ldrb	r3, [r7, #3]
 80024d0:	3301      	adds	r3, #1
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	70fb      	strb	r3, [r7, #3]
 80024d6:	e00b      	b.n	80024f0 <u8g2_DrawHVLine+0x62>
	}
	else if ( dir == 3 )
 80024d8:	7e3b      	ldrb	r3, [r7, #24]
 80024da:	2b03      	cmp	r3, #3
 80024dc:	d108      	bne.n	80024f0 <u8g2_DrawHVLine+0x62>
	{
	  y -= len;
 80024de:	78ba      	ldrb	r2, [r7, #2]
 80024e0:	787b      	ldrb	r3, [r7, #1]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	70bb      	strb	r3, [r7, #2]
	  y++;
 80024e8:	78bb      	ldrb	r3, [r7, #2]
 80024ea:	3301      	adds	r3, #1
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	70bb      	strb	r3, [r7, #2]
	}
      }
      dir &= 1;  
 80024f0:	7e3b      	ldrb	r3, [r7, #24]
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	763b      	strb	r3, [r7, #24]
      
      /* clip against the user window */
      if ( dir == 0 )
 80024f8:	7e3b      	ldrb	r3, [r7, #24]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d119      	bne.n	8002532 <u8g2_DrawHVLine+0xa4>
      {
	if ( y < u8g2->user_y0 )
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8002504:	78bb      	ldrb	r3, [r7, #2]
 8002506:	429a      	cmp	r2, r3
 8002508:	d838      	bhi.n	800257c <u8g2_DrawHVLine+0xee>
	  return;
	if ( y >= u8g2->user_y1 )
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8002510:	78bb      	ldrb	r3, [r7, #2]
 8002512:	429a      	cmp	r2, r3
 8002514:	d934      	bls.n	8002580 <u8g2_DrawHVLine+0xf2>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002522:	1c79      	adds	r1, r7, #1
 8002524:	1cf8      	adds	r0, r7, #3
 8002526:	f7ff ff44 	bl	80023b2 <u8g2_clip_intersection2>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d119      	bne.n	8002564 <u8g2_DrawHVLine+0xd6>
	  return;
 8002530:	e02d      	b.n	800258e <u8g2_DrawHVLine+0x100>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8002538:	78fb      	ldrb	r3, [r7, #3]
 800253a:	429a      	cmp	r2, r3
 800253c:	d822      	bhi.n	8002584 <u8g2_DrawHVLine+0xf6>
	  return;
	if ( x >= u8g2->user_x1 )
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8002544:	78fb      	ldrb	r3, [r7, #3]
 8002546:	429a      	cmp	r2, r3
 8002548:	d91e      	bls.n	8002588 <u8g2_DrawHVLine+0xfa>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002556:	1c79      	adds	r1, r7, #1
 8002558:	1cb8      	adds	r0, r7, #2
 800255a:	f7ff ff2a 	bl	80023b2 <u8g2_clip_intersection2>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d013      	beq.n	800258c <u8g2_DrawHVLine+0xfe>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002568:	689c      	ldr	r4, [r3, #8]
 800256a:	78f9      	ldrb	r1, [r7, #3]
 800256c:	78ba      	ldrb	r2, [r7, #2]
 800256e:	7878      	ldrb	r0, [r7, #1]
 8002570:	7e3b      	ldrb	r3, [r7, #24]
 8002572:	9300      	str	r3, [sp, #0]
 8002574:	4603      	mov	r3, r0
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	47a0      	blx	r4
 800257a:	e008      	b.n	800258e <u8g2_DrawHVLine+0x100>
	  return;
 800257c:	bf00      	nop
 800257e:	e006      	b.n	800258e <u8g2_DrawHVLine+0x100>
	  return;
 8002580:	bf00      	nop
 8002582:	e004      	b.n	800258e <u8g2_DrawHVLine+0x100>
	  return;
 8002584:	bf00      	nop
 8002586:	e002      	b.n	800258e <u8g2_DrawHVLine+0x100>
	  return;
 8002588:	bf00      	nop
 800258a:	e000      	b.n	800258e <u8g2_DrawHVLine+0x100>
	  return;
 800258c:	bf00      	nop
    }
}
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	bd90      	pop	{r4, r7, pc}

08002594 <u8g2_DrawHLine>:

void u8g2_DrawHLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af02      	add	r7, sp, #8
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	4608      	mov	r0, r1
 800259e:	4611      	mov	r1, r2
 80025a0:	461a      	mov	r2, r3
 80025a2:	4603      	mov	r3, r0
 80025a4:	70fb      	strb	r3, [r7, #3]
 80025a6:	460b      	mov	r3, r1
 80025a8:	70bb      	strb	r3, [r7, #2]
 80025aa:	4613      	mov	r3, r2
 80025ac:	707b      	strb	r3, [r7, #1]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 0);
 80025ae:	7878      	ldrb	r0, [r7, #1]
 80025b0:	78ba      	ldrb	r2, [r7, #2]
 80025b2:	78f9      	ldrb	r1, [r7, #3]
 80025b4:	2300      	movs	r3, #0
 80025b6:	9300      	str	r3, [sp, #0]
 80025b8:	4603      	mov	r3, r0
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f7ff ff67 	bl	800248e <u8g2_DrawHVLine>
}
 80025c0:	bf00      	nop
 80025c2:	3708      	adds	r7, #8
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <u8g2_DrawVLine>:

void u8g2_DrawVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af02      	add	r7, sp, #8
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	4608      	mov	r0, r1
 80025d2:	4611      	mov	r1, r2
 80025d4:	461a      	mov	r2, r3
 80025d6:	4603      	mov	r3, r0
 80025d8:	70fb      	strb	r3, [r7, #3]
 80025da:	460b      	mov	r3, r1
 80025dc:	70bb      	strb	r3, [r7, #2]
 80025de:	4613      	mov	r3, r2
 80025e0:	707b      	strb	r3, [r7, #1]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+1, y+len) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
 80025e2:	7878      	ldrb	r0, [r7, #1]
 80025e4:	78ba      	ldrb	r2, [r7, #2]
 80025e6:	78f9      	ldrb	r1, [r7, #3]
 80025e8:	2301      	movs	r3, #1
 80025ea:	9300      	str	r3, [sp, #0]
 80025ec:	4603      	mov	r3, r0
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f7ff ff4d 	bl	800248e <u8g2_DrawHVLine>
}
 80025f4:	bf00      	nop
 80025f6:	3708      	adds	r7, #8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	460b      	mov	r3, r1
 8002606:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	78fa      	ldrb	r2, [r7, #3]
 800260c:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
  if ( color >= 3 )
 8002610:	78fb      	ldrb	r3, [r7, #3]
 8002612:	2b02      	cmp	r3, #2
 8002614:	d903      	bls.n	800261e <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2201      	movs	r2, #1
 800261a:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	bc80      	pop	{r7}
 8002626:	4770      	bx	lr

08002628 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8002628:	b490      	push	{r4, r7}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	4604      	mov	r4, r0
 8002630:	4608      	mov	r0, r1
 8002632:	4611      	mov	r1, r2
 8002634:	461a      	mov	r2, r3
 8002636:	4623      	mov	r3, r4
 8002638:	71fb      	strb	r3, [r7, #7]
 800263a:	4603      	mov	r3, r0
 800263c:	71bb      	strb	r3, [r7, #6]
 800263e:	460b      	mov	r3, r1
 8002640:	717b      	strb	r3, [r7, #5]
 8002642:	4613      	mov	r3, r2
 8002644:	713b      	strb	r3, [r7, #4]
  if ( v0 < a1 )		// v0 <= a1
 8002646:	797a      	ldrb	r2, [r7, #5]
 8002648:	79bb      	ldrb	r3, [r7, #6]
 800264a:	429a      	cmp	r2, r3
 800264c:	d20d      	bcs.n	800266a <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 800264e:	793a      	ldrb	r2, [r7, #4]
 8002650:	79fb      	ldrb	r3, [r7, #7]
 8002652:	429a      	cmp	r2, r3
 8002654:	d901      	bls.n	800265a <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8002656:	2301      	movs	r3, #1
 8002658:	e014      	b.n	8002684 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 800265a:	797a      	ldrb	r2, [r7, #5]
 800265c:	793b      	ldrb	r3, [r7, #4]
 800265e:	429a      	cmp	r2, r3
 8002660:	d901      	bls.n	8002666 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8002662:	2301      	movs	r3, #1
 8002664:	e00e      	b.n	8002684 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8002666:	2300      	movs	r3, #0
 8002668:	e00c      	b.n	8002684 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 800266a:	793a      	ldrb	r2, [r7, #4]
 800266c:	79fb      	ldrb	r3, [r7, #7]
 800266e:	429a      	cmp	r2, r3
 8002670:	d907      	bls.n	8002682 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8002672:	797a      	ldrb	r2, [r7, #5]
 8002674:	793b      	ldrb	r3, [r7, #4]
 8002676:	429a      	cmp	r2, r3
 8002678:	d901      	bls.n	800267e <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 800267a:	2301      	movs	r3, #1
 800267c:	e002      	b.n	8002684 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 800267e:	2300      	movs	r3, #0
 8002680:	e000      	b.n	8002684 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8002682:	2300      	movs	r3, #0
    }
  }
}
 8002684:	4618      	mov	r0, r3
 8002686:	3708      	adds	r7, #8
 8002688:	46bd      	mov	sp, r7
 800268a:	bc90      	pop	{r4, r7}
 800268c:	4770      	bx	lr

0800268e <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b082      	sub	sp, #8
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
 8002696:	4608      	mov	r0, r1
 8002698:	4611      	mov	r1, r2
 800269a:	461a      	mov	r2, r3
 800269c:	4603      	mov	r3, r0
 800269e:	70fb      	strb	r3, [r7, #3]
 80026a0:	460b      	mov	r3, r1
 80026a2:	70bb      	strb	r3, [r7, #2]
 80026a4:	4613      	mov	r3, r2
 80026a6:	707b      	strb	r3, [r7, #1]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f893 0047 	ldrb.w	r0, [r3, #71]	; 0x47
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
 80026b4:	7c3b      	ldrb	r3, [r7, #16]
 80026b6:	78ba      	ldrb	r2, [r7, #2]
 80026b8:	f7ff ffb6 	bl	8002628 <u8g2_is_intersection_decision_tree>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <u8g2_IsIntersection+0x38>
    return 0; 
 80026c2:	2300      	movs	r3, #0
 80026c4:	e00a      	b.n	80026dc <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f893 0045 	ldrb.w	r0, [r3, #69]	; 0x45
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
 80026d2:	787b      	ldrb	r3, [r7, #1]
 80026d4:	78fa      	ldrb	r2, [r7, #3]
 80026d6:	f7ff ffa7 	bl	8002628 <u8g2_is_intersection_decision_tree>
 80026da:	4603      	mov	r3, r0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3708      	adds	r7, #8
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <u8g2_ll_hvline_horizontal_right_lsb>:
    all clipping done
*/

/* SH1122, LD7032, ST7920, ST7986, LC7981, T6963, SED1330, RA8835, MAX7219, LS0 */ 
void u8g2_ll_hvline_horizontal_right_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b087      	sub	sp, #28
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	4608      	mov	r0, r1
 80026ee:	4611      	mov	r1, r2
 80026f0:	461a      	mov	r2, r3
 80026f2:	4603      	mov	r3, r0
 80026f4:	70fb      	strb	r3, [r7, #3]
 80026f6:	460b      	mov	r3, r1
 80026f8:	70bb      	strb	r3, [r7, #2]
 80026fa:	4613      	mov	r3, r2
 80026fc:	707b      	strb	r3, [r7, #1]
  uint16_t offset;
  uint8_t *ptr;
  uint8_t bit_pos;
  uint8_t mask;
  uint8_t tile_width = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	7c1b      	ldrb	r3, [r3, #16]
 8002704:	74bb      	strb	r3, [r7, #18]

  bit_pos = x;		/* overflow truncate is ok here... */
 8002706:	78fb      	ldrb	r3, [r7, #3]
 8002708:	747b      	strb	r3, [r7, #17]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 800270a:	7c7b      	ldrb	r3, [r7, #17]
 800270c:	f003 0307 	and.w	r3, r3, #7
 8002710:	747b      	strb	r3, [r7, #17]
  mask = 128;
 8002712:	2380      	movs	r3, #128	; 0x80
 8002714:	74fb      	strb	r3, [r7, #19]
  mask >>= bit_pos;
 8002716:	7cfa      	ldrb	r2, [r7, #19]
 8002718:	7c7b      	ldrb	r3, [r7, #17]
 800271a:	fa42 f303 	asr.w	r3, r2, r3
 800271e:	74fb      	strb	r3, [r7, #19]

  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8002720:	78bb      	ldrb	r3, [r7, #2]
 8002722:	81fb      	strh	r3, [r7, #14]
  offset *= tile_width;
 8002724:	7cbb      	ldrb	r3, [r7, #18]
 8002726:	b29b      	uxth	r3, r3
 8002728:	89fa      	ldrh	r2, [r7, #14]
 800272a:	fb02 f303 	mul.w	r3, r2, r3
 800272e:	81fb      	strh	r3, [r7, #14]
  offset += x>>3;
 8002730:	78fb      	ldrb	r3, [r7, #3]
 8002732:	08db      	lsrs	r3, r3, #3
 8002734:	b2db      	uxtb	r3, r3
 8002736:	b29a      	uxth	r2, r3
 8002738:	89fb      	ldrh	r3, [r7, #14]
 800273a:	4413      	add	r3, r2
 800273c:	81fb      	strh	r3, [r7, #14]
  ptr = u8g2->tile_buf_ptr;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002742:	617b      	str	r3, [r7, #20]
  ptr += offset;
 8002744:	89fb      	ldrh	r3, [r7, #14]
 8002746:	697a      	ldr	r2, [r7, #20]
 8002748:	4413      	add	r3, r2
 800274a:	617b      	str	r3, [r7, #20]
  
  if ( dir == 0 )
 800274c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d129      	bne.n	80027a8 <u8g2_ll_hvline_horizontal_right_lsb+0xc4>
  {
      
    do
    {

      if ( u8g2->draw_color <= 1 )
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 800275a:	2b01      	cmp	r3, #1
 800275c:	d806      	bhi.n	800276c <u8g2_ll_hvline_horizontal_right_lsb+0x88>
	*ptr |= mask;
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	781a      	ldrb	r2, [r3, #0]
 8002762:	7cfb      	ldrb	r3, [r7, #19]
 8002764:	4313      	orrs	r3, r2
 8002766:	b2da      	uxtb	r2, r3
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	701a      	strb	r2, [r3, #0]
      if ( u8g2->draw_color != 1 )
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8002772:	2b01      	cmp	r3, #1
 8002774:	d006      	beq.n	8002784 <u8g2_ll_hvline_horizontal_right_lsb+0xa0>
	*ptr ^= mask;
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	781a      	ldrb	r2, [r3, #0]
 800277a:	7cfb      	ldrb	r3, [r7, #19]
 800277c:	4053      	eors	r3, r2
 800277e:	b2da      	uxtb	r2, r3
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	701a      	strb	r2, [r3, #0]
      
      mask >>= 1;
 8002784:	7cfb      	ldrb	r3, [r7, #19]
 8002786:	085b      	lsrs	r3, r3, #1
 8002788:	74fb      	strb	r3, [r7, #19]
      if ( mask == 0 )
 800278a:	7cfb      	ldrb	r3, [r7, #19]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d104      	bne.n	800279a <u8g2_ll_hvline_horizontal_right_lsb+0xb6>
      {
	mask = 128;
 8002790:	2380      	movs	r3, #128	; 0x80
 8002792:	74fb      	strb	r3, [r7, #19]
        ptr++;
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	3301      	adds	r3, #1
 8002798:	617b      	str	r3, [r7, #20]
      }
      
      //x++;
      len--;
 800279a:	787b      	ldrb	r3, [r7, #1]
 800279c:	3b01      	subs	r3, #1
 800279e:	707b      	strb	r3, [r7, #1]
    } while( len != 0 );
 80027a0:	787b      	ldrb	r3, [r7, #1]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1d6      	bne.n	8002754 <u8g2_ll_hvline_horizontal_right_lsb+0x70>
      ptr += tile_width;
      //y++;
      len--;
    } while( len != 0 );
  }
}
 80027a6:	e021      	b.n	80027ec <u8g2_ll_hvline_horizontal_right_lsb+0x108>
      if ( u8g2->draw_color <= 1 )
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d806      	bhi.n	80027c0 <u8g2_ll_hvline_horizontal_right_lsb+0xdc>
	*ptr |= mask;
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	781a      	ldrb	r2, [r3, #0]
 80027b6:	7cfb      	ldrb	r3, [r7, #19]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	b2da      	uxtb	r2, r3
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	701a      	strb	r2, [r3, #0]
      if ( u8g2->draw_color != 1 )
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d006      	beq.n	80027d8 <u8g2_ll_hvline_horizontal_right_lsb+0xf4>
	*ptr ^= mask;
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	781a      	ldrb	r2, [r3, #0]
 80027ce:	7cfb      	ldrb	r3, [r7, #19]
 80027d0:	4053      	eors	r3, r2
 80027d2:	b2da      	uxtb	r2, r3
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	701a      	strb	r2, [r3, #0]
      ptr += tile_width;
 80027d8:	7cbb      	ldrb	r3, [r7, #18]
 80027da:	697a      	ldr	r2, [r7, #20]
 80027dc:	4413      	add	r3, r2
 80027de:	617b      	str	r3, [r7, #20]
      len--;
 80027e0:	787b      	ldrb	r3, [r7, #1]
 80027e2:	3b01      	subs	r3, #1
 80027e4:	707b      	strb	r3, [r7, #1]
    } while( len != 0 );
 80027e6:	787b      	ldrb	r3, [r7, #1]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d1dd      	bne.n	80027a8 <u8g2_ll_hvline_horizontal_right_lsb+0xc4>
}
 80027ec:	bf00      	nop
 80027ee:	371c      	adds	r7, #28
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bc80      	pop	{r7}
 80027f4:	4770      	bx	lr

080027f6 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b082      	sub	sp, #8
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  u8g2->clip_y0 = 0;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	22ff      	movs	r2, #255	; 0xff
 8002812:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	22ff      	movs	r2, #255	; 0xff
 800281a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  
  u8g2->cb->update_page_win(u8g2);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	4798      	blx	r3
}
 8002828:	bf00      	nop
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	603b      	str	r3, [r7, #0]
 800283c:	4613      	mov	r3, r2
 800283e:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2200      	movs	r2, #0
 8002844:	651a      	str	r2, [r3, #80]	; 0x50
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	683a      	ldr	r2, [r7, #0]
 800284a:	631a      	str	r2, [r3, #48]	; 0x30
  
  u8g2->tile_buf_ptr = buf;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	68ba      	ldr	r2, [r7, #8]
 8002850:	639a      	str	r2, [r3, #56]	; 0x38
  u8g2->tile_buf_height = tile_buf_height;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	79fa      	ldrb	r2, [r7, #7]
 8002856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  u8g2->tile_curr_row = 0;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
  u8g2->bitmap_transparency = 0;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
  
  u8g2->draw_color = 1;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2201      	movs	r2, #1
 8002876:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
  u8g2->is_auto_page_clear = 1;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2201      	movs	r2, #1
 800287e:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
  
  u8g2->cb = u8g2_cb;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->cb->update_dimension(u8g2);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68f8      	ldr	r0, [r7, #12]
 8002890:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f7ff ffaf 	bl	80027f6 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8002898:	68f8      	ldr	r0, [r7, #12]
 800289a:	f7ff fd53 	bl	8002344 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
#endif
}
 80028a6:	bf00      	nop
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 80028ae:	b480      	push	{r7}
 80028b0:	b085      	sub	sp, #20
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028c2:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 80028c4:	7bfb      	ldrb	r3, [r7, #15]
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_height = t;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	7bfa      	ldrb	r2, [r7, #15]
 80028ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  
  t = display_info->tile_width;
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	7c1b      	ldrb	r3, [r3, #16]
 80028d6:	73fb      	strb	r3, [r7, #15]
#ifndef U8G2_16BIT
  if ( t >= 32 )
 80028d8:	7bfb      	ldrb	r3, [r7, #15]
 80028da:	2b1f      	cmp	r3, #31
 80028dc:	d901      	bls.n	80028e2 <u8g2_update_dimension_common+0x34>
    t = 31;
 80028de:	231f      	movs	r3, #31
 80028e0:	73fb      	strb	r3, [r7, #15]
#endif
  t *= 8;
 80028e2:	7bfb      	ldrb	r3, [r7, #15]
 80028e4:	00db      	lsls	r3, r3, #3
 80028e6:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_width = t;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	7bfa      	ldrb	r2, [r7, #15]
 80028ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_curr_row;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028f6:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 80028f8:	7bfb      	ldrb	r3, [r7, #15]
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_curr_row = t;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	7bfa      	ldrb	r2, [r7, #15]
 8002902:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  t = u8g2->tile_buf_height;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800290c:	73fb      	strb	r3, [r7, #15]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 800290e:	7bfb      	ldrb	r3, [r7, #15]
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	f892 203d 	ldrb.w	r2, [r2, #61]	; 0x3d
 8002916:	4413      	add	r3, r2
 8002918:	68ba      	ldr	r2, [r7, #8]
 800291a:	7c52      	ldrb	r2, [r2, #17]
 800291c:	4293      	cmp	r3, r2
 800291e:	dd06      	ble.n	800292e <u8g2_update_dimension_common+0x80>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	7c5a      	ldrb	r2, [r3, #17]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 800292e:	7bfb      	ldrb	r3, [r7, #15]
 8002930:	00db      	lsls	r3, r3, #3
 8002932:	73fb      	strb	r3, [r7, #15]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->buf_y1 = u8g2->buf_y0;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8002952:	7bfb      	ldrb	r3, [r7, #15]
 8002954:	4413      	add	r3, r2
 8002956:	b2da      	uxtb	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#else
  u8g2->width = 240;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	22f0      	movs	r2, #240	; 0xf0
 8002962:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  if ( display_info->pixel_width <= 240 )
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	8a9b      	ldrh	r3, [r3, #20]
 800296a:	2bf0      	cmp	r3, #240	; 0xf0
 800296c:	d805      	bhi.n	800297a <u8g2_update_dimension_common+0xcc>
    u8g2->width = display_info->pixel_width;
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	8a9b      	ldrh	r3, [r3, #20]
 8002972:	b2da      	uxtb	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->height = display_info->pixel_height;
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	8adb      	ldrh	r3, [r3, #22]
 800297e:	b2da      	uxtb	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
#endif

}
 8002986:	bf00      	nop
 8002988:	3714      	adds	r7, #20
 800298a:	46bd      	mov	sp, r7
 800298c:	bc80      	pop	{r7}
 800298e:	4770      	bx	lr

08002990 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af02      	add	r7, sp, #8
 8002996:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 1049 	ldrb.w	r1, [r3, #73]	; 0x49
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f893 004a 	ldrb.w	r0, [r3, #74]	; 0x4a
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80029b0:	9300      	str	r3, [sp, #0]
 80029b2:	4603      	mov	r3, r0
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f7ff fe6a 	bl	800268e <u8g2_IsIntersection>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d104      	bne.n	80029ca <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 80029c8:	e03b      	b.n	8002a42 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80029de:	429a      	cmp	r2, r3
 80029e0:	d205      	bcs.n	80029ee <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d905      	bls.n	8002a0a <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d205      	bcs.n	8002a26 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d905      	bls.n	8002a42 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
}
 8002a42:	bf00      	nop
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b082      	sub	sp, #8
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f7ff ff2b 	bl	80028ae <u8g2_update_dimension_common>
}
 8002a58:	bf00      	nop
 8002a5a:	3708      	adds	r7, #8
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
  
  u8g2->user_y0 = u8g2->buf_y0;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  u8g2->user_y1 = u8g2->buf_y1;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f7ff ff7b 	bl	8002990 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8002a9a:	bf00      	nop
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b084      	sub	sp, #16
 8002aa6:	af02      	add	r7, sp, #8
 8002aa8:	6078      	str	r0, [r7, #4]
 8002aaa:	4608      	mov	r0, r1
 8002aac:	4611      	mov	r1, r2
 8002aae:	461a      	mov	r2, r3
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	70fb      	strb	r3, [r7, #3]
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	70bb      	strb	r3, [r7, #2]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	707b      	strb	r3, [r7, #1]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8002abc:	7878      	ldrb	r0, [r7, #1]
 8002abe:	78ba      	ldrb	r2, [r7, #2]
 8002ac0:	78f9      	ldrb	r1, [r7, #3]
 8002ac2:	7c3b      	ldrb	r3, [r7, #16]
 8002ac4:	9300      	str	r3, [sp, #0]
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f7ff fcbf 	bl	800244c <u8g2_draw_hv_line_2dir>
}
 8002ace:	bf00      	nop
 8002ad0:	3708      	adds	r7, #8
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b083      	sub	sp, #12
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8002ae6:	bf00      	nop
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bc80      	pop	{r7}
 8002aee:	4770      	bx	lr

08002af0 <u8x8_utf8_next>:
    0x0fffe: no glyph, just continue
    0x0ffff: end of string
    anything else: The decoded encoding
*/
uint16_t u8x8_utf8_next(u8x8_t *u8x8, uint8_t b)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	460b      	mov	r3, r1
 8002afa:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' )	/* '\n' terminates the string to support the string list procedures */
 8002afc:	78fb      	ldrb	r3, [r7, #3]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d002      	beq.n	8002b08 <u8x8_utf8_next+0x18>
 8002b02:	78fb      	ldrb	r3, [r7, #3]
 8002b04:	2b0a      	cmp	r3, #10
 8002b06:	d102      	bne.n	8002b0e <u8x8_utf8_next+0x1e>
    return 0x0ffff;	/* end of string detected, pending UTF8 is discarded */
 8002b08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b0c:	e06e      	b.n	8002bec <u8x8_utf8_next+0xfc>
  if ( u8x8->utf8_state == 0 )
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d145      	bne.n	8002ba4 <u8x8_utf8_next+0xb4>
  {
    if ( b >= 0xfc )	/* 6 byte sequence */
 8002b18:	78fb      	ldrb	r3, [r7, #3]
 8002b1a:	2bfb      	cmp	r3, #251	; 0xfb
 8002b1c:	d908      	bls.n	8002b30 <u8x8_utf8_next+0x40>
    {
      u8x8->utf8_state = 5;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2205      	movs	r2, #5
 8002b22:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
      b &= 1;
 8002b26:	78fb      	ldrb	r3, [r7, #3]
 8002b28:	f003 0301 	and.w	r3, r3, #1
 8002b2c:	70fb      	strb	r3, [r7, #3]
 8002b2e:	e032      	b.n	8002b96 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf8 )
 8002b30:	78fb      	ldrb	r3, [r7, #3]
 8002b32:	2bf7      	cmp	r3, #247	; 0xf7
 8002b34:	d908      	bls.n	8002b48 <u8x8_utf8_next+0x58>
    {
      u8x8->utf8_state = 4;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2204      	movs	r2, #4
 8002b3a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
      b &= 3;
 8002b3e:	78fb      	ldrb	r3, [r7, #3]
 8002b40:	f003 0303 	and.w	r3, r3, #3
 8002b44:	70fb      	strb	r3, [r7, #3]
 8002b46:	e026      	b.n	8002b96 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf0 )
 8002b48:	78fb      	ldrb	r3, [r7, #3]
 8002b4a:	2bef      	cmp	r3, #239	; 0xef
 8002b4c:	d908      	bls.n	8002b60 <u8x8_utf8_next+0x70>
    {
      u8x8->utf8_state = 3;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2203      	movs	r2, #3
 8002b52:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
      b &= 7;      
 8002b56:	78fb      	ldrb	r3, [r7, #3]
 8002b58:	f003 0307 	and.w	r3, r3, #7
 8002b5c:	70fb      	strb	r3, [r7, #3]
 8002b5e:	e01a      	b.n	8002b96 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xe0 )
 8002b60:	78fb      	ldrb	r3, [r7, #3]
 8002b62:	2bdf      	cmp	r3, #223	; 0xdf
 8002b64:	d908      	bls.n	8002b78 <u8x8_utf8_next+0x88>
    {
      u8x8->utf8_state = 2;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2202      	movs	r2, #2
 8002b6a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
      b &= 15;
 8002b6e:	78fb      	ldrb	r3, [r7, #3]
 8002b70:	f003 030f 	and.w	r3, r3, #15
 8002b74:	70fb      	strb	r3, [r7, #3]
 8002b76:	e00e      	b.n	8002b96 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xc0 )
 8002b78:	78fb      	ldrb	r3, [r7, #3]
 8002b7a:	2bbf      	cmp	r3, #191	; 0xbf
 8002b7c:	d908      	bls.n	8002b90 <u8x8_utf8_next+0xa0>
    {
      u8x8->utf8_state = 1;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2201      	movs	r2, #1
 8002b82:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
      b &= 0x01f;
 8002b86:	78fb      	ldrb	r3, [r7, #3]
 8002b88:	f003 031f 	and.w	r3, r3, #31
 8002b8c:	70fb      	strb	r3, [r7, #3]
 8002b8e:	e002      	b.n	8002b96 <u8x8_utf8_next+0xa6>
    }
    else
    {
      /* do nothing, just use the value as encoding */
      return b;
 8002b90:	78fb      	ldrb	r3, [r7, #3]
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	e02a      	b.n	8002bec <u8x8_utf8_next+0xfc>
    }
    u8x8->encoding = b;
 8002b96:	78fb      	ldrb	r3, [r7, #3]
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	841a      	strh	r2, [r3, #32]
    return 0x0fffe;
 8002b9e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8002ba2:	e023      	b.n	8002bec <u8x8_utf8_next+0xfc>
  }
  else
  {
    u8x8->utf8_state--;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002baa:	3b01      	subs	r3, #1
 8002bac:	b2da      	uxtb	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    /* The case b < 0x080 (an illegal UTF8 encoding) is not checked here. */
    u8x8->encoding<<=6;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	8c1b      	ldrh	r3, [r3, #32]
 8002bb8:	019b      	lsls	r3, r3, #6
 8002bba:	b29a      	uxth	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	841a      	strh	r2, [r3, #32]
    b &= 0x03f;
 8002bc0:	78fb      	ldrb	r3, [r7, #3]
 8002bc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bc6:	70fb      	strb	r3, [r7, #3]
    u8x8->encoding |= b;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	8c1a      	ldrh	r2, [r3, #32]
 8002bcc:	78fb      	ldrb	r3, [r7, #3]
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	b29a      	uxth	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	841a      	strh	r2, [r3, #32]
    if ( u8x8->utf8_state != 0 )
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d002      	beq.n	8002be8 <u8x8_utf8_next+0xf8>
      return 0x0fffe;	/* nothing to do yet */
 8002be2:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8002be6:	e001      	b.n	8002bec <u8x8_utf8_next+0xfc>
  }
  return u8x8->encoding;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	8c1b      	ldrh	r3, [r3, #32]
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bc80      	pop	{r7}
 8002bf4:	4770      	bx	lr

08002bf6 <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002bf6:	b590      	push	{r4, r7, lr}
 8002bf8:	b085      	sub	sp, #20
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	60f8      	str	r0, [r7, #12]
 8002bfe:	460b      	mov	r3, r1
 8002c00:	607a      	str	r2, [r7, #4]
 8002c02:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	691c      	ldr	r4, [r3, #16]
 8002c08:	7afa      	ldrb	r2, [r7, #11]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2117      	movs	r1, #23
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	47a0      	blx	r4
 8002c12:	4603      	mov	r3, r0
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3714      	adds	r7, #20
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd90      	pop	{r4, r7, pc}

08002c1c <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	460b      	mov	r3, r1
 8002c26:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8002c28:	1cfb      	adds	r3, r7, #3
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	2101      	movs	r1, #1
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f7ff ffe1 	bl	8002bf6 <u8x8_byte_SendBytes>
 8002c34:	4603      	mov	r3, r0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8002c3e:	b590      	push	{r4, r7, lr}
 8002c40:	b083      	sub	sp, #12
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
 8002c46:	460b      	mov	r3, r1
 8002c48:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	68dc      	ldr	r4, [r3, #12]
 8002c4e:	78fa      	ldrb	r2, [r7, #3]
 8002c50:	2300      	movs	r3, #0
 8002c52:	2115      	movs	r1, #21
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	47a0      	blx	r4
 8002c58:	4603      	mov	r3, r0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd90      	pop	{r4, r7, pc}

08002c62 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002c62:	b590      	push	{r4, r7, lr}
 8002c64:	b085      	sub	sp, #20
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	60f8      	str	r0, [r7, #12]
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	607a      	str	r2, [r7, #4]
 8002c6e:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	68dc      	ldr	r4, [r3, #12]
 8002c74:	7afa      	ldrb	r2, [r7, #11]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2117      	movs	r1, #23
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	47a0      	blx	r4
 8002c7e:	4603      	mov	r3, r0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3714      	adds	r7, #20
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd90      	pop	{r4, r7, pc}

08002c88 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8002c88:	b590      	push	{r4, r7, lr}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	68dc      	ldr	r4, [r3, #12]
 8002c94:	2300      	movs	r3, #0
 8002c96:	2200      	movs	r2, #0
 8002c98:	2118      	movs	r1, #24
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	47a0      	blx	r4
 8002c9e:	4603      	mov	r3, r0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd90      	pop	{r4, r7, pc}

08002ca8 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8002ca8:	b590      	push	{r4, r7, lr}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	68dc      	ldr	r4, [r3, #12]
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	2119      	movs	r1, #25
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	47a0      	blx	r4
 8002cbe:	4603      	mov	r3, r0
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd90      	pop	{r4, r7, pc}

08002cc8 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8002cc8:	b590      	push	{r4, r7, lr}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	73fb      	strb	r3, [r7, #15]
    data++;
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	3301      	adds	r3, #1
 8002cdc:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8002cde:	7bfb      	ldrb	r3, [r7, #15]
 8002ce0:	2b17      	cmp	r3, #23
 8002ce2:	d017      	beq.n	8002d14 <u8x8_cad_SendSequence+0x4c>
 8002ce4:	2b17      	cmp	r3, #23
 8002ce6:	dc02      	bgt.n	8002cee <u8x8_cad_SendSequence+0x26>
 8002ce8:	2b15      	cmp	r3, #21
 8002cea:	db37      	blt.n	8002d5c <u8x8_cad_SendSequence+0x94>
 8002cec:	e004      	b.n	8002cf8 <u8x8_cad_SendSequence+0x30>
 8002cee:	2b19      	cmp	r3, #25
 8002cf0:	dd1e      	ble.n	8002d30 <u8x8_cad_SendSequence+0x68>
 8002cf2:	2bfe      	cmp	r3, #254	; 0xfe
 8002cf4:	d024      	beq.n	8002d40 <u8x8_cad_SendSequence+0x78>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8002cf6:	e031      	b.n	8002d5c <u8x8_cad_SendSequence+0x94>
	  v = *data;
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	68dc      	ldr	r4, [r3, #12]
 8002d02:	7bba      	ldrb	r2, [r7, #14]
 8002d04:	7bf9      	ldrb	r1, [r7, #15]
 8002d06:	2300      	movs	r3, #0
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	47a0      	blx	r4
	  data++;
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	3301      	adds	r3, #1
 8002d10:	603b      	str	r3, [r7, #0]
	  break;
 8002d12:	e022      	b.n	8002d5a <u8x8_cad_SendSequence+0x92>
	  v = *data;
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8002d1a:	f107 030e 	add.w	r3, r7, #14
 8002d1e:	461a      	mov	r2, r3
 8002d20:	2101      	movs	r1, #1
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f7ff ff9d 	bl	8002c62 <u8x8_cad_SendData>
	  data++;
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	603b      	str	r3, [r7, #0]
	  break;
 8002d2e:	e014      	b.n	8002d5a <u8x8_cad_SendSequence+0x92>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	68dc      	ldr	r4, [r3, #12]
 8002d34:	7bf9      	ldrb	r1, [r7, #15]
 8002d36:	2300      	movs	r3, #0
 8002d38:	2200      	movs	r2, #0
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	47a0      	blx	r4
	  break;
 8002d3e:	e00c      	b.n	8002d5a <u8x8_cad_SendSequence+0x92>
	  v = *data;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8002d46:	7bbb      	ldrb	r3, [r7, #14]
 8002d48:	461a      	mov	r2, r3
 8002d4a:	2129      	movs	r1, #41	; 0x29
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f000 fa21 	bl	8003194 <u8x8_gpio_call>
	  data++;
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	3301      	adds	r3, #1
 8002d56:	603b      	str	r3, [r7, #0]
	  break;
 8002d58:	bf00      	nop
    cmd = *data;
 8002d5a:	e7ba      	b.n	8002cd2 <u8x8_cad_SendSequence+0xa>
	return;
 8002d5c:	bf00      	nop
    }
  }
}
 8002d5e:	3714      	adds	r7, #20
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd90      	pop	{r4, r7, pc}

08002d64 <u8x8_cad_st7920_spi>:
}

/* cad procedure for the ST7920 in SPI mode */
/* u8x8_byte_SetDC is not used */
uint8_t u8x8_cad_st7920_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002d64:	b590      	push	{r4, r7, lr}
 8002d66:	b089      	sub	sp, #36	; 0x24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	607b      	str	r3, [r7, #4]
 8002d6e:	460b      	mov	r3, r1
 8002d70:	72fb      	strb	r3, [r7, #11]
 8002d72:	4613      	mov	r3, r2
 8002d74:	72bb      	strb	r3, [r7, #10]
  uint8_t b;
  uint8_t i;
  static uint8_t buf[16];
  uint8_t *ptr;
  
  switch(msg)
 8002d76:	7afb      	ldrb	r3, [r7, #11]
 8002d78:	3b14      	subs	r3, #20
 8002d7a:	2b05      	cmp	r3, #5
 8002d7c:	f200 80a8 	bhi.w	8002ed0 <u8x8_cad_st7920_spi+0x16c>
 8002d80:	a201      	add	r2, pc, #4	; (adr r2, 8002d88 <u8x8_cad_st7920_spi+0x24>)
 8002d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d86:	bf00      	nop
 8002d88:	08002ebf 	.word	0x08002ebf
 8002d8c:	08002da1 	.word	0x08002da1
 8002d90:	08002de7 	.word	0x08002de7
 8002d94:	08002e0f 	.word	0x08002e0f
 8002d98:	08002ebf 	.word	0x08002ebf
 8002d9c:	08002ebf 	.word	0x08002ebf
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SendByte(u8x8, 0x0f8);
 8002da0:	21f8      	movs	r1, #248	; 0xf8
 8002da2:	68f8      	ldr	r0, [r7, #12]
 8002da4:	f7ff ff3a 	bl	8002c1c <u8x8_byte_SendByte>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, 1);
 8002da8:	2201      	movs	r2, #1
 8002daa:	212c      	movs	r1, #44	; 0x2c
 8002dac:	68f8      	ldr	r0, [r7, #12]
 8002dae:	f000 f9f1 	bl	8003194 <u8x8_gpio_call>
      u8x8_byte_SendByte(u8x8, arg_int & 0x0f0);
 8002db2:	7abb      	ldrb	r3, [r7, #10]
 8002db4:	f023 030f 	bic.w	r3, r3, #15
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	4619      	mov	r1, r3
 8002dbc:	68f8      	ldr	r0, [r7, #12]
 8002dbe:	f7ff ff2d 	bl	8002c1c <u8x8_byte_SendByte>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, 1);
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	212c      	movs	r1, #44	; 0x2c
 8002dc6:	68f8      	ldr	r0, [r7, #12]
 8002dc8:	f000 f9e4 	bl	8003194 <u8x8_gpio_call>
      u8x8_byte_SendByte(u8x8, arg_int << 4);
 8002dcc:	7abb      	ldrb	r3, [r7, #10]
 8002dce:	011b      	lsls	r3, r3, #4
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	68f8      	ldr	r0, [r7, #12]
 8002dd6:	f7ff ff21 	bl	8002c1c <u8x8_byte_SendByte>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, 1);
 8002dda:	2201      	movs	r2, #1
 8002ddc:	212c      	movs	r1, #44	; 0x2c
 8002dde:	68f8      	ldr	r0, [r7, #12]
 8002de0:	f000 f9d8 	bl	8003194 <u8x8_gpio_call>
      break;
 8002de4:	e076      	b.n	8002ed4 <u8x8_cad_st7920_spi+0x170>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, 0x0f8);
 8002de6:	21f8      	movs	r1, #248	; 0xf8
 8002de8:	68f8      	ldr	r0, [r7, #12]
 8002dea:	f7ff ff17 	bl	8002c1c <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int & 0x0f0);
 8002dee:	7abb      	ldrb	r3, [r7, #10]
 8002df0:	f023 030f 	bic.w	r3, r3, #15
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	4619      	mov	r1, r3
 8002df8:	68f8      	ldr	r0, [r7, #12]
 8002dfa:	f7ff ff0f 	bl	8002c1c <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int << 4);
 8002dfe:	7abb      	ldrb	r3, [r7, #10]
 8002e00:	011b      	lsls	r3, r3, #4
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	4619      	mov	r1, r3
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	f7ff ff08 	bl	8002c1c <u8x8_byte_SendByte>
      break;
 8002e0c:	e062      	b.n	8002ed4 <u8x8_cad_st7920_spi+0x170>
    case U8X8_MSG_CAD_SEND_DATA:
    
      u8x8_byte_SendByte(u8x8, 0x0fa);
 8002e0e:	21fa      	movs	r1, #250	; 0xfa
 8002e10:	68f8      	ldr	r0, [r7, #12]
 8002e12:	f7ff ff03 	bl	8002c1c <u8x8_byte_SendByte>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, 1);
 8002e16:	2201      	movs	r2, #1
 8002e18:	212c      	movs	r1, #44	; 0x2c
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	f000 f9ba 	bl	8003194 <u8x8_gpio_call>

      /* this loop should be optimized: multiple bytes should be sent */
      /* u8x8_byte_SendBytes(u8x8, arg_int, arg_ptr); */
      data = (uint8_t *)arg_ptr;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	61fb      	str	r3, [r7, #28]
    
      /* the following loop increases speed by 20% */
      while( arg_int >= 8 )
 8002e24:	e026      	b.n	8002e74 <u8x8_cad_st7920_spi+0x110>
      {
	i = 8;
 8002e26:	2308      	movs	r3, #8
 8002e28:	76fb      	strb	r3, [r7, #27]
	ptr = buf;
 8002e2a:	4b2d      	ldr	r3, [pc, #180]	; (8002ee0 <u8x8_cad_st7920_spi+0x17c>)
 8002e2c:	617b      	str	r3, [r7, #20]
	do
	{
	  b = *data++;
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	1c5a      	adds	r2, r3, #1
 8002e32:	61fa      	str	r2, [r7, #28]
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	74fb      	strb	r3, [r7, #19]
	  *ptr++= b & 0x0f0;
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	1c5a      	adds	r2, r3, #1
 8002e3c:	617a      	str	r2, [r7, #20]
 8002e3e:	7cfa      	ldrb	r2, [r7, #19]
 8002e40:	f022 020f 	bic.w	r2, r2, #15
 8002e44:	b2d2      	uxtb	r2, r2
 8002e46:	701a      	strb	r2, [r3, #0]
	  b <<= 4;
 8002e48:	7cfb      	ldrb	r3, [r7, #19]
 8002e4a:	011b      	lsls	r3, r3, #4
 8002e4c:	74fb      	strb	r3, [r7, #19]
	  *ptr++= b;
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	1c5a      	adds	r2, r3, #1
 8002e52:	617a      	str	r2, [r7, #20]
 8002e54:	7cfa      	ldrb	r2, [r7, #19]
 8002e56:	701a      	strb	r2, [r3, #0]
	  i--;
 8002e58:	7efb      	ldrb	r3, [r7, #27]
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	76fb      	strb	r3, [r7, #27]
	} while( i > 0 );
 8002e5e:	7efb      	ldrb	r3, [r7, #27]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d1e4      	bne.n	8002e2e <u8x8_cad_st7920_spi+0xca>
	arg_int -= 8;
 8002e64:	7abb      	ldrb	r3, [r7, #10]
 8002e66:	3b08      	subs	r3, #8
 8002e68:	72bb      	strb	r3, [r7, #10]
	u8x8_byte_SendBytes(u8x8, 16, buf); 
 8002e6a:	4a1d      	ldr	r2, [pc, #116]	; (8002ee0 <u8x8_cad_st7920_spi+0x17c>)
 8002e6c:	2110      	movs	r1, #16
 8002e6e:	68f8      	ldr	r0, [r7, #12]
 8002e70:	f7ff fec1 	bl	8002bf6 <u8x8_byte_SendBytes>
      while( arg_int >= 8 )
 8002e74:	7abb      	ldrb	r3, [r7, #10]
 8002e76:	2b07      	cmp	r3, #7
 8002e78:	d8d5      	bhi.n	8002e26 <u8x8_cad_st7920_spi+0xc2>
      }
      
    
      while( arg_int > 0 )
 8002e7a:	e017      	b.n	8002eac <u8x8_cad_st7920_spi+0x148>
      {
	b = *data;
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	74fb      	strb	r3, [r7, #19]
	u8x8_byte_SendByte(u8x8, b & 0x0f0);
 8002e82:	7cfb      	ldrb	r3, [r7, #19]
 8002e84:	f023 030f 	bic.w	r3, r3, #15
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	68f8      	ldr	r0, [r7, #12]
 8002e8e:	f7ff fec5 	bl	8002c1c <u8x8_byte_SendByte>
	u8x8_byte_SendByte(u8x8, b << 4);
 8002e92:	7cfb      	ldrb	r3, [r7, #19]
 8002e94:	011b      	lsls	r3, r3, #4
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	4619      	mov	r1, r3
 8002e9a:	68f8      	ldr	r0, [r7, #12]
 8002e9c:	f7ff febe 	bl	8002c1c <u8x8_byte_SendByte>
	data++;
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	61fb      	str	r3, [r7, #28]
	arg_int--;
 8002ea6:	7abb      	ldrb	r3, [r7, #10]
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	72bb      	strb	r3, [r7, #10]
      while( arg_int > 0 )
 8002eac:	7abb      	ldrb	r3, [r7, #10]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1e4      	bne.n	8002e7c <u8x8_cad_st7920_spi+0x118>
      }
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, 1);
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	212c      	movs	r1, #44	; 0x2c
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f000 f96c 	bl	8003194 <u8x8_gpio_call>
      break;
 8002ebc:	e00a      	b.n	8002ed4 <u8x8_cad_st7920_spi+0x170>
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	691c      	ldr	r4, [r3, #16]
 8002ec2:	7aba      	ldrb	r2, [r7, #10]
 8002ec4:	7af9      	ldrb	r1, [r7, #11]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	47a0      	blx	r4
 8002ecc:	4603      	mov	r3, r0
 8002ece:	e002      	b.n	8002ed6 <u8x8_cad_st7920_spi+0x172>
    default:
      return 0;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	e000      	b.n	8002ed6 <u8x8_cad_st7920_spi+0x172>
  }
  return 1;
 8002ed4:	2301      	movs	r3, #1
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3724      	adds	r7, #36	; 0x24
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd90      	pop	{r4, r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	200004c4 	.word	0x200004c4

08002ee4 <u8x8_d_st7920_common>:
  U8X8_END()             			/* end of sequence */
};


uint8_t u8x8_d_st7920_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b088      	sub	sp, #32
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	607b      	str	r3, [r7, #4]
 8002eee:	460b      	mov	r3, r1
 8002ef0:	72fb      	strb	r3, [r7, #11]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	72bb      	strb	r3, [r7, #10]
  uint8_t x, y, c, i;
  uint8_t *ptr;
  switch(msg)
 8002ef6:	7afb      	ldrb	r3, [r7, #11]
 8002ef8:	2b0b      	cmp	r3, #11
 8002efa:	d00b      	beq.n	8002f14 <u8x8_d_st7920_common+0x30>
 8002efc:	2b0f      	cmp	r3, #15
 8002efe:	d016      	beq.n	8002f2e <u8x8_d_st7920_common+0x4a>
 8002f00:	2b0a      	cmp	r3, #10
 8002f02:	d169      	bne.n	8002fd8 <u8x8_d_st7920_common+0xf4>
    /*
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      break;
    */
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8002f04:	68f8      	ldr	r0, [r7, #12]
 8002f06:	f000 f8a8 	bl	800305a <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_st7920_init_seq);
 8002f0a:	4937      	ldr	r1, [pc, #220]	; (8002fe8 <u8x8_d_st7920_common+0x104>)
 8002f0c:	68f8      	ldr	r0, [r7, #12]
 8002f0e:	f7ff fedb 	bl	8002cc8 <u8x8_cad_SendSequence>
      break;
 8002f12:	e063      	b.n	8002fdc <u8x8_d_st7920_common+0xf8>
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8002f14:	7abb      	ldrb	r3, [r7, #10]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d104      	bne.n	8002f24 <u8x8_d_st7920_common+0x40>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7920_powersave0_seq);
 8002f1a:	4934      	ldr	r1, [pc, #208]	; (8002fec <u8x8_d_st7920_common+0x108>)
 8002f1c:	68f8      	ldr	r0, [r7, #12]
 8002f1e:	f7ff fed3 	bl	8002cc8 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7920_powersave1_seq);
      break;
 8002f22:	e05b      	b.n	8002fdc <u8x8_d_st7920_common+0xf8>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7920_powersave1_seq);
 8002f24:	4932      	ldr	r1, [pc, #200]	; (8002ff0 <u8x8_d_st7920_common+0x10c>)
 8002f26:	68f8      	ldr	r0, [r7, #12]
 8002f28:	f7ff fece 	bl	8002cc8 <u8x8_cad_SendSequence>
      break;
 8002f2c:	e056      	b.n	8002fdc <u8x8_d_st7920_common+0xf8>
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      y = (((u8x8_tile_t *)arg_ptr)->y_pos);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	799b      	ldrb	r3, [r3, #6]
 8002f32:	77bb      	strb	r3, [r7, #30]
      y*=8;
 8002f34:	7fbb      	ldrb	r3, [r7, #30]
 8002f36:	00db      	lsls	r3, r3, #3
 8002f38:	77bb      	strb	r3, [r7, #30]
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	795b      	ldrb	r3, [r3, #5]
 8002f3e:	77fb      	strb	r3, [r7, #31]
      x /= 2;		/* not sure whether this is a clever idea, problem is, the ST7920 can address only every second tile */
 8002f40:	7ffb      	ldrb	r3, [r7, #31]
 8002f42:	085b      	lsrs	r3, r3, #1
 8002f44:	77fb      	strb	r3, [r7, #31]
    
      if ( y >= 32 )	/* this is the adjustment for 128x64 displays */
 8002f46:	7fbb      	ldrb	r3, [r7, #30]
 8002f48:	2b1f      	cmp	r3, #31
 8002f4a:	d905      	bls.n	8002f58 <u8x8_d_st7920_common+0x74>
      {
	y-=32;
 8002f4c:	7fbb      	ldrb	r3, [r7, #30]
 8002f4e:	3b20      	subs	r3, #32
 8002f50:	77bb      	strb	r3, [r7, #30]
	x+=8;
 8002f52:	7ffb      	ldrb	r3, [r7, #31]
 8002f54:	3308      	adds	r3, #8
 8002f56:	77fb      	strb	r3, [r7, #31]
      }
    
      u8x8_cad_StartTransfer(u8x8);
 8002f58:	68f8      	ldr	r0, [r7, #12]
 8002f5a:	f7ff fe95 	bl	8002c88 <u8x8_cad_StartTransfer>
	"cnt" includes the number of horizontal bytes. width is equal to cnt*8
	Also important: Width must be a multiple of 16 (ST7920 requirement), so cnt must be even.
	
	TODO: Consider arg_int, however arg_int is not used by u8g2
      */
      c = ((u8x8_tile_t *)arg_ptr)->cnt;	/* number of tiles */
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	791b      	ldrb	r3, [r3, #4]
 8002f62:	75fb      	strb	r3, [r7, #23]
      ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;	/* data ptr to the tiles */
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	61bb      	str	r3, [r7, #24]
      /* The following byte is sent to allow the ST7920 to sync up with the data */
      /* it solves some issues with garbage data */
      u8x8_cad_SendCmd(u8x8, 0x03e );	/* enable extended mode */
 8002f6a:	213e      	movs	r1, #62	; 0x3e
 8002f6c:	68f8      	ldr	r0, [r7, #12]
 8002f6e:	f7ff fe66 	bl	8002c3e <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x03e );	/* enable extended mode, issue 487 */
 8002f72:	213e      	movs	r1, #62	; 0x3e
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	f7ff fe62 	bl	8002c3e <u8x8_cad_SendCmd>
      for( i = 0; i < 8; i++ )
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	777b      	strb	r3, [r7, #29]
 8002f7e:	e024      	b.n	8002fca <u8x8_d_st7920_common+0xe6>
      {
	//u8x8_cad_SendCmd(u8x8, 0x03e );	/* enable extended mode */
	u8x8_cad_SendCmd(u8x8, 0x080 | (y+i) );      /* y pos  */
 8002f80:	7fba      	ldrb	r2, [r7, #30]
 8002f82:	7f7b      	ldrb	r3, [r7, #29]
 8002f84:	4413      	add	r3, r2
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	b25b      	sxtb	r3, r3
 8002f8a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002f8e:	b25b      	sxtb	r3, r3
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	4619      	mov	r1, r3
 8002f94:	68f8      	ldr	r0, [r7, #12]
 8002f96:	f7ff fe52 	bl	8002c3e <u8x8_cad_SendCmd>
	u8x8_cad_SendCmd(u8x8, 0x080 | x );      /* set x pos */
 8002f9a:	7ffb      	ldrb	r3, [r7, #31]
 8002f9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	68f8      	ldr	r0, [r7, #12]
 8002fa6:	f7ff fe4a 	bl	8002c3e <u8x8_cad_SendCmd>
	c = ((u8x8_tile_t *)arg_ptr)->cnt;	/* number of tiles */
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	791b      	ldrb	r3, [r3, #4]
 8002fae:	75fb      	strb	r3, [r7, #23]

	//u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, 200, NULL);	/* extra dely required */
	u8x8_cad_SendData(u8x8, c, ptr);	/* note: SendData can not handle more than 255 bytes, send one line of data */
 8002fb0:	7dfb      	ldrb	r3, [r7, #23]
 8002fb2:	69ba      	ldr	r2, [r7, #24]
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	68f8      	ldr	r0, [r7, #12]
 8002fb8:	f7ff fe53 	bl	8002c62 <u8x8_cad_SendData>
	ptr += c;
 8002fbc:	7dfb      	ldrb	r3, [r7, #23]
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]
      for( i = 0; i < 8; i++ )
 8002fc4:	7f7b      	ldrb	r3, [r7, #29]
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	777b      	strb	r3, [r7, #29]
 8002fca:	7f7b      	ldrb	r3, [r7, #29]
 8002fcc:	2b07      	cmp	r3, #7
 8002fce:	d9d7      	bls.n	8002f80 <u8x8_d_st7920_common+0x9c>
	//u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, 200, NULL);	/* extra dely required */
      }

      u8x8_cad_EndTransfer(u8x8);
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f7ff fe69 	bl	8002ca8 <u8x8_cad_EndTransfer>

      break;
 8002fd6:	e001      	b.n	8002fdc <u8x8_d_st7920_common+0xf8>
    default:
      return 0;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	e000      	b.n	8002fde <u8x8_d_st7920_common+0xfa>
  }
  return 1;
 8002fdc:	2301      	movs	r3, #1
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3720      	adds	r7, #32
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	08007e64 	.word	0x08007e64
 8002fec:	08007e78 	.word	0x08007e78
 8002ff0:	08007e80 	.word	0x08007e80

08002ff4 <u8x8_d_st7920_128x64>:
  }
  return 1;
}

uint8_t u8x8_d_st7920_128x64(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	607b      	str	r3, [r7, #4]
 8002ffe:	460b      	mov	r3, r1
 8003000:	72fb      	strb	r3, [r7, #11]
 8003002:	4613      	mov	r3, r2
 8003004:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8003006:	7afb      	ldrb	r3, [r7, #11]
 8003008:	2b09      	cmp	r3, #9
 800300a:	d106      	bne.n	800301a <u8x8_d_st7920_128x64+0x26>
  {
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_st7920_128x64_display_info);
 800300c:	4908      	ldr	r1, [pc, #32]	; (8003030 <u8x8_d_st7920_128x64+0x3c>)
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f000 f810 	bl	8003034 <u8x8_d_helper_display_setup_memory>
      break;
 8003014:	bf00      	nop
    default:
      return u8x8_d_st7920_common(u8x8, msg, arg_int, arg_ptr);
  }
  return 1;
 8003016:	2301      	movs	r3, #1
 8003018:	e006      	b.n	8003028 <u8x8_d_st7920_128x64+0x34>
      return u8x8_d_st7920_common(u8x8, msg, arg_int, arg_ptr);
 800301a:	7aba      	ldrb	r2, [r7, #10]
 800301c:	7af9      	ldrb	r1, [r7, #11]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	68f8      	ldr	r0, [r7, #12]
 8003022:	f7ff ff5f 	bl	8002ee4 <u8x8_d_st7920_common>
 8003026:	4603      	mov	r3, r0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3710      	adds	r7, #16
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	08007e8c 	.word	0x08007e8c

08003034 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	683a      	ldr	r2, [r7, #0]
 8003042:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	7c9a      	ldrb	r2, [r3, #18]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	bc80      	pop	{r7}
 8003058:	4770      	bx	lr

0800305a <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 800305a:	b590      	push	{r4, r7, lr}
 800305c:	b083      	sub	sp, #12
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	695c      	ldr	r4, [r3, #20]
 8003066:	2300      	movs	r3, #0
 8003068:	2200      	movs	r2, #0
 800306a:	2128      	movs	r1, #40	; 0x28
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	68dc      	ldr	r4, [r3, #12]
 8003074:	2300      	movs	r3, #0
 8003076:	2200      	movs	r2, #0
 8003078:	2114      	movs	r1, #20
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 800307e:	2201      	movs	r2, #1
 8003080:	214b      	movs	r1, #75	; 0x4b
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 f886 	bl	8003194 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	791b      	ldrb	r3, [r3, #4]
 800308e:	461a      	mov	r2, r3
 8003090:	2129      	movs	r1, #41	; 0x29
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f000 f87e 	bl	8003194 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8003098:	2200      	movs	r2, #0
 800309a:	214b      	movs	r1, #75	; 0x4b
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f000 f879 	bl	8003194 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	791b      	ldrb	r3, [r3, #4]
 80030a8:	461a      	mov	r2, r3
 80030aa:	2129      	movs	r1, #41	; 0x29
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 f871 	bl	8003194 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 80030b2:	2201      	movs	r2, #1
 80030b4:	214b      	movs	r1, #75	; 0x4b
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 f86c 	bl	8003194 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	795b      	ldrb	r3, [r3, #5]
 80030c2:	461a      	mov	r2, r3
 80030c4:	2129      	movs	r1, #41	; 0x29
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 f864 	bl	8003194 <u8x8_gpio_call>
}    
 80030cc:	bf00      	nop
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd90      	pop	{r4, r7, pc}

080030d4 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 80030d4:	b590      	push	{r4, r7, lr}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	4608      	mov	r0, r1
 80030de:	4611      	mov	r1, r2
 80030e0:	461a      	mov	r2, r3
 80030e2:	4603      	mov	r3, r0
 80030e4:	70fb      	strb	r3, [r7, #3]
 80030e6:	460b      	mov	r3, r1
 80030e8:	70bb      	strb	r3, [r7, #2]
 80030ea:	4613      	mov	r3, r2
 80030ec:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 80030ee:	78fb      	ldrb	r3, [r7, #3]
 80030f0:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 80030f2:	78bb      	ldrb	r3, [r7, #2]
 80030f4:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 80030f6:	787b      	ldrb	r3, [r7, #1]
 80030f8:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 80030fa:	6a3b      	ldr	r3, [r7, #32]
 80030fc:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	689c      	ldr	r4, [r3, #8]
 8003102:	f107 0308 	add.w	r3, r7, #8
 8003106:	2201      	movs	r2, #1
 8003108:	210f      	movs	r1, #15
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	47a0      	blx	r4
 800310e:	4603      	mov	r3, r0
}
 8003110:	4618      	mov	r0, r3
 8003112:	3714      	adds	r7, #20
 8003114:	46bd      	mov	sp, r7
 8003116:	bd90      	pop	{r4, r7, pc}

08003118 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8003118:	b590      	push	{r4, r7, lr}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	689c      	ldr	r4, [r3, #8]
 8003124:	2300      	movs	r3, #0
 8003126:	2200      	movs	r2, #0
 8003128:	2109      	movs	r1, #9
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	47a0      	blx	r4
}
 800312e:	bf00      	nop
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	bd90      	pop	{r4, r7, pc}

08003136 <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8003136:	b590      	push	{r4, r7, lr}
 8003138:	b083      	sub	sp, #12
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	689c      	ldr	r4, [r3, #8]
 8003142:	2300      	movs	r3, #0
 8003144:	2200      	movs	r2, #0
 8003146:	210a      	movs	r1, #10
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	47a0      	blx	r4
}
 800314c:	bf00      	nop
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	bd90      	pop	{r4, r7, pc}

08003154 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8003154:	b590      	push	{r4, r7, lr}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	460b      	mov	r3, r1
 800315e:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689c      	ldr	r4, [r3, #8]
 8003164:	78fa      	ldrb	r2, [r7, #3]
 8003166:	2300      	movs	r3, #0
 8003168:	210b      	movs	r1, #11
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	47a0      	blx	r4
}
 800316e:	bf00      	nop
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	bd90      	pop	{r4, r7, pc}

08003176 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8003176:	b590      	push	{r4, r7, lr}
 8003178:	b083      	sub	sp, #12
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	689c      	ldr	r4, [r3, #8]
 8003182:	2300      	movs	r3, #0
 8003184:	2200      	movs	r2, #0
 8003186:	2110      	movs	r1, #16
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	47a0      	blx	r4
}
 800318c:	bf00      	nop
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	bd90      	pop	{r4, r7, pc}

08003194 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8003194:	b590      	push	{r4, r7, lr}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	460b      	mov	r3, r1
 800319e:	70fb      	strb	r3, [r7, #3]
 80031a0:	4613      	mov	r3, r2
 80031a2:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	695c      	ldr	r4, [r3, #20]
 80031a8:	78ba      	ldrb	r2, [r7, #2]
 80031aa:	78f9      	ldrb	r1, [r7, #3]
 80031ac:	2300      	movs	r3, #0
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	47a0      	blx	r4
}
 80031b2:	bf00      	nop
 80031b4:	370c      	adds	r7, #12
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd90      	pop	{r4, r7, pc}

080031ba <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 80031ba:	b480      	push	{r7}
 80031bc:	b085      	sub	sp, #20
 80031be:	af00      	add	r7, sp, #0
 80031c0:	60f8      	str	r0, [r7, #12]
 80031c2:	607b      	str	r3, [r7, #4]
 80031c4:	460b      	mov	r3, r1
 80031c6:	72fb      	strb	r3, [r7, #11]
 80031c8:	4613      	mov	r3, r2
 80031ca:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3714      	adds	r7, #20
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bc80      	pop	{r7}
 80031d6:	4770      	bx	lr

080031d8 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a13      	ldr	r2, [pc, #76]	; (8003238 <u8x8_SetupDefaults+0x60>)
 80031ea:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a12      	ldr	r2, [pc, #72]	; (8003238 <u8x8_SetupDefaults+0x60>)
 80031f0:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a10      	ldr	r2, [pc, #64]	; (8003238 <u8x8_SetupDefaults+0x60>)
 80031f6:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a0f      	ldr	r2, [pc, #60]	; (8003238 <u8x8_SetupDefaults+0x60>)
 80031fc:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    u8x8->device_address = 0;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    u8x8->bus_clock = 0;		/* issue 769 */
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	22ff      	movs	r2, #255	; 0xff
 8003220:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	22ff      	movs	r2, #255	; 0xff
 8003228:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 800322c:	bf00      	nop
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	bc80      	pop	{r7}
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	080031bb 	.word	0x080031bb

0800323c <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
 8003248:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	f7ff ffc4 	bl	80031d8 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	68ba      	ldr	r2, [r7, #8]
 8003254:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	683a      	ldr	r2, [r7, #0]
 8003260:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8003268:	68f8      	ldr	r0, [r7, #12]
 800326a:	f7ff ff55 	bl	8003118 <u8x8_SetupMemory>
}
 800326e:	bf00      	nop
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
	...

08003278 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003278:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800327a:	e003      	b.n	8003284 <LoopCopyDataInit>

0800327c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800327c:	4b0b      	ldr	r3, [pc, #44]	; (80032ac <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800327e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003280:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003282:	3104      	adds	r1, #4

08003284 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003284:	480a      	ldr	r0, [pc, #40]	; (80032b0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003286:	4b0b      	ldr	r3, [pc, #44]	; (80032b4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003288:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800328a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800328c:	d3f6      	bcc.n	800327c <CopyDataInit>
  ldr r2, =_sbss
 800328e:	4a0a      	ldr	r2, [pc, #40]	; (80032b8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003290:	e002      	b.n	8003298 <LoopFillZerobss>

08003292 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003292:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003294:	f842 3b04 	str.w	r3, [r2], #4

08003298 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003298:	4b08      	ldr	r3, [pc, #32]	; (80032bc <LoopFillZerobss+0x24>)
  cmp r2, r3
 800329a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800329c:	d3f9      	bcc.n	8003292 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800329e:	f7fd ffb3 	bl	8001208 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032a2:	f003 f811 	bl	80062c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80032a6:	f7fc ff6f 	bl	8000188 <main>
  bx lr
 80032aa:	4770      	bx	lr
  ldr r3, =_sidata
 80032ac:	08007f40 	.word	0x08007f40
  ldr r0, =_sdata
 80032b0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80032b4:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 80032b8:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 80032bc:	2000067c 	.word	0x2000067c

080032c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80032c0:	e7fe      	b.n	80032c0 <ADC1_2_IRQHandler>
	...

080032c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032c8:	4b08      	ldr	r3, [pc, #32]	; (80032ec <HAL_Init+0x28>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a07      	ldr	r2, [pc, #28]	; (80032ec <HAL_Init+0x28>)
 80032ce:	f043 0310 	orr.w	r3, r3, #16
 80032d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032d4:	2003      	movs	r0, #3
 80032d6:	f000 f967 	bl	80035a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032da:	2000      	movs	r0, #0
 80032dc:	f000 f808 	bl	80032f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032e0:	f7fd fda2 	bl	8000e28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	40022000 	.word	0x40022000

080032f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032f8:	4b12      	ldr	r3, [pc, #72]	; (8003344 <HAL_InitTick+0x54>)
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	4b12      	ldr	r3, [pc, #72]	; (8003348 <HAL_InitTick+0x58>)
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	4619      	mov	r1, r3
 8003302:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003306:	fbb3 f3f1 	udiv	r3, r3, r1
 800330a:	fbb2 f3f3 	udiv	r3, r2, r3
 800330e:	4618      	mov	r0, r3
 8003310:	f000 f98d 	bl	800362e <HAL_SYSTICK_Config>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e00e      	b.n	800333c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2b0f      	cmp	r3, #15
 8003322:	d80a      	bhi.n	800333a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003324:	2200      	movs	r2, #0
 8003326:	6879      	ldr	r1, [r7, #4]
 8003328:	f04f 30ff 	mov.w	r0, #4294967295
 800332c:	f000 f947 	bl	80035be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003330:	4a06      	ldr	r2, [pc, #24]	; (800334c <HAL_InitTick+0x5c>)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003336:	2300      	movs	r3, #0
 8003338:	e000      	b.n	800333c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
}
 800333c:	4618      	mov	r0, r3
 800333e:	3708      	adds	r7, #8
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	20000004 	.word	0x20000004
 8003348:	2000000c 	.word	0x2000000c
 800334c:	20000008 	.word	0x20000008

08003350 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003354:	4b05      	ldr	r3, [pc, #20]	; (800336c <HAL_IncTick+0x1c>)
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	461a      	mov	r2, r3
 800335a:	4b05      	ldr	r3, [pc, #20]	; (8003370 <HAL_IncTick+0x20>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4413      	add	r3, r2
 8003360:	4a03      	ldr	r2, [pc, #12]	; (8003370 <HAL_IncTick+0x20>)
 8003362:	6013      	str	r3, [r2, #0]
}
 8003364:	bf00      	nop
 8003366:	46bd      	mov	sp, r7
 8003368:	bc80      	pop	{r7}
 800336a:	4770      	bx	lr
 800336c:	2000000c 	.word	0x2000000c
 8003370:	20000674 	.word	0x20000674

08003374 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
  return uwTick;
 8003378:	4b02      	ldr	r3, [pc, #8]	; (8003384 <HAL_GetTick+0x10>)
 800337a:	681b      	ldr	r3, [r3, #0]
}
 800337c:	4618      	mov	r0, r3
 800337e:	46bd      	mov	sp, r7
 8003380:	bc80      	pop	{r7}
 8003382:	4770      	bx	lr
 8003384:	20000674 	.word	0x20000674

08003388 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003390:	f7ff fff0 	bl	8003374 <HAL_GetTick>
 8003394:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a0:	d005      	beq.n	80033ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033a2:	4b09      	ldr	r3, [pc, #36]	; (80033c8 <HAL_Delay+0x40>)
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	461a      	mov	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	4413      	add	r3, r2
 80033ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80033ae:	bf00      	nop
 80033b0:	f7ff ffe0 	bl	8003374 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d8f7      	bhi.n	80033b0 <HAL_Delay+0x28>
  {
  }
}
 80033c0:	bf00      	nop
 80033c2:	3710      	adds	r7, #16
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	2000000c 	.word	0x2000000c

080033cc <__NVIC_SetPriorityGrouping>:
{
 80033cc:	b480      	push	{r7}
 80033ce:	b085      	sub	sp, #20
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f003 0307 	and.w	r3, r3, #7
 80033da:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033dc:	4b0c      	ldr	r3, [pc, #48]	; (8003410 <__NVIC_SetPriorityGrouping+0x44>)
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033e2:	68ba      	ldr	r2, [r7, #8]
 80033e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033e8:	4013      	ands	r3, r2
 80033ea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033fe:	4a04      	ldr	r2, [pc, #16]	; (8003410 <__NVIC_SetPriorityGrouping+0x44>)
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	60d3      	str	r3, [r2, #12]
}
 8003404:	bf00      	nop
 8003406:	3714      	adds	r7, #20
 8003408:	46bd      	mov	sp, r7
 800340a:	bc80      	pop	{r7}
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	e000ed00 	.word	0xe000ed00

08003414 <__NVIC_GetPriorityGrouping>:
{
 8003414:	b480      	push	{r7}
 8003416:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003418:	4b04      	ldr	r3, [pc, #16]	; (800342c <__NVIC_GetPriorityGrouping+0x18>)
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	0a1b      	lsrs	r3, r3, #8
 800341e:	f003 0307 	and.w	r3, r3, #7
}
 8003422:	4618      	mov	r0, r3
 8003424:	46bd      	mov	sp, r7
 8003426:	bc80      	pop	{r7}
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	e000ed00 	.word	0xe000ed00

08003430 <__NVIC_EnableIRQ>:
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	4603      	mov	r3, r0
 8003438:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800343a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800343e:	2b00      	cmp	r3, #0
 8003440:	db0b      	blt.n	800345a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003442:	79fb      	ldrb	r3, [r7, #7]
 8003444:	f003 021f 	and.w	r2, r3, #31
 8003448:	4906      	ldr	r1, [pc, #24]	; (8003464 <__NVIC_EnableIRQ+0x34>)
 800344a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800344e:	095b      	lsrs	r3, r3, #5
 8003450:	2001      	movs	r0, #1
 8003452:	fa00 f202 	lsl.w	r2, r0, r2
 8003456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800345a:	bf00      	nop
 800345c:	370c      	adds	r7, #12
 800345e:	46bd      	mov	sp, r7
 8003460:	bc80      	pop	{r7}
 8003462:	4770      	bx	lr
 8003464:	e000e100 	.word	0xe000e100

08003468 <__NVIC_DisableIRQ>:
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	4603      	mov	r3, r0
 8003470:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003476:	2b00      	cmp	r3, #0
 8003478:	db10      	blt.n	800349c <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800347a:	79fb      	ldrb	r3, [r7, #7]
 800347c:	f003 021f 	and.w	r2, r3, #31
 8003480:	4909      	ldr	r1, [pc, #36]	; (80034a8 <__NVIC_DisableIRQ+0x40>)
 8003482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003486:	095b      	lsrs	r3, r3, #5
 8003488:	2001      	movs	r0, #1
 800348a:	fa00 f202 	lsl.w	r2, r0, r2
 800348e:	3320      	adds	r3, #32
 8003490:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003494:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003498:	f3bf 8f6f 	isb	sy
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bc80      	pop	{r7}
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	e000e100 	.word	0xe000e100

080034ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	4603      	mov	r3, r0
 80034b4:	6039      	str	r1, [r7, #0]
 80034b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	db0a      	blt.n	80034d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	b2da      	uxtb	r2, r3
 80034c4:	490c      	ldr	r1, [pc, #48]	; (80034f8 <__NVIC_SetPriority+0x4c>)
 80034c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ca:	0112      	lsls	r2, r2, #4
 80034cc:	b2d2      	uxtb	r2, r2
 80034ce:	440b      	add	r3, r1
 80034d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034d4:	e00a      	b.n	80034ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	b2da      	uxtb	r2, r3
 80034da:	4908      	ldr	r1, [pc, #32]	; (80034fc <__NVIC_SetPriority+0x50>)
 80034dc:	79fb      	ldrb	r3, [r7, #7]
 80034de:	f003 030f 	and.w	r3, r3, #15
 80034e2:	3b04      	subs	r3, #4
 80034e4:	0112      	lsls	r2, r2, #4
 80034e6:	b2d2      	uxtb	r2, r2
 80034e8:	440b      	add	r3, r1
 80034ea:	761a      	strb	r2, [r3, #24]
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bc80      	pop	{r7}
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	e000e100 	.word	0xe000e100
 80034fc:	e000ed00 	.word	0xe000ed00

08003500 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003500:	b480      	push	{r7}
 8003502:	b089      	sub	sp, #36	; 0x24
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f003 0307 	and.w	r3, r3, #7
 8003512:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	f1c3 0307 	rsb	r3, r3, #7
 800351a:	2b04      	cmp	r3, #4
 800351c:	bf28      	it	cs
 800351e:	2304      	movcs	r3, #4
 8003520:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	3304      	adds	r3, #4
 8003526:	2b06      	cmp	r3, #6
 8003528:	d902      	bls.n	8003530 <NVIC_EncodePriority+0x30>
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	3b03      	subs	r3, #3
 800352e:	e000      	b.n	8003532 <NVIC_EncodePriority+0x32>
 8003530:	2300      	movs	r3, #0
 8003532:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003534:	f04f 32ff 	mov.w	r2, #4294967295
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	fa02 f303 	lsl.w	r3, r2, r3
 800353e:	43da      	mvns	r2, r3
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	401a      	ands	r2, r3
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003548:	f04f 31ff 	mov.w	r1, #4294967295
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	fa01 f303 	lsl.w	r3, r1, r3
 8003552:	43d9      	mvns	r1, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003558:	4313      	orrs	r3, r2
         );
}
 800355a:	4618      	mov	r0, r3
 800355c:	3724      	adds	r7, #36	; 0x24
 800355e:	46bd      	mov	sp, r7
 8003560:	bc80      	pop	{r7}
 8003562:	4770      	bx	lr

08003564 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	3b01      	subs	r3, #1
 8003570:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003574:	d301      	bcc.n	800357a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003576:	2301      	movs	r3, #1
 8003578:	e00f      	b.n	800359a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800357a:	4a0a      	ldr	r2, [pc, #40]	; (80035a4 <SysTick_Config+0x40>)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	3b01      	subs	r3, #1
 8003580:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003582:	210f      	movs	r1, #15
 8003584:	f04f 30ff 	mov.w	r0, #4294967295
 8003588:	f7ff ff90 	bl	80034ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800358c:	4b05      	ldr	r3, [pc, #20]	; (80035a4 <SysTick_Config+0x40>)
 800358e:	2200      	movs	r2, #0
 8003590:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003592:	4b04      	ldr	r3, [pc, #16]	; (80035a4 <SysTick_Config+0x40>)
 8003594:	2207      	movs	r2, #7
 8003596:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	e000e010 	.word	0xe000e010

080035a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f7ff ff0b 	bl	80033cc <__NVIC_SetPriorityGrouping>
}
 80035b6:	bf00      	nop
 80035b8:	3708      	adds	r7, #8
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035be:	b580      	push	{r7, lr}
 80035c0:	b086      	sub	sp, #24
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	4603      	mov	r3, r0
 80035c6:	60b9      	str	r1, [r7, #8]
 80035c8:	607a      	str	r2, [r7, #4]
 80035ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035cc:	2300      	movs	r3, #0
 80035ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035d0:	f7ff ff20 	bl	8003414 <__NVIC_GetPriorityGrouping>
 80035d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	68b9      	ldr	r1, [r7, #8]
 80035da:	6978      	ldr	r0, [r7, #20]
 80035dc:	f7ff ff90 	bl	8003500 <NVIC_EncodePriority>
 80035e0:	4602      	mov	r2, r0
 80035e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035e6:	4611      	mov	r1, r2
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7ff ff5f 	bl	80034ac <__NVIC_SetPriority>
}
 80035ee:	bf00      	nop
 80035f0:	3718      	adds	r7, #24
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b082      	sub	sp, #8
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	4603      	mov	r3, r0
 80035fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003604:	4618      	mov	r0, r3
 8003606:	f7ff ff13 	bl	8003430 <__NVIC_EnableIRQ>
}
 800360a:	bf00      	nop
 800360c:	3708      	adds	r7, #8
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003612:	b580      	push	{r7, lr}
 8003614:	b082      	sub	sp, #8
 8003616:	af00      	add	r7, sp, #0
 8003618:	4603      	mov	r3, r0
 800361a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800361c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003620:	4618      	mov	r0, r3
 8003622:	f7ff ff21 	bl	8003468 <__NVIC_DisableIRQ>
}
 8003626:	bf00      	nop
 8003628:	3708      	adds	r7, #8
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}

0800362e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800362e:	b580      	push	{r7, lr}
 8003630:	b082      	sub	sp, #8
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f7ff ff94 	bl	8003564 <SysTick_Config>
 800363c:	4603      	mov	r3, r0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3708      	adds	r7, #8
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
	...

08003648 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003648:	b480      	push	{r7}
 800364a:	b08b      	sub	sp, #44	; 0x2c
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003652:	2300      	movs	r3, #0
 8003654:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003656:	2300      	movs	r3, #0
 8003658:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800365a:	e127      	b.n	80038ac <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800365c:	2201      	movs	r2, #1
 800365e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003660:	fa02 f303 	lsl.w	r3, r2, r3
 8003664:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	69fa      	ldr	r2, [r7, #28]
 800366c:	4013      	ands	r3, r2
 800366e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	429a      	cmp	r2, r3
 8003676:	f040 8116 	bne.w	80038a6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	2b12      	cmp	r3, #18
 8003680:	d034      	beq.n	80036ec <HAL_GPIO_Init+0xa4>
 8003682:	2b12      	cmp	r3, #18
 8003684:	d80d      	bhi.n	80036a2 <HAL_GPIO_Init+0x5a>
 8003686:	2b02      	cmp	r3, #2
 8003688:	d02b      	beq.n	80036e2 <HAL_GPIO_Init+0x9a>
 800368a:	2b02      	cmp	r3, #2
 800368c:	d804      	bhi.n	8003698 <HAL_GPIO_Init+0x50>
 800368e:	2b00      	cmp	r3, #0
 8003690:	d031      	beq.n	80036f6 <HAL_GPIO_Init+0xae>
 8003692:	2b01      	cmp	r3, #1
 8003694:	d01c      	beq.n	80036d0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003696:	e048      	b.n	800372a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003698:	2b03      	cmp	r3, #3
 800369a:	d043      	beq.n	8003724 <HAL_GPIO_Init+0xdc>
 800369c:	2b11      	cmp	r3, #17
 800369e:	d01b      	beq.n	80036d8 <HAL_GPIO_Init+0x90>
          break;
 80036a0:	e043      	b.n	800372a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80036a2:	4a89      	ldr	r2, [pc, #548]	; (80038c8 <HAL_GPIO_Init+0x280>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d026      	beq.n	80036f6 <HAL_GPIO_Init+0xae>
 80036a8:	4a87      	ldr	r2, [pc, #540]	; (80038c8 <HAL_GPIO_Init+0x280>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d806      	bhi.n	80036bc <HAL_GPIO_Init+0x74>
 80036ae:	4a87      	ldr	r2, [pc, #540]	; (80038cc <HAL_GPIO_Init+0x284>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d020      	beq.n	80036f6 <HAL_GPIO_Init+0xae>
 80036b4:	4a86      	ldr	r2, [pc, #536]	; (80038d0 <HAL_GPIO_Init+0x288>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d01d      	beq.n	80036f6 <HAL_GPIO_Init+0xae>
          break;
 80036ba:	e036      	b.n	800372a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80036bc:	4a85      	ldr	r2, [pc, #532]	; (80038d4 <HAL_GPIO_Init+0x28c>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d019      	beq.n	80036f6 <HAL_GPIO_Init+0xae>
 80036c2:	4a85      	ldr	r2, [pc, #532]	; (80038d8 <HAL_GPIO_Init+0x290>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d016      	beq.n	80036f6 <HAL_GPIO_Init+0xae>
 80036c8:	4a84      	ldr	r2, [pc, #528]	; (80038dc <HAL_GPIO_Init+0x294>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d013      	beq.n	80036f6 <HAL_GPIO_Init+0xae>
          break;
 80036ce:	e02c      	b.n	800372a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	623b      	str	r3, [r7, #32]
          break;
 80036d6:	e028      	b.n	800372a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	3304      	adds	r3, #4
 80036de:	623b      	str	r3, [r7, #32]
          break;
 80036e0:	e023      	b.n	800372a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	3308      	adds	r3, #8
 80036e8:	623b      	str	r3, [r7, #32]
          break;
 80036ea:	e01e      	b.n	800372a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	330c      	adds	r3, #12
 80036f2:	623b      	str	r3, [r7, #32]
          break;
 80036f4:	e019      	b.n	800372a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d102      	bne.n	8003704 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80036fe:	2304      	movs	r3, #4
 8003700:	623b      	str	r3, [r7, #32]
          break;
 8003702:	e012      	b.n	800372a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	2b01      	cmp	r3, #1
 800370a:	d105      	bne.n	8003718 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800370c:	2308      	movs	r3, #8
 800370e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	69fa      	ldr	r2, [r7, #28]
 8003714:	611a      	str	r2, [r3, #16]
          break;
 8003716:	e008      	b.n	800372a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003718:	2308      	movs	r3, #8
 800371a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	69fa      	ldr	r2, [r7, #28]
 8003720:	615a      	str	r2, [r3, #20]
          break;
 8003722:	e002      	b.n	800372a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003724:	2300      	movs	r3, #0
 8003726:	623b      	str	r3, [r7, #32]
          break;
 8003728:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	2bff      	cmp	r3, #255	; 0xff
 800372e:	d801      	bhi.n	8003734 <HAL_GPIO_Init+0xec>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	e001      	b.n	8003738 <HAL_GPIO_Init+0xf0>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	3304      	adds	r3, #4
 8003738:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	2bff      	cmp	r3, #255	; 0xff
 800373e:	d802      	bhi.n	8003746 <HAL_GPIO_Init+0xfe>
 8003740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	e002      	b.n	800374c <HAL_GPIO_Init+0x104>
 8003746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003748:	3b08      	subs	r3, #8
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	210f      	movs	r1, #15
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	fa01 f303 	lsl.w	r3, r1, r3
 800375a:	43db      	mvns	r3, r3
 800375c:	401a      	ands	r2, r3
 800375e:	6a39      	ldr	r1, [r7, #32]
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	fa01 f303 	lsl.w	r3, r1, r3
 8003766:	431a      	orrs	r2, r3
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003774:	2b00      	cmp	r3, #0
 8003776:	f000 8096 	beq.w	80038a6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800377a:	4b59      	ldr	r3, [pc, #356]	; (80038e0 <HAL_GPIO_Init+0x298>)
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	4a58      	ldr	r2, [pc, #352]	; (80038e0 <HAL_GPIO_Init+0x298>)
 8003780:	f043 0301 	orr.w	r3, r3, #1
 8003784:	6193      	str	r3, [r2, #24]
 8003786:	4b56      	ldr	r3, [pc, #344]	; (80038e0 <HAL_GPIO_Init+0x298>)
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	60bb      	str	r3, [r7, #8]
 8003790:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003792:	4a54      	ldr	r2, [pc, #336]	; (80038e4 <HAL_GPIO_Init+0x29c>)
 8003794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003796:	089b      	lsrs	r3, r3, #2
 8003798:	3302      	adds	r3, #2
 800379a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800379e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80037a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a2:	f003 0303 	and.w	r3, r3, #3
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	220f      	movs	r2, #15
 80037aa:	fa02 f303 	lsl.w	r3, r2, r3
 80037ae:	43db      	mvns	r3, r3
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	4013      	ands	r3, r2
 80037b4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a4b      	ldr	r2, [pc, #300]	; (80038e8 <HAL_GPIO_Init+0x2a0>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d013      	beq.n	80037e6 <HAL_GPIO_Init+0x19e>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a4a      	ldr	r2, [pc, #296]	; (80038ec <HAL_GPIO_Init+0x2a4>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d00d      	beq.n	80037e2 <HAL_GPIO_Init+0x19a>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a49      	ldr	r2, [pc, #292]	; (80038f0 <HAL_GPIO_Init+0x2a8>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d007      	beq.n	80037de <HAL_GPIO_Init+0x196>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a48      	ldr	r2, [pc, #288]	; (80038f4 <HAL_GPIO_Init+0x2ac>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d101      	bne.n	80037da <HAL_GPIO_Init+0x192>
 80037d6:	2303      	movs	r3, #3
 80037d8:	e006      	b.n	80037e8 <HAL_GPIO_Init+0x1a0>
 80037da:	2304      	movs	r3, #4
 80037dc:	e004      	b.n	80037e8 <HAL_GPIO_Init+0x1a0>
 80037de:	2302      	movs	r3, #2
 80037e0:	e002      	b.n	80037e8 <HAL_GPIO_Init+0x1a0>
 80037e2:	2301      	movs	r3, #1
 80037e4:	e000      	b.n	80037e8 <HAL_GPIO_Init+0x1a0>
 80037e6:	2300      	movs	r3, #0
 80037e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037ea:	f002 0203 	and.w	r2, r2, #3
 80037ee:	0092      	lsls	r2, r2, #2
 80037f0:	4093      	lsls	r3, r2
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80037f8:	493a      	ldr	r1, [pc, #232]	; (80038e4 <HAL_GPIO_Init+0x29c>)
 80037fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fc:	089b      	lsrs	r3, r3, #2
 80037fe:	3302      	adds	r3, #2
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d006      	beq.n	8003820 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003812:	4b39      	ldr	r3, [pc, #228]	; (80038f8 <HAL_GPIO_Init+0x2b0>)
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	4938      	ldr	r1, [pc, #224]	; (80038f8 <HAL_GPIO_Init+0x2b0>)
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	4313      	orrs	r3, r2
 800381c:	600b      	str	r3, [r1, #0]
 800381e:	e006      	b.n	800382e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003820:	4b35      	ldr	r3, [pc, #212]	; (80038f8 <HAL_GPIO_Init+0x2b0>)
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	43db      	mvns	r3, r3
 8003828:	4933      	ldr	r1, [pc, #204]	; (80038f8 <HAL_GPIO_Init+0x2b0>)
 800382a:	4013      	ands	r3, r2
 800382c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d006      	beq.n	8003848 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800383a:	4b2f      	ldr	r3, [pc, #188]	; (80038f8 <HAL_GPIO_Init+0x2b0>)
 800383c:	685a      	ldr	r2, [r3, #4]
 800383e:	492e      	ldr	r1, [pc, #184]	; (80038f8 <HAL_GPIO_Init+0x2b0>)
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	4313      	orrs	r3, r2
 8003844:	604b      	str	r3, [r1, #4]
 8003846:	e006      	b.n	8003856 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003848:	4b2b      	ldr	r3, [pc, #172]	; (80038f8 <HAL_GPIO_Init+0x2b0>)
 800384a:	685a      	ldr	r2, [r3, #4]
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	43db      	mvns	r3, r3
 8003850:	4929      	ldr	r1, [pc, #164]	; (80038f8 <HAL_GPIO_Init+0x2b0>)
 8003852:	4013      	ands	r3, r2
 8003854:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d006      	beq.n	8003870 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003862:	4b25      	ldr	r3, [pc, #148]	; (80038f8 <HAL_GPIO_Init+0x2b0>)
 8003864:	689a      	ldr	r2, [r3, #8]
 8003866:	4924      	ldr	r1, [pc, #144]	; (80038f8 <HAL_GPIO_Init+0x2b0>)
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	4313      	orrs	r3, r2
 800386c:	608b      	str	r3, [r1, #8]
 800386e:	e006      	b.n	800387e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003870:	4b21      	ldr	r3, [pc, #132]	; (80038f8 <HAL_GPIO_Init+0x2b0>)
 8003872:	689a      	ldr	r2, [r3, #8]
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	43db      	mvns	r3, r3
 8003878:	491f      	ldr	r1, [pc, #124]	; (80038f8 <HAL_GPIO_Init+0x2b0>)
 800387a:	4013      	ands	r3, r2
 800387c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d006      	beq.n	8003898 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800388a:	4b1b      	ldr	r3, [pc, #108]	; (80038f8 <HAL_GPIO_Init+0x2b0>)
 800388c:	68da      	ldr	r2, [r3, #12]
 800388e:	491a      	ldr	r1, [pc, #104]	; (80038f8 <HAL_GPIO_Init+0x2b0>)
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	4313      	orrs	r3, r2
 8003894:	60cb      	str	r3, [r1, #12]
 8003896:	e006      	b.n	80038a6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003898:	4b17      	ldr	r3, [pc, #92]	; (80038f8 <HAL_GPIO_Init+0x2b0>)
 800389a:	68da      	ldr	r2, [r3, #12]
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	43db      	mvns	r3, r3
 80038a0:	4915      	ldr	r1, [pc, #84]	; (80038f8 <HAL_GPIO_Init+0x2b0>)
 80038a2:	4013      	ands	r3, r2
 80038a4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80038a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a8:	3301      	adds	r3, #1
 80038aa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b2:	fa22 f303 	lsr.w	r3, r2, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	f47f aed0 	bne.w	800365c <HAL_GPIO_Init+0x14>
  }
}
 80038bc:	bf00      	nop
 80038be:	372c      	adds	r7, #44	; 0x2c
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bc80      	pop	{r7}
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	10210000 	.word	0x10210000
 80038cc:	10110000 	.word	0x10110000
 80038d0:	10120000 	.word	0x10120000
 80038d4:	10310000 	.word	0x10310000
 80038d8:	10320000 	.word	0x10320000
 80038dc:	10220000 	.word	0x10220000
 80038e0:	40021000 	.word	0x40021000
 80038e4:	40010000 	.word	0x40010000
 80038e8:	40010800 	.word	0x40010800
 80038ec:	40010c00 	.word	0x40010c00
 80038f0:	40011000 	.word	0x40011000
 80038f4:	40011400 	.word	0x40011400
 80038f8:	40010400 	.word	0x40010400

080038fc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b089      	sub	sp, #36	; 0x24
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003906:	2300      	movs	r3, #0
 8003908:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800390a:	e09a      	b.n	8003a42 <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800390c:	2201      	movs	r2, #1
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	fa02 f303 	lsl.w	r3, r2, r3
 8003914:	683a      	ldr	r2, [r7, #0]
 8003916:	4013      	ands	r3, r2
 8003918:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	2b00      	cmp	r3, #0
 800391e:	f000 808d 	beq.w	8003a3c <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8003922:	4a4e      	ldr	r2, [pc, #312]	; (8003a5c <HAL_GPIO_DeInit+0x160>)
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	089b      	lsrs	r3, r3, #2
 8003928:	3302      	adds	r3, #2
 800392a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800392e:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	f003 0303 	and.w	r3, r3, #3
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	220f      	movs	r2, #15
 800393a:	fa02 f303 	lsl.w	r3, r2, r3
 800393e:	697a      	ldr	r2, [r7, #20]
 8003940:	4013      	ands	r3, r2
 8003942:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a46      	ldr	r2, [pc, #280]	; (8003a60 <HAL_GPIO_DeInit+0x164>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d013      	beq.n	8003974 <HAL_GPIO_DeInit+0x78>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a45      	ldr	r2, [pc, #276]	; (8003a64 <HAL_GPIO_DeInit+0x168>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d00d      	beq.n	8003970 <HAL_GPIO_DeInit+0x74>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a44      	ldr	r2, [pc, #272]	; (8003a68 <HAL_GPIO_DeInit+0x16c>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d007      	beq.n	800396c <HAL_GPIO_DeInit+0x70>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a43      	ldr	r2, [pc, #268]	; (8003a6c <HAL_GPIO_DeInit+0x170>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d101      	bne.n	8003968 <HAL_GPIO_DeInit+0x6c>
 8003964:	2303      	movs	r3, #3
 8003966:	e006      	b.n	8003976 <HAL_GPIO_DeInit+0x7a>
 8003968:	2304      	movs	r3, #4
 800396a:	e004      	b.n	8003976 <HAL_GPIO_DeInit+0x7a>
 800396c:	2302      	movs	r3, #2
 800396e:	e002      	b.n	8003976 <HAL_GPIO_DeInit+0x7a>
 8003970:	2301      	movs	r3, #1
 8003972:	e000      	b.n	8003976 <HAL_GPIO_DeInit+0x7a>
 8003974:	2300      	movs	r3, #0
 8003976:	69fa      	ldr	r2, [r7, #28]
 8003978:	f002 0203 	and.w	r2, r2, #3
 800397c:	0092      	lsls	r2, r2, #2
 800397e:	4093      	lsls	r3, r2
 8003980:	697a      	ldr	r2, [r7, #20]
 8003982:	429a      	cmp	r2, r3
 8003984:	d132      	bne.n	80039ec <HAL_GPIO_DeInit+0xf0>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	f003 0303 	and.w	r3, r3, #3
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	220f      	movs	r2, #15
 8003990:	fa02 f303 	lsl.w	r3, r2, r3
 8003994:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8003996:	4a31      	ldr	r2, [pc, #196]	; (8003a5c <HAL_GPIO_DeInit+0x160>)
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	089b      	lsrs	r3, r3, #2
 800399c:	3302      	adds	r3, #2
 800399e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	43da      	mvns	r2, r3
 80039a6:	482d      	ldr	r0, [pc, #180]	; (8003a5c <HAL_GPIO_DeInit+0x160>)
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	089b      	lsrs	r3, r3, #2
 80039ac:	400a      	ands	r2, r1
 80039ae:	3302      	adds	r3, #2
 80039b0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80039b4:	4b2e      	ldr	r3, [pc, #184]	; (8003a70 <HAL_GPIO_DeInit+0x174>)
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	43db      	mvns	r3, r3
 80039bc:	492c      	ldr	r1, [pc, #176]	; (8003a70 <HAL_GPIO_DeInit+0x174>)
 80039be:	4013      	ands	r3, r2
 80039c0:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80039c2:	4b2b      	ldr	r3, [pc, #172]	; (8003a70 <HAL_GPIO_DeInit+0x174>)
 80039c4:	685a      	ldr	r2, [r3, #4]
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	43db      	mvns	r3, r3
 80039ca:	4929      	ldr	r1, [pc, #164]	; (8003a70 <HAL_GPIO_DeInit+0x174>)
 80039cc:	4013      	ands	r3, r2
 80039ce:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80039d0:	4b27      	ldr	r3, [pc, #156]	; (8003a70 <HAL_GPIO_DeInit+0x174>)
 80039d2:	689a      	ldr	r2, [r3, #8]
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	43db      	mvns	r3, r3
 80039d8:	4925      	ldr	r1, [pc, #148]	; (8003a70 <HAL_GPIO_DeInit+0x174>)
 80039da:	4013      	ands	r3, r2
 80039dc:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80039de:	4b24      	ldr	r3, [pc, #144]	; (8003a70 <HAL_GPIO_DeInit+0x174>)
 80039e0:	68da      	ldr	r2, [r3, #12]
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	43db      	mvns	r3, r3
 80039e6:	4922      	ldr	r1, [pc, #136]	; (8003a70 <HAL_GPIO_DeInit+0x174>)
 80039e8:	4013      	ands	r3, r2
 80039ea:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	2bff      	cmp	r3, #255	; 0xff
 80039f0:	d801      	bhi.n	80039f6 <HAL_GPIO_DeInit+0xfa>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	e001      	b.n	80039fa <HAL_GPIO_DeInit+0xfe>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	3304      	adds	r3, #4
 80039fa:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	2bff      	cmp	r3, #255	; 0xff
 8003a00:	d802      	bhi.n	8003a08 <HAL_GPIO_DeInit+0x10c>
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	e002      	b.n	8003a0e <HAL_GPIO_DeInit+0x112>
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	3b08      	subs	r3, #8
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	210f      	movs	r1, #15
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	fa01 f303 	lsl.w	r3, r1, r3
 8003a1c:	43db      	mvns	r3, r3
 8003a1e:	401a      	ands	r2, r3
 8003a20:	2104      	movs	r1, #4
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	fa01 f303 	lsl.w	r3, r1, r3
 8003a28:	431a      	orrs	r2, r3
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	68da      	ldr	r2, [r3, #12]
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	43db      	mvns	r3, r3
 8003a36:	401a      	ands	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	60da      	str	r2, [r3, #12]
    }

    position++;
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	3301      	adds	r3, #1
 8003a40:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8003a42:	683a      	ldr	r2, [r7, #0]
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	fa22 f303 	lsr.w	r3, r2, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	f47f af5e 	bne.w	800390c <HAL_GPIO_DeInit+0x10>
  }
}
 8003a50:	bf00      	nop
 8003a52:	3724      	adds	r7, #36	; 0x24
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bc80      	pop	{r7}
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	40010000 	.word	0x40010000
 8003a60:	40010800 	.word	0x40010800
 8003a64:	40010c00 	.word	0x40010c00
 8003a68:	40011000 	.word	0x40011000
 8003a6c:	40011400 	.word	0x40011400
 8003a70:	40010400 	.word	0x40010400

08003a74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	807b      	strh	r3, [r7, #2]
 8003a80:	4613      	mov	r3, r2
 8003a82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a84:	787b      	ldrb	r3, [r7, #1]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d003      	beq.n	8003a92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a8a:	887a      	ldrh	r2, [r7, #2]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003a90:	e003      	b.n	8003a9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003a92:	887b      	ldrh	r3, [r7, #2]
 8003a94:	041a      	lsls	r2, r3, #16
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	611a      	str	r2, [r3, #16]
}
 8003a9a:	bf00      	nop
 8003a9c:	370c      	adds	r7, #12
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bc80      	pop	{r7}
 8003aa2:	4770      	bx	lr

08003aa4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	4603      	mov	r3, r0
 8003aac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003aae:	4b08      	ldr	r3, [pc, #32]	; (8003ad0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ab0:	695a      	ldr	r2, [r3, #20]
 8003ab2:	88fb      	ldrh	r3, [r7, #6]
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d006      	beq.n	8003ac8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003aba:	4a05      	ldr	r2, [pc, #20]	; (8003ad0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003abc:	88fb      	ldrh	r3, [r7, #6]
 8003abe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ac0:	88fb      	ldrh	r3, [r7, #6]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7fc ff42 	bl	800094c <HAL_GPIO_EXTI_Callback>
  }
}
 8003ac8:	bf00      	nop
 8003aca:	3708      	adds	r7, #8
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	40010400 	.word	0x40010400

08003ad4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003ad8:	4b03      	ldr	r3, [pc, #12]	; (8003ae8 <HAL_PWR_EnableBkUpAccess+0x14>)
 8003ada:	2201      	movs	r2, #1
 8003adc:	601a      	str	r2, [r3, #0]
}
 8003ade:	bf00      	nop
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bc80      	pop	{r7}
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	420e0020 	.word	0x420e0020

08003aec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b086      	sub	sp, #24
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d101      	bne.n	8003afe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e26c      	b.n	8003fd8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	f000 8087 	beq.w	8003c1a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b0c:	4b92      	ldr	r3, [pc, #584]	; (8003d58 <HAL_RCC_OscConfig+0x26c>)
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f003 030c 	and.w	r3, r3, #12
 8003b14:	2b04      	cmp	r3, #4
 8003b16:	d00c      	beq.n	8003b32 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003b18:	4b8f      	ldr	r3, [pc, #572]	; (8003d58 <HAL_RCC_OscConfig+0x26c>)
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f003 030c 	and.w	r3, r3, #12
 8003b20:	2b08      	cmp	r3, #8
 8003b22:	d112      	bne.n	8003b4a <HAL_RCC_OscConfig+0x5e>
 8003b24:	4b8c      	ldr	r3, [pc, #560]	; (8003d58 <HAL_RCC_OscConfig+0x26c>)
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b30:	d10b      	bne.n	8003b4a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b32:	4b89      	ldr	r3, [pc, #548]	; (8003d58 <HAL_RCC_OscConfig+0x26c>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d06c      	beq.n	8003c18 <HAL_RCC_OscConfig+0x12c>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d168      	bne.n	8003c18 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e246      	b.n	8003fd8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b52:	d106      	bne.n	8003b62 <HAL_RCC_OscConfig+0x76>
 8003b54:	4b80      	ldr	r3, [pc, #512]	; (8003d58 <HAL_RCC_OscConfig+0x26c>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a7f      	ldr	r2, [pc, #508]	; (8003d58 <HAL_RCC_OscConfig+0x26c>)
 8003b5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b5e:	6013      	str	r3, [r2, #0]
 8003b60:	e02e      	b.n	8003bc0 <HAL_RCC_OscConfig+0xd4>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d10c      	bne.n	8003b84 <HAL_RCC_OscConfig+0x98>
 8003b6a:	4b7b      	ldr	r3, [pc, #492]	; (8003d58 <HAL_RCC_OscConfig+0x26c>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a7a      	ldr	r2, [pc, #488]	; (8003d58 <HAL_RCC_OscConfig+0x26c>)
 8003b70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b74:	6013      	str	r3, [r2, #0]
 8003b76:	4b78      	ldr	r3, [pc, #480]	; (8003d58 <HAL_RCC_OscConfig+0x26c>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a77      	ldr	r2, [pc, #476]	; (8003d58 <HAL_RCC_OscConfig+0x26c>)
 8003b7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b80:	6013      	str	r3, [r2, #0]
 8003b82:	e01d      	b.n	8003bc0 <HAL_RCC_OscConfig+0xd4>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b8c:	d10c      	bne.n	8003ba8 <HAL_RCC_OscConfig+0xbc>
 8003b8e:	4b72      	ldr	r3, [pc, #456]	; (8003d58 <HAL_RCC_OscConfig+0x26c>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a71      	ldr	r2, [pc, #452]	; (8003d58 <HAL_RCC_OscConfig+0x26c>)
 8003b94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b98:	6013      	str	r3, [r2, #0]
 8003b9a:	4b6f      	ldr	r3, [pc, #444]	; (8003d58 <HAL_RCC_OscConfig+0x26c>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a6e      	ldr	r2, [pc, #440]	; (8003d58 <HAL_RCC_OscConfig+0x26c>)
 8003ba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ba4:	6013      	str	r3, [r2, #0]
 8003ba6:	e00b      	b.n	8003bc0 <HAL_RCC_OscConfig+0xd4>
 8003ba8:	4b6b      	ldr	r3, [pc, #428]	; (8003d58 <HAL_RCC_OscConfig+0x26c>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a6a      	ldr	r2, [pc, #424]	; (8003d58 <HAL_RCC_OscConfig+0x26c>)
 8003bae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bb2:	6013      	str	r3, [r2, #0]
 8003bb4:	4b68      	ldr	r3, [pc, #416]	; (8003d58 <HAL_RCC_OscConfig+0x26c>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a67      	ldr	r2, [pc, #412]	; (8003d58 <HAL_RCC_OscConfig+0x26c>)
 8003bba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bbe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d013      	beq.n	8003bf0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc8:	f7ff fbd4 	bl	8003374 <HAL_GetTick>
 8003bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bce:	e008      	b.n	8003be2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bd0:	f7ff fbd0 	bl	8003374 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b64      	cmp	r3, #100	; 0x64
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e1fa      	b.n	8003fd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003be2:	4b5d      	ldr	r3, [pc, #372]	; (8003d58 <HAL_RCC_OscConfig+0x26c>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d0f0      	beq.n	8003bd0 <HAL_RCC_OscConfig+0xe4>
 8003bee:	e014      	b.n	8003c1a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf0:	f7ff fbc0 	bl	8003374 <HAL_GetTick>
 8003bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bf6:	e008      	b.n	8003c0a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bf8:	f7ff fbbc 	bl	8003374 <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	2b64      	cmp	r3, #100	; 0x64
 8003c04:	d901      	bls.n	8003c0a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e1e6      	b.n	8003fd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c0a:	4b53      	ldr	r3, [pc, #332]	; (8003d58 <HAL_RCC_OscConfig+0x26c>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1f0      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x10c>
 8003c16:	e000      	b.n	8003c1a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d063      	beq.n	8003cee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c26:	4b4c      	ldr	r3, [pc, #304]	; (8003d58 <HAL_RCC_OscConfig+0x26c>)
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f003 030c 	and.w	r3, r3, #12
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00b      	beq.n	8003c4a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003c32:	4b49      	ldr	r3, [pc, #292]	; (8003d58 <HAL_RCC_OscConfig+0x26c>)
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f003 030c 	and.w	r3, r3, #12
 8003c3a:	2b08      	cmp	r3, #8
 8003c3c:	d11c      	bne.n	8003c78 <HAL_RCC_OscConfig+0x18c>
 8003c3e:	4b46      	ldr	r3, [pc, #280]	; (8003d58 <HAL_RCC_OscConfig+0x26c>)
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d116      	bne.n	8003c78 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c4a:	4b43      	ldr	r3, [pc, #268]	; (8003d58 <HAL_RCC_OscConfig+0x26c>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d005      	beq.n	8003c62 <HAL_RCC_OscConfig+0x176>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d001      	beq.n	8003c62 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e1ba      	b.n	8003fd8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c62:	4b3d      	ldr	r3, [pc, #244]	; (8003d58 <HAL_RCC_OscConfig+0x26c>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	00db      	lsls	r3, r3, #3
 8003c70:	4939      	ldr	r1, [pc, #228]	; (8003d58 <HAL_RCC_OscConfig+0x26c>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c76:	e03a      	b.n	8003cee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	691b      	ldr	r3, [r3, #16]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d020      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c80:	4b36      	ldr	r3, [pc, #216]	; (8003d5c <HAL_RCC_OscConfig+0x270>)
 8003c82:	2201      	movs	r2, #1
 8003c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c86:	f7ff fb75 	bl	8003374 <HAL_GetTick>
 8003c8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c8c:	e008      	b.n	8003ca0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c8e:	f7ff fb71 	bl	8003374 <HAL_GetTick>
 8003c92:	4602      	mov	r2, r0
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d901      	bls.n	8003ca0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e19b      	b.n	8003fd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ca0:	4b2d      	ldr	r3, [pc, #180]	; (8003d58 <HAL_RCC_OscConfig+0x26c>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0302 	and.w	r3, r3, #2
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d0f0      	beq.n	8003c8e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cac:	4b2a      	ldr	r3, [pc, #168]	; (8003d58 <HAL_RCC_OscConfig+0x26c>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	695b      	ldr	r3, [r3, #20]
 8003cb8:	00db      	lsls	r3, r3, #3
 8003cba:	4927      	ldr	r1, [pc, #156]	; (8003d58 <HAL_RCC_OscConfig+0x26c>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	600b      	str	r3, [r1, #0]
 8003cc0:	e015      	b.n	8003cee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cc2:	4b26      	ldr	r3, [pc, #152]	; (8003d5c <HAL_RCC_OscConfig+0x270>)
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc8:	f7ff fb54 	bl	8003374 <HAL_GetTick>
 8003ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cce:	e008      	b.n	8003ce2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cd0:	f7ff fb50 	bl	8003374 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e17a      	b.n	8003fd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ce2:	4b1d      	ldr	r3, [pc, #116]	; (8003d58 <HAL_RCC_OscConfig+0x26c>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1f0      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0308 	and.w	r3, r3, #8
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d03a      	beq.n	8003d70 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	699b      	ldr	r3, [r3, #24]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d019      	beq.n	8003d36 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d02:	4b17      	ldr	r3, [pc, #92]	; (8003d60 <HAL_RCC_OscConfig+0x274>)
 8003d04:	2201      	movs	r2, #1
 8003d06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d08:	f7ff fb34 	bl	8003374 <HAL_GetTick>
 8003d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d0e:	e008      	b.n	8003d22 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d10:	f7ff fb30 	bl	8003374 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d901      	bls.n	8003d22 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e15a      	b.n	8003fd8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d22:	4b0d      	ldr	r3, [pc, #52]	; (8003d58 <HAL_RCC_OscConfig+0x26c>)
 8003d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d0f0      	beq.n	8003d10 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003d2e:	2001      	movs	r0, #1
 8003d30:	f000 fac6 	bl	80042c0 <RCC_Delay>
 8003d34:	e01c      	b.n	8003d70 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d36:	4b0a      	ldr	r3, [pc, #40]	; (8003d60 <HAL_RCC_OscConfig+0x274>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d3c:	f7ff fb1a 	bl	8003374 <HAL_GetTick>
 8003d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d42:	e00f      	b.n	8003d64 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d44:	f7ff fb16 	bl	8003374 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d908      	bls.n	8003d64 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e140      	b.n	8003fd8 <HAL_RCC_OscConfig+0x4ec>
 8003d56:	bf00      	nop
 8003d58:	40021000 	.word	0x40021000
 8003d5c:	42420000 	.word	0x42420000
 8003d60:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d64:	4b9e      	ldr	r3, [pc, #632]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d68:	f003 0302 	and.w	r3, r3, #2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d1e9      	bne.n	8003d44 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0304 	and.w	r3, r3, #4
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	f000 80a6 	beq.w	8003eca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d82:	4b97      	ldr	r3, [pc, #604]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003d84:	69db      	ldr	r3, [r3, #28]
 8003d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d10d      	bne.n	8003daa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d8e:	4b94      	ldr	r3, [pc, #592]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003d90:	69db      	ldr	r3, [r3, #28]
 8003d92:	4a93      	ldr	r2, [pc, #588]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d98:	61d3      	str	r3, [r2, #28]
 8003d9a:	4b91      	ldr	r3, [pc, #580]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003d9c:	69db      	ldr	r3, [r3, #28]
 8003d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003da2:	60bb      	str	r3, [r7, #8]
 8003da4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003da6:	2301      	movs	r3, #1
 8003da8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003daa:	4b8e      	ldr	r3, [pc, #568]	; (8003fe4 <HAL_RCC_OscConfig+0x4f8>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d118      	bne.n	8003de8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003db6:	4b8b      	ldr	r3, [pc, #556]	; (8003fe4 <HAL_RCC_OscConfig+0x4f8>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a8a      	ldr	r2, [pc, #552]	; (8003fe4 <HAL_RCC_OscConfig+0x4f8>)
 8003dbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dc2:	f7ff fad7 	bl	8003374 <HAL_GetTick>
 8003dc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dc8:	e008      	b.n	8003ddc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dca:	f7ff fad3 	bl	8003374 <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	2b64      	cmp	r3, #100	; 0x64
 8003dd6:	d901      	bls.n	8003ddc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e0fd      	b.n	8003fd8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ddc:	4b81      	ldr	r3, [pc, #516]	; (8003fe4 <HAL_RCC_OscConfig+0x4f8>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d0f0      	beq.n	8003dca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d106      	bne.n	8003dfe <HAL_RCC_OscConfig+0x312>
 8003df0:	4b7b      	ldr	r3, [pc, #492]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003df2:	6a1b      	ldr	r3, [r3, #32]
 8003df4:	4a7a      	ldr	r2, [pc, #488]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003df6:	f043 0301 	orr.w	r3, r3, #1
 8003dfa:	6213      	str	r3, [r2, #32]
 8003dfc:	e02d      	b.n	8003e5a <HAL_RCC_OscConfig+0x36e>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10c      	bne.n	8003e20 <HAL_RCC_OscConfig+0x334>
 8003e06:	4b76      	ldr	r3, [pc, #472]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	4a75      	ldr	r2, [pc, #468]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003e0c:	f023 0301 	bic.w	r3, r3, #1
 8003e10:	6213      	str	r3, [r2, #32]
 8003e12:	4b73      	ldr	r3, [pc, #460]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	4a72      	ldr	r2, [pc, #456]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003e18:	f023 0304 	bic.w	r3, r3, #4
 8003e1c:	6213      	str	r3, [r2, #32]
 8003e1e:	e01c      	b.n	8003e5a <HAL_RCC_OscConfig+0x36e>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	2b05      	cmp	r3, #5
 8003e26:	d10c      	bne.n	8003e42 <HAL_RCC_OscConfig+0x356>
 8003e28:	4b6d      	ldr	r3, [pc, #436]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003e2a:	6a1b      	ldr	r3, [r3, #32]
 8003e2c:	4a6c      	ldr	r2, [pc, #432]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003e2e:	f043 0304 	orr.w	r3, r3, #4
 8003e32:	6213      	str	r3, [r2, #32]
 8003e34:	4b6a      	ldr	r3, [pc, #424]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003e36:	6a1b      	ldr	r3, [r3, #32]
 8003e38:	4a69      	ldr	r2, [pc, #420]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003e3a:	f043 0301 	orr.w	r3, r3, #1
 8003e3e:	6213      	str	r3, [r2, #32]
 8003e40:	e00b      	b.n	8003e5a <HAL_RCC_OscConfig+0x36e>
 8003e42:	4b67      	ldr	r3, [pc, #412]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003e44:	6a1b      	ldr	r3, [r3, #32]
 8003e46:	4a66      	ldr	r2, [pc, #408]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003e48:	f023 0301 	bic.w	r3, r3, #1
 8003e4c:	6213      	str	r3, [r2, #32]
 8003e4e:	4b64      	ldr	r3, [pc, #400]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	4a63      	ldr	r2, [pc, #396]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003e54:	f023 0304 	bic.w	r3, r3, #4
 8003e58:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d015      	beq.n	8003e8e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e62:	f7ff fa87 	bl	8003374 <HAL_GetTick>
 8003e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e68:	e00a      	b.n	8003e80 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e6a:	f7ff fa83 	bl	8003374 <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d901      	bls.n	8003e80 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e0ab      	b.n	8003fd8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e80:	4b57      	ldr	r3, [pc, #348]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003e82:	6a1b      	ldr	r3, [r3, #32]
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d0ee      	beq.n	8003e6a <HAL_RCC_OscConfig+0x37e>
 8003e8c:	e014      	b.n	8003eb8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e8e:	f7ff fa71 	bl	8003374 <HAL_GetTick>
 8003e92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e94:	e00a      	b.n	8003eac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e96:	f7ff fa6d 	bl	8003374 <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d901      	bls.n	8003eac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e095      	b.n	8003fd8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eac:	4b4c      	ldr	r3, [pc, #304]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003eae:	6a1b      	ldr	r3, [r3, #32]
 8003eb0:	f003 0302 	and.w	r3, r3, #2
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d1ee      	bne.n	8003e96 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003eb8:	7dfb      	ldrb	r3, [r7, #23]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d105      	bne.n	8003eca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ebe:	4b48      	ldr	r3, [pc, #288]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003ec0:	69db      	ldr	r3, [r3, #28]
 8003ec2:	4a47      	ldr	r2, [pc, #284]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003ec4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ec8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	69db      	ldr	r3, [r3, #28]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	f000 8081 	beq.w	8003fd6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ed4:	4b42      	ldr	r3, [pc, #264]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f003 030c 	and.w	r3, r3, #12
 8003edc:	2b08      	cmp	r3, #8
 8003ede:	d061      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	69db      	ldr	r3, [r3, #28]
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d146      	bne.n	8003f76 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ee8:	4b3f      	ldr	r3, [pc, #252]	; (8003fe8 <HAL_RCC_OscConfig+0x4fc>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eee:	f7ff fa41 	bl	8003374 <HAL_GetTick>
 8003ef2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ef4:	e008      	b.n	8003f08 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ef6:	f7ff fa3d 	bl	8003374 <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d901      	bls.n	8003f08 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e067      	b.n	8003fd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f08:	4b35      	ldr	r3, [pc, #212]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d1f0      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a1b      	ldr	r3, [r3, #32]
 8003f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f1c:	d108      	bne.n	8003f30 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003f1e:	4b30      	ldr	r3, [pc, #192]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	492d      	ldr	r1, [pc, #180]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f30:	4b2b      	ldr	r3, [pc, #172]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a19      	ldr	r1, [r3, #32]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f40:	430b      	orrs	r3, r1
 8003f42:	4927      	ldr	r1, [pc, #156]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f48:	4b27      	ldr	r3, [pc, #156]	; (8003fe8 <HAL_RCC_OscConfig+0x4fc>)
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f4e:	f7ff fa11 	bl	8003374 <HAL_GetTick>
 8003f52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f54:	e008      	b.n	8003f68 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f56:	f7ff fa0d 	bl	8003374 <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d901      	bls.n	8003f68 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e037      	b.n	8003fd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f68:	4b1d      	ldr	r3, [pc, #116]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d0f0      	beq.n	8003f56 <HAL_RCC_OscConfig+0x46a>
 8003f74:	e02f      	b.n	8003fd6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f76:	4b1c      	ldr	r3, [pc, #112]	; (8003fe8 <HAL_RCC_OscConfig+0x4fc>)
 8003f78:	2200      	movs	r2, #0
 8003f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f7c:	f7ff f9fa 	bl	8003374 <HAL_GetTick>
 8003f80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f82:	e008      	b.n	8003f96 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f84:	f7ff f9f6 	bl	8003374 <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e020      	b.n	8003fd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f96:	4b12      	ldr	r3, [pc, #72]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1f0      	bne.n	8003f84 <HAL_RCC_OscConfig+0x498>
 8003fa2:	e018      	b.n	8003fd6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	69db      	ldr	r3, [r3, #28]
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d101      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e013      	b.n	8003fd8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003fb0:	4b0b      	ldr	r3, [pc, #44]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a1b      	ldr	r3, [r3, #32]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d106      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d001      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e000      	b.n	8003fd8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3718      	adds	r7, #24
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	40021000 	.word	0x40021000
 8003fe4:	40007000 	.word	0x40007000
 8003fe8:	42420060 	.word	0x42420060

08003fec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d101      	bne.n	8004000 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e0d0      	b.n	80041a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004000:	4b6a      	ldr	r3, [pc, #424]	; (80041ac <HAL_RCC_ClockConfig+0x1c0>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0307 	and.w	r3, r3, #7
 8004008:	683a      	ldr	r2, [r7, #0]
 800400a:	429a      	cmp	r2, r3
 800400c:	d910      	bls.n	8004030 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800400e:	4b67      	ldr	r3, [pc, #412]	; (80041ac <HAL_RCC_ClockConfig+0x1c0>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f023 0207 	bic.w	r2, r3, #7
 8004016:	4965      	ldr	r1, [pc, #404]	; (80041ac <HAL_RCC_ClockConfig+0x1c0>)
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	4313      	orrs	r3, r2
 800401c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800401e:	4b63      	ldr	r3, [pc, #396]	; (80041ac <HAL_RCC_ClockConfig+0x1c0>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0307 	and.w	r3, r3, #7
 8004026:	683a      	ldr	r2, [r7, #0]
 8004028:	429a      	cmp	r2, r3
 800402a:	d001      	beq.n	8004030 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e0b8      	b.n	80041a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0302 	and.w	r3, r3, #2
 8004038:	2b00      	cmp	r3, #0
 800403a:	d020      	beq.n	800407e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0304 	and.w	r3, r3, #4
 8004044:	2b00      	cmp	r3, #0
 8004046:	d005      	beq.n	8004054 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004048:	4b59      	ldr	r3, [pc, #356]	; (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	4a58      	ldr	r2, [pc, #352]	; (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 800404e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004052:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0308 	and.w	r3, r3, #8
 800405c:	2b00      	cmp	r3, #0
 800405e:	d005      	beq.n	800406c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004060:	4b53      	ldr	r3, [pc, #332]	; (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	4a52      	ldr	r2, [pc, #328]	; (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004066:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800406a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800406c:	4b50      	ldr	r3, [pc, #320]	; (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	494d      	ldr	r1, [pc, #308]	; (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 800407a:	4313      	orrs	r3, r2
 800407c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	2b00      	cmp	r3, #0
 8004088:	d040      	beq.n	800410c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	2b01      	cmp	r3, #1
 8004090:	d107      	bne.n	80040a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004092:	4b47      	ldr	r3, [pc, #284]	; (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d115      	bne.n	80040ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e07f      	b.n	80041a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d107      	bne.n	80040ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040aa:	4b41      	ldr	r3, [pc, #260]	; (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d109      	bne.n	80040ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e073      	b.n	80041a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040ba:	4b3d      	ldr	r3, [pc, #244]	; (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0302 	and.w	r3, r3, #2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d101      	bne.n	80040ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e06b      	b.n	80041a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040ca:	4b39      	ldr	r3, [pc, #228]	; (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f023 0203 	bic.w	r2, r3, #3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	4936      	ldr	r1, [pc, #216]	; (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040dc:	f7ff f94a 	bl	8003374 <HAL_GetTick>
 80040e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040e2:	e00a      	b.n	80040fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040e4:	f7ff f946 	bl	8003374 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d901      	bls.n	80040fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e053      	b.n	80041a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040fa:	4b2d      	ldr	r3, [pc, #180]	; (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	f003 020c 	and.w	r2, r3, #12
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	429a      	cmp	r2, r3
 800410a:	d1eb      	bne.n	80040e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800410c:	4b27      	ldr	r3, [pc, #156]	; (80041ac <HAL_RCC_ClockConfig+0x1c0>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0307 	and.w	r3, r3, #7
 8004114:	683a      	ldr	r2, [r7, #0]
 8004116:	429a      	cmp	r2, r3
 8004118:	d210      	bcs.n	800413c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800411a:	4b24      	ldr	r3, [pc, #144]	; (80041ac <HAL_RCC_ClockConfig+0x1c0>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f023 0207 	bic.w	r2, r3, #7
 8004122:	4922      	ldr	r1, [pc, #136]	; (80041ac <HAL_RCC_ClockConfig+0x1c0>)
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	4313      	orrs	r3, r2
 8004128:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800412a:	4b20      	ldr	r3, [pc, #128]	; (80041ac <HAL_RCC_ClockConfig+0x1c0>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0307 	and.w	r3, r3, #7
 8004132:	683a      	ldr	r2, [r7, #0]
 8004134:	429a      	cmp	r2, r3
 8004136:	d001      	beq.n	800413c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e032      	b.n	80041a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0304 	and.w	r3, r3, #4
 8004144:	2b00      	cmp	r3, #0
 8004146:	d008      	beq.n	800415a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004148:	4b19      	ldr	r3, [pc, #100]	; (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	4916      	ldr	r1, [pc, #88]	; (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004156:	4313      	orrs	r3, r2
 8004158:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0308 	and.w	r3, r3, #8
 8004162:	2b00      	cmp	r3, #0
 8004164:	d009      	beq.n	800417a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004166:	4b12      	ldr	r3, [pc, #72]	; (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	00db      	lsls	r3, r3, #3
 8004174:	490e      	ldr	r1, [pc, #56]	; (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004176:	4313      	orrs	r3, r2
 8004178:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800417a:	f000 f821 	bl	80041c0 <HAL_RCC_GetSysClockFreq>
 800417e:	4601      	mov	r1, r0
 8004180:	4b0b      	ldr	r3, [pc, #44]	; (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	091b      	lsrs	r3, r3, #4
 8004186:	f003 030f 	and.w	r3, r3, #15
 800418a:	4a0a      	ldr	r2, [pc, #40]	; (80041b4 <HAL_RCC_ClockConfig+0x1c8>)
 800418c:	5cd3      	ldrb	r3, [r2, r3]
 800418e:	fa21 f303 	lsr.w	r3, r1, r3
 8004192:	4a09      	ldr	r2, [pc, #36]	; (80041b8 <HAL_RCC_ClockConfig+0x1cc>)
 8004194:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004196:	4b09      	ldr	r3, [pc, #36]	; (80041bc <HAL_RCC_ClockConfig+0x1d0>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4618      	mov	r0, r3
 800419c:	f7ff f8a8 	bl	80032f0 <HAL_InitTick>

  return HAL_OK;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3710      	adds	r7, #16
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	40022000 	.word	0x40022000
 80041b0:	40021000 	.word	0x40021000
 80041b4:	08006bbc 	.word	0x08006bbc
 80041b8:	20000004 	.word	0x20000004
 80041bc:	20000008 	.word	0x20000008

080041c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041c0:	b490      	push	{r4, r7}
 80041c2:	b08a      	sub	sp, #40	; 0x28
 80041c4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80041c6:	4b2a      	ldr	r3, [pc, #168]	; (8004270 <HAL_RCC_GetSysClockFreq+0xb0>)
 80041c8:	1d3c      	adds	r4, r7, #4
 80041ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80041cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80041d0:	4b28      	ldr	r3, [pc, #160]	; (8004274 <HAL_RCC_GetSysClockFreq+0xb4>)
 80041d2:	881b      	ldrh	r3, [r3, #0]
 80041d4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80041d6:	2300      	movs	r3, #0
 80041d8:	61fb      	str	r3, [r7, #28]
 80041da:	2300      	movs	r3, #0
 80041dc:	61bb      	str	r3, [r7, #24]
 80041de:	2300      	movs	r3, #0
 80041e0:	627b      	str	r3, [r7, #36]	; 0x24
 80041e2:	2300      	movs	r3, #0
 80041e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80041e6:	2300      	movs	r3, #0
 80041e8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80041ea:	4b23      	ldr	r3, [pc, #140]	; (8004278 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	f003 030c 	and.w	r3, r3, #12
 80041f6:	2b04      	cmp	r3, #4
 80041f8:	d002      	beq.n	8004200 <HAL_RCC_GetSysClockFreq+0x40>
 80041fa:	2b08      	cmp	r3, #8
 80041fc:	d003      	beq.n	8004206 <HAL_RCC_GetSysClockFreq+0x46>
 80041fe:	e02d      	b.n	800425c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004200:	4b1e      	ldr	r3, [pc, #120]	; (800427c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004202:	623b      	str	r3, [r7, #32]
      break;
 8004204:	e02d      	b.n	8004262 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	0c9b      	lsrs	r3, r3, #18
 800420a:	f003 030f 	and.w	r3, r3, #15
 800420e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004212:	4413      	add	r3, r2
 8004214:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004218:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d013      	beq.n	800424c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004224:	4b14      	ldr	r3, [pc, #80]	; (8004278 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	0c5b      	lsrs	r3, r3, #17
 800422a:	f003 0301 	and.w	r3, r3, #1
 800422e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004232:	4413      	add	r3, r2
 8004234:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004238:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	4a0f      	ldr	r2, [pc, #60]	; (800427c <HAL_RCC_GetSysClockFreq+0xbc>)
 800423e:	fb02 f203 	mul.w	r2, r2, r3
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	fbb2 f3f3 	udiv	r3, r2, r3
 8004248:	627b      	str	r3, [r7, #36]	; 0x24
 800424a:	e004      	b.n	8004256 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	4a0c      	ldr	r2, [pc, #48]	; (8004280 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004250:	fb02 f303 	mul.w	r3, r2, r3
 8004254:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004258:	623b      	str	r3, [r7, #32]
      break;
 800425a:	e002      	b.n	8004262 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800425c:	4b07      	ldr	r3, [pc, #28]	; (800427c <HAL_RCC_GetSysClockFreq+0xbc>)
 800425e:	623b      	str	r3, [r7, #32]
      break;
 8004260:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004262:	6a3b      	ldr	r3, [r7, #32]
}
 8004264:	4618      	mov	r0, r3
 8004266:	3728      	adds	r7, #40	; 0x28
 8004268:	46bd      	mov	sp, r7
 800426a:	bc90      	pop	{r4, r7}
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	08006b94 	.word	0x08006b94
 8004274:	08006ba4 	.word	0x08006ba4
 8004278:	40021000 	.word	0x40021000
 800427c:	007a1200 	.word	0x007a1200
 8004280:	003d0900 	.word	0x003d0900

08004284 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004284:	b480      	push	{r7}
 8004286:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004288:	4b02      	ldr	r3, [pc, #8]	; (8004294 <HAL_RCC_GetHCLKFreq+0x10>)
 800428a:	681b      	ldr	r3, [r3, #0]
}
 800428c:	4618      	mov	r0, r3
 800428e:	46bd      	mov	sp, r7
 8004290:	bc80      	pop	{r7}
 8004292:	4770      	bx	lr
 8004294:	20000004 	.word	0x20000004

08004298 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800429c:	f7ff fff2 	bl	8004284 <HAL_RCC_GetHCLKFreq>
 80042a0:	4601      	mov	r1, r0
 80042a2:	4b05      	ldr	r3, [pc, #20]	; (80042b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	0adb      	lsrs	r3, r3, #11
 80042a8:	f003 0307 	and.w	r3, r3, #7
 80042ac:	4a03      	ldr	r2, [pc, #12]	; (80042bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80042ae:	5cd3      	ldrb	r3, [r2, r3]
 80042b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	40021000 	.word	0x40021000
 80042bc:	08006bcc 	.word	0x08006bcc

080042c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b085      	sub	sp, #20
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80042c8:	4b0a      	ldr	r3, [pc, #40]	; (80042f4 <RCC_Delay+0x34>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a0a      	ldr	r2, [pc, #40]	; (80042f8 <RCC_Delay+0x38>)
 80042ce:	fba2 2303 	umull	r2, r3, r2, r3
 80042d2:	0a5b      	lsrs	r3, r3, #9
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	fb02 f303 	mul.w	r3, r2, r3
 80042da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80042dc:	bf00      	nop
  }
  while (Delay --);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	1e5a      	subs	r2, r3, #1
 80042e2:	60fa      	str	r2, [r7, #12]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1f9      	bne.n	80042dc <RCC_Delay+0x1c>
}
 80042e8:	bf00      	nop
 80042ea:	3714      	adds	r7, #20
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bc80      	pop	{r7}
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	20000004 	.word	0x20000004
 80042f8:	10624dd3 	.word	0x10624dd3

080042fc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b086      	sub	sp, #24
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004304:	2300      	movs	r3, #0
 8004306:	613b      	str	r3, [r7, #16]
 8004308:	2300      	movs	r3, #0
 800430a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0301 	and.w	r3, r3, #1
 8004314:	2b00      	cmp	r3, #0
 8004316:	d07d      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004318:	2300      	movs	r3, #0
 800431a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800431c:	4b4f      	ldr	r3, [pc, #316]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800431e:	69db      	ldr	r3, [r3, #28]
 8004320:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d10d      	bne.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004328:	4b4c      	ldr	r3, [pc, #304]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800432a:	69db      	ldr	r3, [r3, #28]
 800432c:	4a4b      	ldr	r2, [pc, #300]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800432e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004332:	61d3      	str	r3, [r2, #28]
 8004334:	4b49      	ldr	r3, [pc, #292]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004336:	69db      	ldr	r3, [r3, #28]
 8004338:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800433c:	60bb      	str	r3, [r7, #8]
 800433e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004340:	2301      	movs	r3, #1
 8004342:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004344:	4b46      	ldr	r3, [pc, #280]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800434c:	2b00      	cmp	r3, #0
 800434e:	d118      	bne.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004350:	4b43      	ldr	r3, [pc, #268]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a42      	ldr	r2, [pc, #264]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004356:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800435a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800435c:	f7ff f80a 	bl	8003374 <HAL_GetTick>
 8004360:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004362:	e008      	b.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004364:	f7ff f806 	bl	8003374 <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	2b64      	cmp	r3, #100	; 0x64
 8004370:	d901      	bls.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e06d      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004376:	4b3a      	ldr	r3, [pc, #232]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800437e:	2b00      	cmp	r3, #0
 8004380:	d0f0      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004382:	4b36      	ldr	r3, [pc, #216]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800438a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d02e      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800439a:	68fa      	ldr	r2, [r7, #12]
 800439c:	429a      	cmp	r2, r3
 800439e:	d027      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043a0:	4b2e      	ldr	r3, [pc, #184]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043a2:	6a1b      	ldr	r3, [r3, #32]
 80043a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043a8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80043aa:	4b2e      	ldr	r3, [pc, #184]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80043ac:	2201      	movs	r2, #1
 80043ae:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043b0:	4b2c      	ldr	r3, [pc, #176]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80043b2:	2200      	movs	r2, #0
 80043b4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80043b6:	4a29      	ldr	r2, [pc, #164]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f003 0301 	and.w	r3, r3, #1
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d014      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043c6:	f7fe ffd5 	bl	8003374 <HAL_GetTick>
 80043ca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043cc:	e00a      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043ce:	f7fe ffd1 	bl	8003374 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80043dc:	4293      	cmp	r3, r2
 80043de:	d901      	bls.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e036      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043e4:	4b1d      	ldr	r3, [pc, #116]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043e6:	6a1b      	ldr	r3, [r3, #32]
 80043e8:	f003 0302 	and.w	r3, r3, #2
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d0ee      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043f0:	4b1a      	ldr	r3, [pc, #104]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043f2:	6a1b      	ldr	r3, [r3, #32]
 80043f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	4917      	ldr	r1, [pc, #92]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004402:	7dfb      	ldrb	r3, [r7, #23]
 8004404:	2b01      	cmp	r3, #1
 8004406:	d105      	bne.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004408:	4b14      	ldr	r3, [pc, #80]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800440a:	69db      	ldr	r3, [r3, #28]
 800440c:	4a13      	ldr	r2, [pc, #76]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800440e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004412:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0302 	and.w	r3, r3, #2
 800441c:	2b00      	cmp	r3, #0
 800441e:	d008      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004420:	4b0e      	ldr	r3, [pc, #56]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	490b      	ldr	r1, [pc, #44]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800442e:	4313      	orrs	r3, r2
 8004430:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0310 	and.w	r3, r3, #16
 800443a:	2b00      	cmp	r3, #0
 800443c:	d008      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800443e:	4b07      	ldr	r3, [pc, #28]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	4904      	ldr	r1, [pc, #16]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800444c:	4313      	orrs	r3, r2
 800444e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3718      	adds	r7, #24
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	40021000 	.word	0x40021000
 8004460:	40007000 	.word	0x40007000
 8004464:	42420440 	.word	0x42420440

08004468 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004468:	b590      	push	{r4, r7, lr}
 800446a:	b08d      	sub	sp, #52	; 0x34
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004470:	4b55      	ldr	r3, [pc, #340]	; (80045c8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004472:	f107 040c 	add.w	r4, r7, #12
 8004476:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004478:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800447c:	4b53      	ldr	r3, [pc, #332]	; (80045cc <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800447e:	881b      	ldrh	r3, [r3, #0]
 8004480:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004482:	2300      	movs	r3, #0
 8004484:	627b      	str	r3, [r7, #36]	; 0x24
 8004486:	2300      	movs	r3, #0
 8004488:	62fb      	str	r3, [r7, #44]	; 0x2c
 800448a:	2300      	movs	r3, #0
 800448c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800448e:	2300      	movs	r3, #0
 8004490:	61fb      	str	r3, [r7, #28]
 8004492:	2300      	movs	r3, #0
 8004494:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2b02      	cmp	r3, #2
 800449a:	d07f      	beq.n	800459c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800449c:	2b10      	cmp	r3, #16
 800449e:	d002      	beq.n	80044a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d048      	beq.n	8004536 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80044a4:	e08b      	b.n	80045be <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 80044a6:	4b4a      	ldr	r3, [pc, #296]	; (80045d0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80044ac:	4b48      	ldr	r3, [pc, #288]	; (80045d0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d07f      	beq.n	80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	0c9b      	lsrs	r3, r3, #18
 80044bc:	f003 030f 	and.w	r3, r3, #15
 80044c0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80044c4:	4413      	add	r3, r2
 80044c6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80044ca:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d018      	beq.n	8004508 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80044d6:	4b3e      	ldr	r3, [pc, #248]	; (80045d0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	0c5b      	lsrs	r3, r3, #17
 80044dc:	f003 0301 	and.w	r3, r3, #1
 80044e0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80044e4:	4413      	add	r3, r2
 80044e6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80044ea:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00d      	beq.n	8004512 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80044f6:	4a37      	ldr	r2, [pc, #220]	; (80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80044f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fa:	fbb2 f2f3 	udiv	r2, r2, r3
 80044fe:	6a3b      	ldr	r3, [r7, #32]
 8004500:	fb02 f303 	mul.w	r3, r2, r3
 8004504:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004506:	e004      	b.n	8004512 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004508:	6a3b      	ldr	r3, [r7, #32]
 800450a:	4a33      	ldr	r2, [pc, #204]	; (80045d8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800450c:	fb02 f303 	mul.w	r3, r2, r3
 8004510:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004512:	4b2f      	ldr	r3, [pc, #188]	; (80045d0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800451a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800451e:	d102      	bne.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8004520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004522:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004524:	e048      	b.n	80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8004526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004528:	005b      	lsls	r3, r3, #1
 800452a:	4a2c      	ldr	r2, [pc, #176]	; (80045dc <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 800452c:	fba2 2303 	umull	r2, r3, r2, r3
 8004530:	085b      	lsrs	r3, r3, #1
 8004532:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004534:	e040      	b.n	80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8004536:	4b26      	ldr	r3, [pc, #152]	; (80045d0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004538:	6a1b      	ldr	r3, [r3, #32]
 800453a:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004542:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004546:	d108      	bne.n	800455a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b00      	cmp	r3, #0
 8004550:	d003      	beq.n	800455a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8004552:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004556:	62bb      	str	r3, [r7, #40]	; 0x28
 8004558:	e01f      	b.n	800459a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004560:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004564:	d109      	bne.n	800457a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8004566:	4b1a      	ldr	r3, [pc, #104]	; (80045d0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	2b00      	cmp	r3, #0
 8004570:	d003      	beq.n	800457a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8004572:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004576:	62bb      	str	r3, [r7, #40]	; 0x28
 8004578:	e00f      	b.n	800459a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004580:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004584:	d11a      	bne.n	80045bc <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8004586:	4b12      	ldr	r3, [pc, #72]	; (80045d0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d014      	beq.n	80045bc <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8004592:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004596:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004598:	e010      	b.n	80045bc <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800459a:	e00f      	b.n	80045bc <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800459c:	f7ff fe7c 	bl	8004298 <HAL_RCC_GetPCLK2Freq>
 80045a0:	4602      	mov	r2, r0
 80045a2:	4b0b      	ldr	r3, [pc, #44]	; (80045d0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	0b9b      	lsrs	r3, r3, #14
 80045a8:	f003 0303 	and.w	r3, r3, #3
 80045ac:	3301      	adds	r3, #1
 80045ae:	005b      	lsls	r3, r3, #1
 80045b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045b4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80045b6:	e002      	b.n	80045be <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80045b8:	bf00      	nop
 80045ba:	e000      	b.n	80045be <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80045bc:	bf00      	nop
    }
  }
  return (frequency);
 80045be:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3734      	adds	r7, #52	; 0x34
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd90      	pop	{r4, r7, pc}
 80045c8:	08006ba8 	.word	0x08006ba8
 80045cc:	08006bb8 	.word	0x08006bb8
 80045d0:	40021000 	.word	0x40021000
 80045d4:	007a1200 	.word	0x007a1200
 80045d8:	003d0900 	.word	0x003d0900
 80045dc:	aaaaaaab 	.word	0xaaaaaaab

080045e0 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80045e8:	2300      	movs	r3, #0
 80045ea:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d101      	bne.n	80045f6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e084      	b.n	8004700 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	7c5b      	ldrb	r3, [r3, #17]
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d105      	bne.n	800460c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f7fc fc40 	bl	8000e8c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2202      	movs	r2, #2
 8004610:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 fbd0 	bl	8004db8 <HAL_RTC_WaitForSynchro>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d004      	beq.n	8004628 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2204      	movs	r2, #4
 8004622:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e06b      	b.n	8004700 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 fc89 	bl	8004f40 <RTC_EnterInitMode>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d004      	beq.n	800463e <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2204      	movs	r2, #4
 8004638:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e060      	b.n	8004700 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	685a      	ldr	r2, [r3, #4]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f022 0207 	bic.w	r2, r2, #7
 800464c:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d005      	beq.n	8004662 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8004656:	4b2c      	ldr	r3, [pc, #176]	; (8004708 <HAL_RTC_Init+0x128>)
 8004658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465a:	4a2b      	ldr	r2, [pc, #172]	; (8004708 <HAL_RTC_Init+0x128>)
 800465c:	f023 0301 	bic.w	r3, r3, #1
 8004660:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8004662:	4b29      	ldr	r3, [pc, #164]	; (8004708 <HAL_RTC_Init+0x128>)
 8004664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004666:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	4926      	ldr	r1, [pc, #152]	; (8004708 <HAL_RTC_Init+0x128>)
 8004670:	4313      	orrs	r3, r2
 8004672:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800467c:	d003      	beq.n	8004686 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	60fb      	str	r3, [r7, #12]
 8004684:	e00e      	b.n	80046a4 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8004686:	2001      	movs	r0, #1
 8004688:	f7ff feee 	bl	8004468 <HAL_RCCEx_GetPeriphCLKFreq>
 800468c:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d104      	bne.n	800469e <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2204      	movs	r2, #4
 8004698:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e030      	b.n	8004700 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	3b01      	subs	r3, #1
 80046a2:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f023 010f 	bic.w	r1, r3, #15
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	0c1a      	lsrs	r2, r3, #16
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	430a      	orrs	r2, r1
 80046b8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	0c1b      	lsrs	r3, r3, #16
 80046c2:	041b      	lsls	r3, r3, #16
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	b291      	uxth	r1, r2
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	6812      	ldr	r2, [r2, #0]
 80046cc:	430b      	orrs	r3, r1
 80046ce:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f000 fc5d 	bl	8004f90 <RTC_ExitInitMode>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d004      	beq.n	80046e6 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2204      	movs	r2, #4
 80046e0:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e00c      	b.n	8004700 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2201      	movs	r2, #1
 80046f6:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80046fe:	2300      	movs	r3, #0
  }
}
 8004700:	4618      	mov	r0, r3
 8004702:	3710      	adds	r7, #16
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}
 8004708:	40006c00 	.word	0x40006c00

0800470c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800470c:	b590      	push	{r4, r7, lr}
 800470e:	b087      	sub	sp, #28
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8004718:	2300      	movs	r3, #0
 800471a:	617b      	str	r3, [r7, #20]
 800471c:	2300      	movs	r3, #0
 800471e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d002      	beq.n	800472c <HAL_RTC_SetTime+0x20>
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d101      	bne.n	8004730 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e080      	b.n	8004832 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	7c1b      	ldrb	r3, [r3, #16]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d101      	bne.n	800473c <HAL_RTC_SetTime+0x30>
 8004738:	2302      	movs	r3, #2
 800473a:	e07a      	b.n	8004832 <HAL_RTC_SetTime+0x126>
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2201      	movs	r2, #1
 8004740:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2202      	movs	r2, #2
 8004746:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d113      	bne.n	8004776 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	461a      	mov	r2, r3
 8004754:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004758:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	785b      	ldrb	r3, [r3, #1]
 8004760:	4619      	mov	r1, r3
 8004762:	460b      	mov	r3, r1
 8004764:	011b      	lsls	r3, r3, #4
 8004766:	1a5b      	subs	r3, r3, r1
 8004768:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800476a:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 800476c:	68ba      	ldr	r2, [r7, #8]
 800476e:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004770:	4413      	add	r3, r2
 8004772:	617b      	str	r3, [r7, #20]
 8004774:	e01e      	b.n	80047b4 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	4618      	mov	r0, r3
 800477c:	f000 fc4d 	bl	800501a <RTC_Bcd2ToByte>
 8004780:	4603      	mov	r3, r0
 8004782:	461a      	mov	r2, r3
 8004784:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004788:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	785b      	ldrb	r3, [r3, #1]
 8004790:	4618      	mov	r0, r3
 8004792:	f000 fc42 	bl	800501a <RTC_Bcd2ToByte>
 8004796:	4603      	mov	r3, r0
 8004798:	461a      	mov	r2, r3
 800479a:	4613      	mov	r3, r2
 800479c:	011b      	lsls	r3, r3, #4
 800479e:	1a9b      	subs	r3, r3, r2
 80047a0:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80047a2:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	789b      	ldrb	r3, [r3, #2]
 80047a8:	4618      	mov	r0, r3
 80047aa:	f000 fc36 	bl	800501a <RTC_Bcd2ToByte>
 80047ae:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80047b0:	4423      	add	r3, r4
 80047b2:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80047b4:	6979      	ldr	r1, [r7, #20]
 80047b6:	68f8      	ldr	r0, [r7, #12]
 80047b8:	f000 fb5b 	bl	8004e72 <RTC_WriteTimeCounter>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d007      	beq.n	80047d2 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2204      	movs	r2, #4
 80047c6:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2200      	movs	r2, #0
 80047cc:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e02f      	b.n	8004832 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	685a      	ldr	r2, [r3, #4]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f022 0205 	bic.w	r2, r2, #5
 80047e0:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80047e2:	68f8      	ldr	r0, [r7, #12]
 80047e4:	f000 fb6c 	bl	8004ec0 <RTC_ReadAlarmCounter>
 80047e8:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f0:	d018      	beq.n	8004824 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 80047f2:	693a      	ldr	r2, [r7, #16]
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d214      	bcs.n	8004824 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8004800:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004804:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004806:	6939      	ldr	r1, [r7, #16]
 8004808:	68f8      	ldr	r0, [r7, #12]
 800480a:	f000 fb72 	bl	8004ef2 <RTC_WriteAlarmCounter>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d007      	beq.n	8004824 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2204      	movs	r2, #4
 8004818:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2200      	movs	r2, #0
 800481e:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e006      	b.n	8004832 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2201      	movs	r2, #1
 8004828:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2200      	movs	r2, #0
 800482e:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8004830:	2300      	movs	r3, #0
  }
}
 8004832:	4618      	mov	r0, r3
 8004834:	371c      	adds	r7, #28
 8004836:	46bd      	mov	sp, r7
 8004838:	bd90      	pop	{r4, r7, pc}
	...

0800483c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b088      	sub	sp, #32
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8004848:	2300      	movs	r3, #0
 800484a:	61bb      	str	r3, [r7, #24]
 800484c:	2300      	movs	r3, #0
 800484e:	61fb      	str	r3, [r7, #28]
 8004850:	2300      	movs	r3, #0
 8004852:	617b      	str	r3, [r7, #20]
 8004854:	2300      	movs	r3, #0
 8004856:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d002      	beq.n	8004864 <HAL_RTC_GetTime+0x28>
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d101      	bne.n	8004868 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e0b5      	b.n	80049d4 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f003 0304 	and.w	r3, r3, #4
 8004872:	2b00      	cmp	r3, #0
 8004874:	d001      	beq.n	800487a <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e0ac      	b.n	80049d4 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800487a:	68f8      	ldr	r0, [r7, #12]
 800487c:	f000 fac9 	bl	8004e12 <RTC_ReadTimeCounter>
 8004880:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	4a55      	ldr	r2, [pc, #340]	; (80049dc <HAL_RTC_GetTime+0x1a0>)
 8004886:	fba2 2303 	umull	r2, r3, r2, r3
 800488a:	0adb      	lsrs	r3, r3, #11
 800488c:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 800488e:	69ba      	ldr	r2, [r7, #24]
 8004890:	4b52      	ldr	r3, [pc, #328]	; (80049dc <HAL_RTC_GetTime+0x1a0>)
 8004892:	fba3 1302 	umull	r1, r3, r3, r2
 8004896:	0adb      	lsrs	r3, r3, #11
 8004898:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800489c:	fb01 f303 	mul.w	r3, r1, r3
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	4a4f      	ldr	r2, [pc, #316]	; (80049e0 <HAL_RTC_GetTime+0x1a4>)
 80048a4:	fba2 2303 	umull	r2, r3, r2, r3
 80048a8:	095b      	lsrs	r3, r3, #5
 80048aa:	b2da      	uxtb	r2, r3
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	4a4a      	ldr	r2, [pc, #296]	; (80049dc <HAL_RTC_GetTime+0x1a0>)
 80048b4:	fba2 1203 	umull	r1, r2, r2, r3
 80048b8:	0ad2      	lsrs	r2, r2, #11
 80048ba:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80048be:	fb01 f202 	mul.w	r2, r1, r2
 80048c2:	1a9a      	subs	r2, r3, r2
 80048c4:	4b46      	ldr	r3, [pc, #280]	; (80049e0 <HAL_RTC_GetTime+0x1a4>)
 80048c6:	fba3 1302 	umull	r1, r3, r3, r2
 80048ca:	0959      	lsrs	r1, r3, #5
 80048cc:	460b      	mov	r3, r1
 80048ce:	011b      	lsls	r3, r3, #4
 80048d0:	1a5b      	subs	r3, r3, r1
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	1ad1      	subs	r1, r2, r3
 80048d6:	b2ca      	uxtb	r2, r1
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	2b17      	cmp	r3, #23
 80048e0:	d955      	bls.n	800498e <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	4a3f      	ldr	r2, [pc, #252]	; (80049e4 <HAL_RTC_GetTime+0x1a8>)
 80048e6:	fba2 2303 	umull	r2, r3, r2, r3
 80048ea:	091b      	lsrs	r3, r3, #4
 80048ec:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 80048ee:	6939      	ldr	r1, [r7, #16]
 80048f0:	4b3c      	ldr	r3, [pc, #240]	; (80049e4 <HAL_RTC_GetTime+0x1a8>)
 80048f2:	fba3 2301 	umull	r2, r3, r3, r1
 80048f6:	091a      	lsrs	r2, r3, #4
 80048f8:	4613      	mov	r3, r2
 80048fa:	005b      	lsls	r3, r3, #1
 80048fc:	4413      	add	r3, r2
 80048fe:	00db      	lsls	r3, r3, #3
 8004900:	1aca      	subs	r2, r1, r3
 8004902:	b2d2      	uxtb	r2, r2
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004908:	68f8      	ldr	r0, [r7, #12]
 800490a:	f000 fad9 	bl	8004ec0 <RTC_ReadAlarmCounter>
 800490e:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004916:	d008      	beq.n	800492a <HAL_RTC_GetTime+0xee>
 8004918:	69fa      	ldr	r2, [r7, #28]
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	429a      	cmp	r2, r3
 800491e:	d904      	bls.n	800492a <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8004920:	69fa      	ldr	r2, [r7, #28]
 8004922:	69bb      	ldr	r3, [r7, #24]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	61fb      	str	r3, [r7, #28]
 8004928:	e002      	b.n	8004930 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 800492a:	f04f 33ff 	mov.w	r3, #4294967295
 800492e:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	4a2d      	ldr	r2, [pc, #180]	; (80049e8 <HAL_RTC_GetTime+0x1ac>)
 8004934:	fb02 f303 	mul.w	r3, r2, r3
 8004938:	69ba      	ldr	r2, [r7, #24]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800493e:	69b9      	ldr	r1, [r7, #24]
 8004940:	68f8      	ldr	r0, [r7, #12]
 8004942:	f000 fa96 	bl	8004e72 <RTC_WriteTimeCounter>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d001      	beq.n	8004950 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e041      	b.n	80049d4 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004956:	d00c      	beq.n	8004972 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8004958:	69fa      	ldr	r2, [r7, #28]
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	4413      	add	r3, r2
 800495e:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004960:	69f9      	ldr	r1, [r7, #28]
 8004962:	68f8      	ldr	r0, [r7, #12]
 8004964:	f000 fac5 	bl	8004ef2 <RTC_WriteAlarmCounter>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00a      	beq.n	8004984 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e030      	b.n	80049d4 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004972:	69f9      	ldr	r1, [r7, #28]
 8004974:	68f8      	ldr	r0, [r7, #12]
 8004976:	f000 fabc 	bl	8004ef2 <RTC_WriteAlarmCounter>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d001      	beq.n	8004984 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e027      	b.n	80049d4 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8004984:	6979      	ldr	r1, [r7, #20]
 8004986:	68f8      	ldr	r0, [r7, #12]
 8004988:	f000 fb64 	bl	8005054 <RTC_DateUpdate>
 800498c:	e003      	b.n	8004996 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	b2da      	uxtb	r2, r3
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d01a      	beq.n	80049d2 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	4618      	mov	r0, r3
 80049a2:	f000 fb1d 	bl	8004fe0 <RTC_ByteToBcd2>
 80049a6:	4603      	mov	r3, r0
 80049a8:	461a      	mov	r2, r3
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	785b      	ldrb	r3, [r3, #1]
 80049b2:	4618      	mov	r0, r3
 80049b4:	f000 fb14 	bl	8004fe0 <RTC_ByteToBcd2>
 80049b8:	4603      	mov	r3, r0
 80049ba:	461a      	mov	r2, r3
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	789b      	ldrb	r3, [r3, #2]
 80049c4:	4618      	mov	r0, r3
 80049c6:	f000 fb0b 	bl	8004fe0 <RTC_ByteToBcd2>
 80049ca:	4603      	mov	r3, r0
 80049cc:	461a      	mov	r2, r3
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3720      	adds	r7, #32
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	91a2b3c5 	.word	0x91a2b3c5
 80049e0:	88888889 	.word	0x88888889
 80049e4:	aaaaaaab 	.word	0xaaaaaaab
 80049e8:	00015180 	.word	0x00015180

080049ec <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b088      	sub	sp, #32
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 80049f8:	2300      	movs	r3, #0
 80049fa:	61fb      	str	r3, [r7, #28]
 80049fc:	2300      	movs	r3, #0
 80049fe:	61bb      	str	r3, [r7, #24]
 8004a00:	2300      	movs	r3, #0
 8004a02:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d002      	beq.n	8004a10 <HAL_RTC_SetDate+0x24>
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d101      	bne.n	8004a14 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e097      	b.n	8004b44 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	7c1b      	ldrb	r3, [r3, #16]
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d101      	bne.n	8004a20 <HAL_RTC_SetDate+0x34>
 8004a1c:	2302      	movs	r3, #2
 8004a1e:	e091      	b.n	8004b44 <HAL_RTC_SetDate+0x158>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2201      	movs	r2, #1
 8004a24:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2202      	movs	r2, #2
 8004a2a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d10c      	bne.n	8004a4c <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	78da      	ldrb	r2, [r3, #3]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	785a      	ldrb	r2, [r3, #1]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	789a      	ldrb	r2, [r3, #2]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	739a      	strb	r2, [r3, #14]
 8004a4a:	e01a      	b.n	8004a82 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	78db      	ldrb	r3, [r3, #3]
 8004a50:	4618      	mov	r0, r3
 8004a52:	f000 fae2 	bl	800501a <RTC_Bcd2ToByte>
 8004a56:	4603      	mov	r3, r0
 8004a58:	461a      	mov	r2, r3
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	785b      	ldrb	r3, [r3, #1]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f000 fad9 	bl	800501a <RTC_Bcd2ToByte>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	789b      	ldrb	r3, [r3, #2]
 8004a74:	4618      	mov	r0, r3
 8004a76:	f000 fad0 	bl	800501a <RTC_Bcd2ToByte>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	7bdb      	ldrb	r3, [r3, #15]
 8004a86:	4618      	mov	r0, r3
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	7b59      	ldrb	r1, [r3, #13]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	7b9b      	ldrb	r3, [r3, #14]
 8004a90:	461a      	mov	r2, r3
 8004a92:	f000 fbbb 	bl	800520c <RTC_WeekDayNum>
 8004a96:	4603      	mov	r3, r0
 8004a98:	461a      	mov	r2, r3
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	7b1a      	ldrb	r2, [r3, #12]
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8004aa6:	68f8      	ldr	r0, [r7, #12]
 8004aa8:	f000 f9b3 	bl	8004e12 <RTC_ReadTimeCounter>
 8004aac:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	4a26      	ldr	r2, [pc, #152]	; (8004b4c <HAL_RTC_SetDate+0x160>)
 8004ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab6:	0adb      	lsrs	r3, r3, #11
 8004ab8:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	2b18      	cmp	r3, #24
 8004abe:	d93a      	bls.n	8004b36 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	4a23      	ldr	r2, [pc, #140]	; (8004b50 <HAL_RTC_SetDate+0x164>)
 8004ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac8:	091b      	lsrs	r3, r3, #4
 8004aca:	4a22      	ldr	r2, [pc, #136]	; (8004b54 <HAL_RTC_SetDate+0x168>)
 8004acc:	fb02 f303 	mul.w	r3, r2, r3
 8004ad0:	69fa      	ldr	r2, [r7, #28]
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004ad6:	69f9      	ldr	r1, [r7, #28]
 8004ad8:	68f8      	ldr	r0, [r7, #12]
 8004ada:	f000 f9ca 	bl	8004e72 <RTC_WriteTimeCounter>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d007      	beq.n	8004af4 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2204      	movs	r2, #4
 8004ae8:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2200      	movs	r2, #0
 8004aee:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e027      	b.n	8004b44 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004af4:	68f8      	ldr	r0, [r7, #12]
 8004af6:	f000 f9e3 	bl	8004ec0 <RTC_ReadAlarmCounter>
 8004afa:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004afc:	69bb      	ldr	r3, [r7, #24]
 8004afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b02:	d018      	beq.n	8004b36 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8004b04:	69ba      	ldr	r2, [r7, #24]
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d214      	bcs.n	8004b36 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8004b12:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004b16:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004b18:	69b9      	ldr	r1, [r7, #24]
 8004b1a:	68f8      	ldr	r0, [r7, #12]
 8004b1c:	f000 f9e9 	bl	8004ef2 <RTC_WriteAlarmCounter>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d007      	beq.n	8004b36 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2204      	movs	r2, #4
 8004b2a:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e006      	b.n	8004b44 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2201      	movs	r2, #1
 8004b3a:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3720      	adds	r7, #32
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	91a2b3c5 	.word	0x91a2b3c5
 8004b50:	aaaaaaab 	.word	0xaaaaaaab
 8004b54:	00015180 	.word	0x00015180

08004b58 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b086      	sub	sp, #24
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8004b64:	f107 0314 	add.w	r3, r7, #20
 8004b68:	2100      	movs	r1, #0
 8004b6a:	460a      	mov	r2, r1
 8004b6c:	801a      	strh	r2, [r3, #0]
 8004b6e:	460a      	mov	r2, r1
 8004b70:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d002      	beq.n	8004b7e <HAL_RTC_GetDate+0x26>
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d101      	bne.n	8004b82 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e03a      	b.n	8004bf8 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8004b82:	f107 0314 	add.w	r3, r7, #20
 8004b86:	2200      	movs	r2, #0
 8004b88:	4619      	mov	r1, r3
 8004b8a:	68f8      	ldr	r0, [r7, #12]
 8004b8c:	f7ff fe56 	bl	800483c <HAL_RTC_GetTime>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d001      	beq.n	8004b9a <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e02e      	b.n	8004bf8 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	7b1a      	ldrb	r2, [r3, #12]
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	7bda      	ldrb	r2, [r3, #15]
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	7b5a      	ldrb	r2, [r3, #13]
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	7b9a      	ldrb	r2, [r3, #14]
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d01a      	beq.n	8004bf6 <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	78db      	ldrb	r3, [r3, #3]
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f000 fa0b 	bl	8004fe0 <RTC_ByteToBcd2>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	461a      	mov	r2, r3
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	785b      	ldrb	r3, [r3, #1]
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f000 fa02 	bl	8004fe0 <RTC_ByteToBcd2>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	461a      	mov	r2, r3
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	789b      	ldrb	r3, [r3, #2]
 8004be8:	4618      	mov	r0, r3
 8004bea:	f000 f9f9 	bl	8004fe0 <RTC_ByteToBcd2>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004bf6:	2300      	movs	r3, #0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3718      	adds	r7, #24
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004c00:	b590      	push	{r4, r7, lr}
 8004c02:	b089      	sub	sp, #36	; 0x24
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 8004c10:	f107 0314 	add.w	r3, r7, #20
 8004c14:	2100      	movs	r1, #0
 8004c16:	460a      	mov	r2, r1
 8004c18:	801a      	strh	r2, [r3, #0]
 8004c1a:	460a      	mov	r2, r1
 8004c1c:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d002      	beq.n	8004c2a <HAL_RTC_SetAlarm_IT+0x2a>
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d101      	bne.n	8004c2e <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e096      	b.n	8004d5c <HAL_RTC_SetAlarm_IT+0x15c>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	7c1b      	ldrb	r3, [r3, #16]
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d101      	bne.n	8004c3a <HAL_RTC_SetAlarm_IT+0x3a>
 8004c36:	2302      	movs	r3, #2
 8004c38:	e090      	b.n	8004d5c <HAL_RTC_SetAlarm_IT+0x15c>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2202      	movs	r2, #2
 8004c44:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8004c46:	f107 0314 	add.w	r3, r7, #20
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	68f8      	ldr	r0, [r7, #12]
 8004c50:	f7ff fdf4 	bl	800483c <HAL_RTC_GetTime>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d001      	beq.n	8004c5e <HAL_RTC_SetAlarm_IT+0x5e>
  {
    return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e07e      	b.n	8004d5c <HAL_RTC_SetAlarm_IT+0x15c>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8004c5e:	7d3b      	ldrb	r3, [r7, #20]
 8004c60:	461a      	mov	r2, r3
 8004c62:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004c66:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 8004c6a:	7d7b      	ldrb	r3, [r7, #21]
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	460b      	mov	r3, r1
 8004c70:	011b      	lsls	r3, r3, #4
 8004c72:	1a5b      	subs	r3, r3, r1
 8004c74:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8004c76:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 8004c78:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8004c7a:	4413      	add	r3, r2
 8004c7c:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d113      	bne.n	8004cac <HAL_RTC_SetAlarm_IT+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	461a      	mov	r2, r3
 8004c8a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004c8e:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	785b      	ldrb	r3, [r3, #1]
 8004c96:	4619      	mov	r1, r3
 8004c98:	460b      	mov	r3, r1
 8004c9a:	011b      	lsls	r3, r3, #4
 8004c9c:	1a5b      	subs	r3, r3, r1
 8004c9e:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8004ca0:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 8004ca2:	68ba      	ldr	r2, [r7, #8]
 8004ca4:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8004ca6:	4413      	add	r3, r2
 8004ca8:	61fb      	str	r3, [r7, #28]
 8004caa:	e01e      	b.n	8004cea <HAL_RTC_SetAlarm_IT+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f000 f9b2 	bl	800501a <RTC_Bcd2ToByte>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	461a      	mov	r2, r3
 8004cba:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004cbe:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	785b      	ldrb	r3, [r3, #1]
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f000 f9a7 	bl	800501a <RTC_Bcd2ToByte>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	461a      	mov	r2, r3
 8004cd0:	4613      	mov	r3, r2
 8004cd2:	011b      	lsls	r3, r3, #4
 8004cd4:	1a9b      	subs	r3, r3, r2
 8004cd6:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8004cd8:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	789b      	ldrb	r3, [r3, #2]
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f000 f99b 	bl	800501a <RTC_Bcd2ToByte>
 8004ce4:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8004ce6:	4423      	add	r3, r4
 8004ce8:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 8004cea:	69fa      	ldr	r2, [r7, #28]
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d205      	bcs.n	8004cfe <HAL_RTC_SetAlarm_IT+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8004cf8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004cfc:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004cfe:	69f9      	ldr	r1, [r7, #28]
 8004d00:	68f8      	ldr	r0, [r7, #12]
 8004d02:	f000 f8f6 	bl	8004ef2 <RTC_WriteAlarmCounter>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d007      	beq.n	8004d1c <HAL_RTC_SetAlarm_IT+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2204      	movs	r2, #4
 8004d10:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2200      	movs	r2, #0
 8004d16:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e01f      	b.n	8004d5c <HAL_RTC_SetAlarm_IT+0x15c>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f06f 0202 	mvn.w	r2, #2
 8004d24:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f042 0202 	orr.w	r2, r2, #2
 8004d34:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004d36:	4b0b      	ldr	r3, [pc, #44]	; (8004d64 <HAL_RTC_SetAlarm_IT+0x164>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a0a      	ldr	r2, [pc, #40]	; (8004d64 <HAL_RTC_SetAlarm_IT+0x164>)
 8004d3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d40:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8004d42:	4b08      	ldr	r3, [pc, #32]	; (8004d64 <HAL_RTC_SetAlarm_IT+0x164>)
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	4a07      	ldr	r2, [pc, #28]	; (8004d64 <HAL_RTC_SetAlarm_IT+0x164>)
 8004d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d4c:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2201      	movs	r2, #1
 8004d52:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2200      	movs	r2, #0
 8004d58:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8004d5a:	2300      	movs	r3, #0
  }
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3724      	adds	r7, #36	; 0x24
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd90      	pop	{r4, r7, pc}
 8004d64:	40010400 	.word	0x40010400

08004d68 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0302 	and.w	r3, r3, #2
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d00e      	beq.n	8004d9c <HAL_RTC_AlarmIRQHandler+0x34>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	f003 0302 	and.w	r3, r3, #2
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d007      	beq.n	8004d9c <HAL_RTC_AlarmIRQHandler+0x34>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f7fb fe76 	bl	8000a7e <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f06f 0202 	mvn.w	r2, #2
 8004d9a:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8004d9c:	4b05      	ldr	r3, [pc, #20]	; (8004db4 <HAL_RTC_AlarmIRQHandler+0x4c>)
 8004d9e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004da2:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	745a      	strb	r2, [r3, #17]
}
 8004daa:	bf00      	nop
 8004dac:	3708      	adds	r7, #8
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	40010400 	.word	0x40010400

08004db8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d101      	bne.n	8004dce <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e01d      	b.n	8004e0a <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	685a      	ldr	r2, [r3, #4]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f022 0208 	bic.w	r2, r2, #8
 8004ddc:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004dde:	f7fe fac9 	bl	8003374 <HAL_GetTick>
 8004de2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004de4:	e009      	b.n	8004dfa <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004de6:	f7fe fac5 	bl	8003374 <HAL_GetTick>
 8004dea:	4602      	mov	r2, r0
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004df4:	d901      	bls.n	8004dfa <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e007      	b.n	8004e0a <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	f003 0308 	and.w	r3, r3, #8
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d0ee      	beq.n	8004de6 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3710      	adds	r7, #16
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8004e12:	b480      	push	{r7}
 8004e14:	b087      	sub	sp, #28
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	827b      	strh	r3, [r7, #18]
 8004e1e:	2300      	movs	r3, #0
 8004e20:	823b      	strh	r3, [r7, #16]
 8004e22:	2300      	movs	r3, #0
 8004e24:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8004e26:	2300      	movs	r3, #0
 8004e28:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	699b      	ldr	r3, [r3, #24]
 8004e30:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	69db      	ldr	r3, [r3, #28]
 8004e38:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	699b      	ldr	r3, [r3, #24]
 8004e40:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8004e42:	8a7a      	ldrh	r2, [r7, #18]
 8004e44:	8a3b      	ldrh	r3, [r7, #16]
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d008      	beq.n	8004e5c <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8004e4a:	8a3b      	ldrh	r3, [r7, #16]
 8004e4c:	041a      	lsls	r2, r3, #16
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	69db      	ldr	r3, [r3, #28]
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	4313      	orrs	r3, r2
 8004e58:	617b      	str	r3, [r7, #20]
 8004e5a:	e004      	b.n	8004e66 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8004e5c:	8a7b      	ldrh	r3, [r7, #18]
 8004e5e:	041a      	lsls	r2, r3, #16
 8004e60:	89fb      	ldrh	r3, [r7, #14]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8004e66:	697b      	ldr	r3, [r7, #20]
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	371c      	adds	r7, #28
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bc80      	pop	{r7}
 8004e70:	4770      	bx	lr

08004e72 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8004e72:	b580      	push	{r7, lr}
 8004e74:	b084      	sub	sp, #16
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]
 8004e7a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f000 f85d 	bl	8004f40 <RTC_EnterInitMode>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d002      	beq.n	8004e92 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	73fb      	strb	r3, [r7, #15]
 8004e90:	e011      	b.n	8004eb6 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	683a      	ldr	r2, [r7, #0]
 8004e98:	0c12      	lsrs	r2, r2, #16
 8004e9a:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	683a      	ldr	r2, [r7, #0]
 8004ea2:	b292      	uxth	r2, r2
 8004ea4:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 f872 	bl	8004f90 <RTC_ExitInitMode>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d001      	beq.n	8004eb6 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3710      	adds	r7, #16
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b085      	sub	sp, #20
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	81fb      	strh	r3, [r7, #14]
 8004ecc:	2300      	movs	r3, #0
 8004ece:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	6a1b      	ldr	r3, [r3, #32]
 8004ed6:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ede:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8004ee0:	89fb      	ldrh	r3, [r7, #14]
 8004ee2:	041a      	lsls	r2, r3, #16
 8004ee4:	89bb      	ldrh	r3, [r7, #12]
 8004ee6:	4313      	orrs	r3, r2
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3714      	adds	r7, #20
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bc80      	pop	{r7}
 8004ef0:	4770      	bx	lr

08004ef2 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8004ef2:	b580      	push	{r7, lr}
 8004ef4:	b084      	sub	sp, #16
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
 8004efa:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004efc:	2300      	movs	r3, #0
 8004efe:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f000 f81d 	bl	8004f40 <RTC_EnterInitMode>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d002      	beq.n	8004f12 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	73fb      	strb	r3, [r7, #15]
 8004f10:	e011      	b.n	8004f36 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	683a      	ldr	r2, [r7, #0]
 8004f18:	0c12      	lsrs	r2, r2, #16
 8004f1a:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	683a      	ldr	r2, [r7, #0]
 8004f22:	b292      	uxth	r2, r2
 8004f24:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 f832 	bl	8004f90 <RTC_ExitInitMode>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d001      	beq.n	8004f36 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3710      	adds	r7, #16
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8004f4c:	f7fe fa12 	bl	8003374 <HAL_GetTick>
 8004f50:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004f52:	e009      	b.n	8004f68 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004f54:	f7fe fa0e 	bl	8003374 <HAL_GetTick>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f62:	d901      	bls.n	8004f68 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8004f64:	2303      	movs	r3, #3
 8004f66:	e00f      	b.n	8004f88 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	f003 0320 	and.w	r3, r3, #32
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d0ee      	beq.n	8004f54 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	685a      	ldr	r2, [r3, #4]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f042 0210 	orr.w	r2, r2, #16
 8004f84:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8004f86:	2300      	movs	r3, #0
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3710      	adds	r7, #16
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	685a      	ldr	r2, [r3, #4]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f022 0210 	bic.w	r2, r2, #16
 8004faa:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004fac:	f7fe f9e2 	bl	8003374 <HAL_GetTick>
 8004fb0:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004fb2:	e009      	b.n	8004fc8 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004fb4:	f7fe f9de 	bl	8003374 <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004fc2:	d901      	bls.n	8004fc8 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e007      	b.n	8004fd8 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	f003 0320 	and.w	r3, r3, #32
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d0ee      	beq.n	8004fb4 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8004fd6:	2300      	movs	r3, #0
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3710      	adds	r7, #16
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b085      	sub	sp, #20
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004fea:	2300      	movs	r3, #0
 8004fec:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8004fee:	e005      	b.n	8004ffc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8004ff6:	79fb      	ldrb	r3, [r7, #7]
 8004ff8:	3b0a      	subs	r3, #10
 8004ffa:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8004ffc:	79fb      	ldrb	r3, [r7, #7]
 8004ffe:	2b09      	cmp	r3, #9
 8005000:	d8f6      	bhi.n	8004ff0 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	b2db      	uxtb	r3, r3
 8005006:	011b      	lsls	r3, r3, #4
 8005008:	b2da      	uxtb	r2, r3
 800500a:	79fb      	ldrb	r3, [r7, #7]
 800500c:	4313      	orrs	r3, r2
 800500e:	b2db      	uxtb	r3, r3
}
 8005010:	4618      	mov	r0, r3
 8005012:	3714      	adds	r7, #20
 8005014:	46bd      	mov	sp, r7
 8005016:	bc80      	pop	{r7}
 8005018:	4770      	bx	lr

0800501a <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800501a:	b480      	push	{r7}
 800501c:	b085      	sub	sp, #20
 800501e:	af00      	add	r7, sp, #0
 8005020:	4603      	mov	r3, r0
 8005022:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8005024:	2300      	movs	r3, #0
 8005026:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8005028:	79fb      	ldrb	r3, [r7, #7]
 800502a:	091b      	lsrs	r3, r3, #4
 800502c:	b2db      	uxtb	r3, r3
 800502e:	461a      	mov	r2, r3
 8005030:	4613      	mov	r3, r2
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	4413      	add	r3, r2
 8005036:	005b      	lsls	r3, r3, #1
 8005038:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800503a:	79fb      	ldrb	r3, [r7, #7]
 800503c:	f003 030f 	and.w	r3, r3, #15
 8005040:	b2da      	uxtb	r2, r3
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	b2db      	uxtb	r3, r3
 8005046:	4413      	add	r3, r2
 8005048:	b2db      	uxtb	r3, r3
}
 800504a:	4618      	mov	r0, r3
 800504c:	3714      	adds	r7, #20
 800504e:	46bd      	mov	sp, r7
 8005050:	bc80      	pop	{r7}
 8005052:	4770      	bx	lr

08005054 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b086      	sub	sp, #24
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 800505e:	2300      	movs	r3, #0
 8005060:	617b      	str	r3, [r7, #20]
 8005062:	2300      	movs	r3, #0
 8005064:	613b      	str	r3, [r7, #16]
 8005066:	2300      	movs	r3, #0
 8005068:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 800506a:	2300      	movs	r3, #0
 800506c:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	7bdb      	ldrb	r3, [r3, #15]
 8005072:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	7b5b      	ldrb	r3, [r3, #13]
 8005078:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	7b9b      	ldrb	r3, [r3, #14]
 800507e:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8005080:	2300      	movs	r3, #0
 8005082:	60bb      	str	r3, [r7, #8]
 8005084:	e06f      	b.n	8005166 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	2b01      	cmp	r3, #1
 800508a:	d011      	beq.n	80050b0 <RTC_DateUpdate+0x5c>
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	2b03      	cmp	r3, #3
 8005090:	d00e      	beq.n	80050b0 <RTC_DateUpdate+0x5c>
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	2b05      	cmp	r3, #5
 8005096:	d00b      	beq.n	80050b0 <RTC_DateUpdate+0x5c>
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	2b07      	cmp	r3, #7
 800509c:	d008      	beq.n	80050b0 <RTC_DateUpdate+0x5c>
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	2b08      	cmp	r3, #8
 80050a2:	d005      	beq.n	80050b0 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	2b0a      	cmp	r3, #10
 80050a8:	d002      	beq.n	80050b0 <RTC_DateUpdate+0x5c>
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	2b0c      	cmp	r3, #12
 80050ae:	d117      	bne.n	80050e0 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2b1e      	cmp	r3, #30
 80050b4:	d803      	bhi.n	80050be <RTC_DateUpdate+0x6a>
      {
        day++;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	3301      	adds	r3, #1
 80050ba:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80050bc:	e050      	b.n	8005160 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	2b0c      	cmp	r3, #12
 80050c2:	d005      	beq.n	80050d0 <RTC_DateUpdate+0x7c>
        {
          month++;
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	3301      	adds	r3, #1
 80050c8:	613b      	str	r3, [r7, #16]
          day = 1U;
 80050ca:	2301      	movs	r3, #1
 80050cc:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80050ce:	e047      	b.n	8005160 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 80050d0:	2301      	movs	r3, #1
 80050d2:	613b      	str	r3, [r7, #16]
          day = 1U;
 80050d4:	2301      	movs	r3, #1
 80050d6:	60fb      	str	r3, [r7, #12]
          year++;
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	3301      	adds	r3, #1
 80050dc:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 80050de:	e03f      	b.n	8005160 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	2b04      	cmp	r3, #4
 80050e4:	d008      	beq.n	80050f8 <RTC_DateUpdate+0xa4>
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	2b06      	cmp	r3, #6
 80050ea:	d005      	beq.n	80050f8 <RTC_DateUpdate+0xa4>
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	2b09      	cmp	r3, #9
 80050f0:	d002      	beq.n	80050f8 <RTC_DateUpdate+0xa4>
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	2b0b      	cmp	r3, #11
 80050f6:	d10c      	bne.n	8005112 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2b1d      	cmp	r3, #29
 80050fc:	d803      	bhi.n	8005106 <RTC_DateUpdate+0xb2>
      {
        day++;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	3301      	adds	r3, #1
 8005102:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8005104:	e02c      	b.n	8005160 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	3301      	adds	r3, #1
 800510a:	613b      	str	r3, [r7, #16]
        day = 1U;
 800510c:	2301      	movs	r3, #1
 800510e:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8005110:	e026      	b.n	8005160 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	2b02      	cmp	r3, #2
 8005116:	d123      	bne.n	8005160 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2b1b      	cmp	r3, #27
 800511c:	d803      	bhi.n	8005126 <RTC_DateUpdate+0xd2>
      {
        day++;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	3301      	adds	r3, #1
 8005122:	60fb      	str	r3, [r7, #12]
 8005124:	e01c      	b.n	8005160 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2b1c      	cmp	r3, #28
 800512a:	d111      	bne.n	8005150 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	b29b      	uxth	r3, r3
 8005130:	4618      	mov	r0, r3
 8005132:	f000 f839 	bl	80051a8 <RTC_IsLeapYear>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d003      	beq.n	8005144 <RTC_DateUpdate+0xf0>
        {
          day++;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	3301      	adds	r3, #1
 8005140:	60fb      	str	r3, [r7, #12]
 8005142:	e00d      	b.n	8005160 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	3301      	adds	r3, #1
 8005148:	613b      	str	r3, [r7, #16]
          day = 1U;
 800514a:	2301      	movs	r3, #1
 800514c:	60fb      	str	r3, [r7, #12]
 800514e:	e007      	b.n	8005160 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2b1d      	cmp	r3, #29
 8005154:	d104      	bne.n	8005160 <RTC_DateUpdate+0x10c>
      {
        month++;
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	3301      	adds	r3, #1
 800515a:	613b      	str	r3, [r7, #16]
        day = 1U;
 800515c:	2301      	movs	r3, #1
 800515e:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	3301      	adds	r3, #1
 8005164:	60bb      	str	r3, [r7, #8]
 8005166:	68ba      	ldr	r2, [r7, #8]
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	429a      	cmp	r2, r3
 800516c:	d38b      	bcc.n	8005086 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	b2da      	uxtb	r2, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	b2da      	uxtb	r2, r3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	b2da      	uxtb	r2, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	b2db      	uxtb	r3, r3
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	b2d2      	uxtb	r2, r2
 800518e:	4619      	mov	r1, r3
 8005190:	6978      	ldr	r0, [r7, #20]
 8005192:	f000 f83b 	bl	800520c <RTC_WeekDayNum>
 8005196:	4603      	mov	r3, r0
 8005198:	461a      	mov	r2, r3
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	731a      	strb	r2, [r3, #12]
}
 800519e:	bf00      	nop
 80051a0:	3718      	adds	r7, #24
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
	...

080051a8 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	4603      	mov	r3, r0
 80051b0:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 80051b2:	88fb      	ldrh	r3, [r7, #6]
 80051b4:	f003 0303 	and.w	r3, r3, #3
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d001      	beq.n	80051c2 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 80051be:	2300      	movs	r3, #0
 80051c0:	e01d      	b.n	80051fe <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 80051c2:	88fb      	ldrh	r3, [r7, #6]
 80051c4:	4a10      	ldr	r2, [pc, #64]	; (8005208 <RTC_IsLeapYear+0x60>)
 80051c6:	fba2 1203 	umull	r1, r2, r2, r3
 80051ca:	0952      	lsrs	r2, r2, #5
 80051cc:	2164      	movs	r1, #100	; 0x64
 80051ce:	fb01 f202 	mul.w	r2, r1, r2
 80051d2:	1a9b      	subs	r3, r3, r2
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d001      	beq.n	80051de <RTC_IsLeapYear+0x36>
  {
    return 1U;
 80051da:	2301      	movs	r3, #1
 80051dc:	e00f      	b.n	80051fe <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 80051de:	88fb      	ldrh	r3, [r7, #6]
 80051e0:	4a09      	ldr	r2, [pc, #36]	; (8005208 <RTC_IsLeapYear+0x60>)
 80051e2:	fba2 1203 	umull	r1, r2, r2, r3
 80051e6:	09d2      	lsrs	r2, r2, #7
 80051e8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80051ec:	fb01 f202 	mul.w	r2, r1, r2
 80051f0:	1a9b      	subs	r3, r3, r2
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d101      	bne.n	80051fc <RTC_IsLeapYear+0x54>
  {
    return 1U;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e000      	b.n	80051fe <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 80051fc:	2300      	movs	r3, #0
  }
}
 80051fe:	4618      	mov	r0, r3
 8005200:	370c      	adds	r7, #12
 8005202:	46bd      	mov	sp, r7
 8005204:	bc80      	pop	{r7}
 8005206:	4770      	bx	lr
 8005208:	51eb851f 	.word	0x51eb851f

0800520c <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 800520c:	b480      	push	{r7}
 800520e:	b085      	sub	sp, #20
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	460b      	mov	r3, r1
 8005216:	70fb      	strb	r3, [r7, #3]
 8005218:	4613      	mov	r3, r2
 800521a:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 800521c:	2300      	movs	r3, #0
 800521e:	60bb      	str	r3, [r7, #8]
 8005220:	2300      	movs	r3, #0
 8005222:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800522a:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 800522c:	78fb      	ldrb	r3, [r7, #3]
 800522e:	2b02      	cmp	r3, #2
 8005230:	d82d      	bhi.n	800528e <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8005232:	78fa      	ldrb	r2, [r7, #3]
 8005234:	4613      	mov	r3, r2
 8005236:	005b      	lsls	r3, r3, #1
 8005238:	4413      	add	r3, r2
 800523a:	00db      	lsls	r3, r3, #3
 800523c:	1a9b      	subs	r3, r3, r2
 800523e:	4a2c      	ldr	r2, [pc, #176]	; (80052f0 <RTC_WeekDayNum+0xe4>)
 8005240:	fba2 2303 	umull	r2, r3, r2, r3
 8005244:	085a      	lsrs	r2, r3, #1
 8005246:	78bb      	ldrb	r3, [r7, #2]
 8005248:	441a      	add	r2, r3
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	441a      	add	r2, r3
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	3b01      	subs	r3, #1
 8005252:	089b      	lsrs	r3, r3, #2
 8005254:	441a      	add	r2, r3
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	3b01      	subs	r3, #1
 800525a:	4926      	ldr	r1, [pc, #152]	; (80052f4 <RTC_WeekDayNum+0xe8>)
 800525c:	fba1 1303 	umull	r1, r3, r1, r3
 8005260:	095b      	lsrs	r3, r3, #5
 8005262:	1ad2      	subs	r2, r2, r3
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	3b01      	subs	r3, #1
 8005268:	4922      	ldr	r1, [pc, #136]	; (80052f4 <RTC_WeekDayNum+0xe8>)
 800526a:	fba1 1303 	umull	r1, r3, r1, r3
 800526e:	09db      	lsrs	r3, r3, #7
 8005270:	4413      	add	r3, r2
 8005272:	1d1a      	adds	r2, r3, #4
 8005274:	4b20      	ldr	r3, [pc, #128]	; (80052f8 <RTC_WeekDayNum+0xec>)
 8005276:	fba3 1302 	umull	r1, r3, r3, r2
 800527a:	1ad1      	subs	r1, r2, r3
 800527c:	0849      	lsrs	r1, r1, #1
 800527e:	440b      	add	r3, r1
 8005280:	0899      	lsrs	r1, r3, #2
 8005282:	460b      	mov	r3, r1
 8005284:	00db      	lsls	r3, r3, #3
 8005286:	1a5b      	subs	r3, r3, r1
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	60fb      	str	r3, [r7, #12]
 800528c:	e029      	b.n	80052e2 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800528e:	78fa      	ldrb	r2, [r7, #3]
 8005290:	4613      	mov	r3, r2
 8005292:	005b      	lsls	r3, r3, #1
 8005294:	4413      	add	r3, r2
 8005296:	00db      	lsls	r3, r3, #3
 8005298:	1a9b      	subs	r3, r3, r2
 800529a:	4a15      	ldr	r2, [pc, #84]	; (80052f0 <RTC_WeekDayNum+0xe4>)
 800529c:	fba2 2303 	umull	r2, r3, r2, r3
 80052a0:	085a      	lsrs	r2, r3, #1
 80052a2:	78bb      	ldrb	r3, [r7, #2]
 80052a4:	441a      	add	r2, r3
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	441a      	add	r2, r3
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	089b      	lsrs	r3, r3, #2
 80052ae:	441a      	add	r2, r3
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	4910      	ldr	r1, [pc, #64]	; (80052f4 <RTC_WeekDayNum+0xe8>)
 80052b4:	fba1 1303 	umull	r1, r3, r1, r3
 80052b8:	095b      	lsrs	r3, r3, #5
 80052ba:	1ad2      	subs	r2, r2, r3
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	490d      	ldr	r1, [pc, #52]	; (80052f4 <RTC_WeekDayNum+0xe8>)
 80052c0:	fba1 1303 	umull	r1, r3, r1, r3
 80052c4:	09db      	lsrs	r3, r3, #7
 80052c6:	4413      	add	r3, r2
 80052c8:	1c9a      	adds	r2, r3, #2
 80052ca:	4b0b      	ldr	r3, [pc, #44]	; (80052f8 <RTC_WeekDayNum+0xec>)
 80052cc:	fba3 1302 	umull	r1, r3, r3, r2
 80052d0:	1ad1      	subs	r1, r2, r3
 80052d2:	0849      	lsrs	r1, r1, #1
 80052d4:	440b      	add	r3, r1
 80052d6:	0899      	lsrs	r1, r3, #2
 80052d8:	460b      	mov	r3, r1
 80052da:	00db      	lsls	r3, r3, #3
 80052dc:	1a5b      	subs	r3, r3, r1
 80052de:	1ad3      	subs	r3, r2, r3
 80052e0:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	b2db      	uxtb	r3, r3
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3714      	adds	r7, #20
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bc80      	pop	{r7}
 80052ee:	4770      	bx	lr
 80052f0:	38e38e39 	.word	0x38e38e39
 80052f4:	51eb851f 	.word	0x51eb851f
 80052f8:	24924925 	.word	0x24924925

080052fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b082      	sub	sp, #8
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d101      	bne.n	800530e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e076      	b.n	80053fc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005312:	2b00      	cmp	r3, #0
 8005314:	d108      	bne.n	8005328 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800531e:	d009      	beq.n	8005334 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	61da      	str	r2, [r3, #28]
 8005326:	e005      	b.n	8005334 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005340:	b2db      	uxtb	r3, r3
 8005342:	2b00      	cmp	r3, #0
 8005344:	d106      	bne.n	8005354 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f7fb fdc8 	bl	8000ee4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2202      	movs	r2, #2
 8005358:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800536a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800537c:	431a      	orrs	r2, r3
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005386:	431a      	orrs	r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	f003 0302 	and.w	r3, r3, #2
 8005390:	431a      	orrs	r2, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	695b      	ldr	r3, [r3, #20]
 8005396:	f003 0301 	and.w	r3, r3, #1
 800539a:	431a      	orrs	r2, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053a4:	431a      	orrs	r2, r3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	69db      	ldr	r3, [r3, #28]
 80053aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053ae:	431a      	orrs	r2, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a1b      	ldr	r3, [r3, #32]
 80053b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053b8:	ea42 0103 	orr.w	r1, r2, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	430a      	orrs	r2, r1
 80053ca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	699b      	ldr	r3, [r3, #24]
 80053d0:	0c1a      	lsrs	r2, r3, #16
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f002 0204 	and.w	r2, r2, #4
 80053da:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	69da      	ldr	r2, [r3, #28]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053ea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2201      	movs	r2, #1
 80053f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80053fa:	2300      	movs	r3, #0
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3708      	adds	r7, #8
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}

08005404 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b088      	sub	sp, #32
 8005408:	af00      	add	r7, sp, #0
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	603b      	str	r3, [r7, #0]
 8005410:	4613      	mov	r3, r2
 8005412:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005414:	2300      	movs	r3, #0
 8005416:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800541e:	2b01      	cmp	r3, #1
 8005420:	d101      	bne.n	8005426 <HAL_SPI_Transmit+0x22>
 8005422:	2302      	movs	r3, #2
 8005424:	e126      	b.n	8005674 <HAL_SPI_Transmit+0x270>
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2201      	movs	r2, #1
 800542a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800542e:	f7fd ffa1 	bl	8003374 <HAL_GetTick>
 8005432:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005434:	88fb      	ldrh	r3, [r7, #6]
 8005436:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800543e:	b2db      	uxtb	r3, r3
 8005440:	2b01      	cmp	r3, #1
 8005442:	d002      	beq.n	800544a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005444:	2302      	movs	r3, #2
 8005446:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005448:	e10b      	b.n	8005662 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d002      	beq.n	8005456 <HAL_SPI_Transmit+0x52>
 8005450:	88fb      	ldrh	r3, [r7, #6]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d102      	bne.n	800545c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	77fb      	strb	r3, [r7, #31]
    goto error;
 800545a:	e102      	b.n	8005662 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2203      	movs	r2, #3
 8005460:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2200      	movs	r2, #0
 8005468:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	68ba      	ldr	r2, [r7, #8]
 800546e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	88fa      	ldrh	r2, [r7, #6]
 8005474:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	88fa      	ldrh	r2, [r7, #6]
 800547a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2200      	movs	r2, #0
 8005480:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2200      	movs	r2, #0
 8005486:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2200      	movs	r2, #0
 800548c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2200      	movs	r2, #0
 8005492:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2200      	movs	r2, #0
 8005498:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054a2:	d10f      	bne.n	80054c4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054b2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054c2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ce:	2b40      	cmp	r3, #64	; 0x40
 80054d0:	d007      	beq.n	80054e2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054ea:	d14b      	bne.n	8005584 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d002      	beq.n	80054fa <HAL_SPI_Transmit+0xf6>
 80054f4:	8afb      	ldrh	r3, [r7, #22]
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d13e      	bne.n	8005578 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054fe:	881a      	ldrh	r2, [r3, #0]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800550a:	1c9a      	adds	r2, r3, #2
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005514:	b29b      	uxth	r3, r3
 8005516:	3b01      	subs	r3, #1
 8005518:	b29a      	uxth	r2, r3
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800551e:	e02b      	b.n	8005578 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	f003 0302 	and.w	r3, r3, #2
 800552a:	2b02      	cmp	r3, #2
 800552c:	d112      	bne.n	8005554 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005532:	881a      	ldrh	r2, [r3, #0]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800553e:	1c9a      	adds	r2, r3, #2
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005548:	b29b      	uxth	r3, r3
 800554a:	3b01      	subs	r3, #1
 800554c:	b29a      	uxth	r2, r3
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	86da      	strh	r2, [r3, #54]	; 0x36
 8005552:	e011      	b.n	8005578 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005554:	f7fd ff0e 	bl	8003374 <HAL_GetTick>
 8005558:	4602      	mov	r2, r0
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	683a      	ldr	r2, [r7, #0]
 8005560:	429a      	cmp	r2, r3
 8005562:	d803      	bhi.n	800556c <HAL_SPI_Transmit+0x168>
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800556a:	d102      	bne.n	8005572 <HAL_SPI_Transmit+0x16e>
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d102      	bne.n	8005578 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005576:	e074      	b.n	8005662 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800557c:	b29b      	uxth	r3, r3
 800557e:	2b00      	cmp	r3, #0
 8005580:	d1ce      	bne.n	8005520 <HAL_SPI_Transmit+0x11c>
 8005582:	e04c      	b.n	800561e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d002      	beq.n	8005592 <HAL_SPI_Transmit+0x18e>
 800558c:	8afb      	ldrh	r3, [r7, #22]
 800558e:	2b01      	cmp	r3, #1
 8005590:	d140      	bne.n	8005614 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	330c      	adds	r3, #12
 800559c:	7812      	ldrb	r2, [r2, #0]
 800559e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a4:	1c5a      	adds	r2, r3, #1
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	3b01      	subs	r3, #1
 80055b2:	b29a      	uxth	r2, r3
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80055b8:	e02c      	b.n	8005614 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	f003 0302 	and.w	r3, r3, #2
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d113      	bne.n	80055f0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	330c      	adds	r3, #12
 80055d2:	7812      	ldrb	r2, [r2, #0]
 80055d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055da:	1c5a      	adds	r2, r3, #1
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	3b01      	subs	r3, #1
 80055e8:	b29a      	uxth	r2, r3
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	86da      	strh	r2, [r3, #54]	; 0x36
 80055ee:	e011      	b.n	8005614 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055f0:	f7fd fec0 	bl	8003374 <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	683a      	ldr	r2, [r7, #0]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d803      	bhi.n	8005608 <HAL_SPI_Transmit+0x204>
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005606:	d102      	bne.n	800560e <HAL_SPI_Transmit+0x20a>
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d102      	bne.n	8005614 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005612:	e026      	b.n	8005662 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005618:	b29b      	uxth	r3, r3
 800561a:	2b00      	cmp	r3, #0
 800561c:	d1cd      	bne.n	80055ba <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800561e:	69ba      	ldr	r2, [r7, #24]
 8005620:	6839      	ldr	r1, [r7, #0]
 8005622:	68f8      	ldr	r0, [r7, #12]
 8005624:	f000 f8b2 	bl	800578c <SPI_EndRxTxTransaction>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d002      	beq.n	8005634 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2220      	movs	r2, #32
 8005632:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d10a      	bne.n	8005652 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800563c:	2300      	movs	r3, #0
 800563e:	613b      	str	r3, [r7, #16]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	613b      	str	r3, [r7, #16]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	613b      	str	r3, [r7, #16]
 8005650:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005656:	2b00      	cmp	r3, #0
 8005658:	d002      	beq.n	8005660 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	77fb      	strb	r3, [r7, #31]
 800565e:	e000      	b.n	8005662 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005660:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2201      	movs	r2, #1
 8005666:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2200      	movs	r2, #0
 800566e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005672:	7ffb      	ldrb	r3, [r7, #31]
}
 8005674:	4618      	mov	r0, r3
 8005676:	3720      	adds	r7, #32
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b088      	sub	sp, #32
 8005680:	af00      	add	r7, sp, #0
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	60b9      	str	r1, [r7, #8]
 8005686:	603b      	str	r3, [r7, #0]
 8005688:	4613      	mov	r3, r2
 800568a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800568c:	f7fd fe72 	bl	8003374 <HAL_GetTick>
 8005690:	4602      	mov	r2, r0
 8005692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005694:	1a9b      	subs	r3, r3, r2
 8005696:	683a      	ldr	r2, [r7, #0]
 8005698:	4413      	add	r3, r2
 800569a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800569c:	f7fd fe6a 	bl	8003374 <HAL_GetTick>
 80056a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80056a2:	4b39      	ldr	r3, [pc, #228]	; (8005788 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	015b      	lsls	r3, r3, #5
 80056a8:	0d1b      	lsrs	r3, r3, #20
 80056aa:	69fa      	ldr	r2, [r7, #28]
 80056ac:	fb02 f303 	mul.w	r3, r2, r3
 80056b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056b2:	e054      	b.n	800575e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ba:	d050      	beq.n	800575e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80056bc:	f7fd fe5a 	bl	8003374 <HAL_GetTick>
 80056c0:	4602      	mov	r2, r0
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	69fa      	ldr	r2, [r7, #28]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d902      	bls.n	80056d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d13d      	bne.n	800574e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	685a      	ldr	r2, [r3, #4]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80056e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056ea:	d111      	bne.n	8005710 <SPI_WaitFlagStateUntilTimeout+0x94>
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056f4:	d004      	beq.n	8005700 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056fe:	d107      	bne.n	8005710 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800570e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005714:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005718:	d10f      	bne.n	800573a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005728:	601a      	str	r2, [r3, #0]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005738:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2201      	movs	r2, #1
 800573e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	e017      	b.n	800577e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d101      	bne.n	8005758 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005754:	2300      	movs	r3, #0
 8005756:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	3b01      	subs	r3, #1
 800575c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	689a      	ldr	r2, [r3, #8]
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	4013      	ands	r3, r2
 8005768:	68ba      	ldr	r2, [r7, #8]
 800576a:	429a      	cmp	r2, r3
 800576c:	bf0c      	ite	eq
 800576e:	2301      	moveq	r3, #1
 8005770:	2300      	movne	r3, #0
 8005772:	b2db      	uxtb	r3, r3
 8005774:	461a      	mov	r2, r3
 8005776:	79fb      	ldrb	r3, [r7, #7]
 8005778:	429a      	cmp	r2, r3
 800577a:	d19b      	bne.n	80056b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	3720      	adds	r7, #32
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	20000004 	.word	0x20000004

0800578c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b086      	sub	sp, #24
 8005790:	af02      	add	r7, sp, #8
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	60b9      	str	r1, [r7, #8]
 8005796:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	9300      	str	r3, [sp, #0]
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	2200      	movs	r2, #0
 80057a0:	2180      	movs	r1, #128	; 0x80
 80057a2:	68f8      	ldr	r0, [r7, #12]
 80057a4:	f7ff ff6a 	bl	800567c <SPI_WaitFlagStateUntilTimeout>
 80057a8:	4603      	mov	r3, r0
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d007      	beq.n	80057be <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057b2:	f043 0220 	orr.w	r2, r3, #32
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	e000      	b.n	80057c0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80057be:	2300      	movs	r3, #0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3710      	adds	r7, #16
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b082      	sub	sp, #8
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d101      	bne.n	80057da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e041      	b.n	800585e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d106      	bne.n	80057f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f7fb fc00 	bl	8000ff4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2202      	movs	r2, #2
 80057f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	3304      	adds	r3, #4
 8005804:	4619      	mov	r1, r3
 8005806:	4610      	mov	r0, r2
 8005808:	f000 fafe 	bl	8005e08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800585c:	2300      	movs	r3, #0
}
 800585e:	4618      	mov	r0, r3
 8005860:	3708      	adds	r7, #8
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}

08005866 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005866:	b580      	push	{r7, lr}
 8005868:	b086      	sub	sp, #24
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
 800586e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d101      	bne.n	800587a <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e093      	b.n	80059a2 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005880:	b2db      	uxtb	r3, r3
 8005882:	2b00      	cmp	r3, #0
 8005884:	d106      	bne.n	8005894 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f7fb fb68 	bl	8000f64 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2202      	movs	r2, #2
 8005898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	6812      	ldr	r2, [r2, #0]
 80058a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058aa:	f023 0307 	bic.w	r3, r3, #7
 80058ae:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	3304      	adds	r3, #4
 80058b8:	4619      	mov	r1, r3
 80058ba:	4610      	mov	r0, r2
 80058bc:	f000 faa4 	bl	8005e08 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	699b      	ldr	r3, [r3, #24]
 80058ce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	6a1b      	ldr	r3, [r3, #32]
 80058d6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	697a      	ldr	r2, [r7, #20]
 80058de:	4313      	orrs	r3, r2
 80058e0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058e8:	f023 0303 	bic.w	r3, r3, #3
 80058ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	689a      	ldr	r2, [r3, #8]
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	699b      	ldr	r3, [r3, #24]
 80058f6:	021b      	lsls	r3, r3, #8
 80058f8:	4313      	orrs	r3, r2
 80058fa:	693a      	ldr	r2, [r7, #16]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005906:	f023 030c 	bic.w	r3, r3, #12
 800590a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005912:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005916:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	68da      	ldr	r2, [r3, #12]
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	69db      	ldr	r3, [r3, #28]
 8005920:	021b      	lsls	r3, r3, #8
 8005922:	4313      	orrs	r3, r2
 8005924:	693a      	ldr	r2, [r7, #16]
 8005926:	4313      	orrs	r3, r2
 8005928:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	011a      	lsls	r2, r3, #4
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	6a1b      	ldr	r3, [r3, #32]
 8005934:	031b      	lsls	r3, r3, #12
 8005936:	4313      	orrs	r3, r2
 8005938:	693a      	ldr	r2, [r7, #16]
 800593a:	4313      	orrs	r3, r2
 800593c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005944:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	685a      	ldr	r2, [r3, #4]
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	695b      	ldr	r3, [r3, #20]
 800594e:	011b      	lsls	r3, r3, #4
 8005950:	4313      	orrs	r3, r2
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	4313      	orrs	r3, r2
 8005956:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	697a      	ldr	r2, [r7, #20]
 800595e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	693a      	ldr	r2, [r7, #16]
 8005966:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3718      	adds	r7, #24
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}

080059aa <HAL_TIM_Encoder_DeInit>:
  * @brief  DeInitializes the TIM Encoder interface
  * @param  htim TIM Encoder Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_DeInit(TIM_HandleTypeDef *htim)
{
 80059aa:	b580      	push	{r7, lr}
 80059ac:	b082      	sub	sp, #8
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2202      	movs	r2, #2
 80059b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	6a1a      	ldr	r2, [r3, #32]
 80059c0:	f241 1311 	movw	r3, #4369	; 0x1111
 80059c4:	4013      	ands	r3, r2
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d10f      	bne.n	80059ea <HAL_TIM_Encoder_DeInit+0x40>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	6a1a      	ldr	r2, [r3, #32]
 80059d0:	f240 4344 	movw	r3, #1092	; 0x444
 80059d4:	4013      	ands	r3, r2
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d107      	bne.n	80059ea <HAL_TIM_Encoder_DeInit+0x40>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f022 0201 	bic.w	r2, r2, #1
 80059e8:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Encoder_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Encoder_MspDeInit(htim);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f7fb fb52 	bl	8001094 <HAL_TIM_Encoder_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_RESET);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2200      	movs	r2, #0
 80059fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_RESET);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_RESET);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_RESET);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3708      	adds	r7, #8
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}

08005a32 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a32:	b580      	push	{r7, lr}
 8005a34:	b082      	sub	sp, #8
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	691b      	ldr	r3, [r3, #16]
 8005a40:	f003 0302 	and.w	r3, r3, #2
 8005a44:	2b02      	cmp	r3, #2
 8005a46:	d122      	bne.n	8005a8e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	f003 0302 	and.w	r3, r3, #2
 8005a52:	2b02      	cmp	r3, #2
 8005a54:	d11b      	bne.n	8005a8e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f06f 0202 	mvn.w	r2, #2
 8005a5e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	699b      	ldr	r3, [r3, #24]
 8005a6c:	f003 0303 	and.w	r3, r3, #3
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d003      	beq.n	8005a7c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f7fa fff9 	bl	8000a6c <HAL_TIM_IC_CaptureCallback>
 8005a7a:	e005      	b.n	8005a88 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f000 f9a8 	bl	8005dd2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 f9ae 	bl	8005de4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	f003 0304 	and.w	r3, r3, #4
 8005a98:	2b04      	cmp	r3, #4
 8005a9a:	d122      	bne.n	8005ae2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	f003 0304 	and.w	r3, r3, #4
 8005aa6:	2b04      	cmp	r3, #4
 8005aa8:	d11b      	bne.n	8005ae2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f06f 0204 	mvn.w	r2, #4
 8005ab2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2202      	movs	r2, #2
 8005ab8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	699b      	ldr	r3, [r3, #24]
 8005ac0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d003      	beq.n	8005ad0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f7fa ffcf 	bl	8000a6c <HAL_TIM_IC_CaptureCallback>
 8005ace:	e005      	b.n	8005adc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f000 f97e 	bl	8005dd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 f984 	bl	8005de4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	691b      	ldr	r3, [r3, #16]
 8005ae8:	f003 0308 	and.w	r3, r3, #8
 8005aec:	2b08      	cmp	r3, #8
 8005aee:	d122      	bne.n	8005b36 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	f003 0308 	and.w	r3, r3, #8
 8005afa:	2b08      	cmp	r3, #8
 8005afc:	d11b      	bne.n	8005b36 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f06f 0208 	mvn.w	r2, #8
 8005b06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2204      	movs	r2, #4
 8005b0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	69db      	ldr	r3, [r3, #28]
 8005b14:	f003 0303 	and.w	r3, r3, #3
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d003      	beq.n	8005b24 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f7fa ffa5 	bl	8000a6c <HAL_TIM_IC_CaptureCallback>
 8005b22:	e005      	b.n	8005b30 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f000 f954 	bl	8005dd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 f95a 	bl	8005de4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	f003 0310 	and.w	r3, r3, #16
 8005b40:	2b10      	cmp	r3, #16
 8005b42:	d122      	bne.n	8005b8a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	f003 0310 	and.w	r3, r3, #16
 8005b4e:	2b10      	cmp	r3, #16
 8005b50:	d11b      	bne.n	8005b8a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f06f 0210 	mvn.w	r2, #16
 8005b5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2208      	movs	r2, #8
 8005b60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	69db      	ldr	r3, [r3, #28]
 8005b68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d003      	beq.n	8005b78 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f7fa ff7b 	bl	8000a6c <HAL_TIM_IC_CaptureCallback>
 8005b76:	e005      	b.n	8005b84 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f000 f92a 	bl	8005dd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 f930 	bl	8005de4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	691b      	ldr	r3, [r3, #16]
 8005b90:	f003 0301 	and.w	r3, r3, #1
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d10e      	bne.n	8005bb6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	f003 0301 	and.w	r3, r3, #1
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d107      	bne.n	8005bb6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f06f 0201 	mvn.w	r2, #1
 8005bae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f000 f905 	bl	8005dc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	691b      	ldr	r3, [r3, #16]
 8005bbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bc0:	2b80      	cmp	r3, #128	; 0x80
 8005bc2:	d10e      	bne.n	8005be2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bce:	2b80      	cmp	r3, #128	; 0x80
 8005bd0:	d107      	bne.n	8005be2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005bda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 fb64 	bl	80062aa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	691b      	ldr	r3, [r3, #16]
 8005be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bec:	2b40      	cmp	r3, #64	; 0x40
 8005bee:	d10e      	bne.n	8005c0e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bfa:	2b40      	cmp	r3, #64	; 0x40
 8005bfc:	d107      	bne.n	8005c0e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f000 f8f4 	bl	8005df6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	691b      	ldr	r3, [r3, #16]
 8005c14:	f003 0320 	and.w	r3, r3, #32
 8005c18:	2b20      	cmp	r3, #32
 8005c1a:	d10e      	bne.n	8005c3a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	f003 0320 	and.w	r3, r3, #32
 8005c26:	2b20      	cmp	r3, #32
 8005c28:	d107      	bne.n	8005c3a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f06f 0220 	mvn.w	r2, #32
 8005c32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f000 fb2f 	bl	8006298 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c3a:	bf00      	nop
 8005c3c:	3708      	adds	r7, #8
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
	...

08005c44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	60b9      	str	r1, [r7, #8]
 8005c4e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d101      	bne.n	8005c5e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005c5a:	2302      	movs	r3, #2
 8005c5c:	e0ac      	b.n	8005db8 <HAL_TIM_PWM_ConfigChannel+0x174>
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2201      	movs	r2, #1
 8005c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2b0c      	cmp	r3, #12
 8005c6a:	f200 809f 	bhi.w	8005dac <HAL_TIM_PWM_ConfigChannel+0x168>
 8005c6e:	a201      	add	r2, pc, #4	; (adr r2, 8005c74 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c74:	08005ca9 	.word	0x08005ca9
 8005c78:	08005dad 	.word	0x08005dad
 8005c7c:	08005dad 	.word	0x08005dad
 8005c80:	08005dad 	.word	0x08005dad
 8005c84:	08005ce9 	.word	0x08005ce9
 8005c88:	08005dad 	.word	0x08005dad
 8005c8c:	08005dad 	.word	0x08005dad
 8005c90:	08005dad 	.word	0x08005dad
 8005c94:	08005d2b 	.word	0x08005d2b
 8005c98:	08005dad 	.word	0x08005dad
 8005c9c:	08005dad 	.word	0x08005dad
 8005ca0:	08005dad 	.word	0x08005dad
 8005ca4:	08005d6b 	.word	0x08005d6b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	68b9      	ldr	r1, [r7, #8]
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f000 f90c 	bl	8005ecc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	699a      	ldr	r2, [r3, #24]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f042 0208 	orr.w	r2, r2, #8
 8005cc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	699a      	ldr	r2, [r3, #24]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f022 0204 	bic.w	r2, r2, #4
 8005cd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	6999      	ldr	r1, [r3, #24]
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	691a      	ldr	r2, [r3, #16]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	430a      	orrs	r2, r1
 8005ce4:	619a      	str	r2, [r3, #24]
      break;
 8005ce6:	e062      	b.n	8005dae <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	68b9      	ldr	r1, [r7, #8]
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f000 f952 	bl	8005f98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	699a      	ldr	r2, [r3, #24]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	699a      	ldr	r2, [r3, #24]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	6999      	ldr	r1, [r3, #24]
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	021a      	lsls	r2, r3, #8
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	430a      	orrs	r2, r1
 8005d26:	619a      	str	r2, [r3, #24]
      break;
 8005d28:	e041      	b.n	8005dae <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	68b9      	ldr	r1, [r7, #8]
 8005d30:	4618      	mov	r0, r3
 8005d32:	f000 f99b 	bl	800606c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	69da      	ldr	r2, [r3, #28]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f042 0208 	orr.w	r2, r2, #8
 8005d44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	69da      	ldr	r2, [r3, #28]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f022 0204 	bic.w	r2, r2, #4
 8005d54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	69d9      	ldr	r1, [r3, #28]
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	691a      	ldr	r2, [r3, #16]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	430a      	orrs	r2, r1
 8005d66:	61da      	str	r2, [r3, #28]
      break;
 8005d68:	e021      	b.n	8005dae <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68b9      	ldr	r1, [r7, #8]
 8005d70:	4618      	mov	r0, r3
 8005d72:	f000 f9e5 	bl	8006140 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	69da      	ldr	r2, [r3, #28]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	69da      	ldr	r2, [r3, #28]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	69d9      	ldr	r1, [r3, #28]
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	021a      	lsls	r2, r3, #8
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	430a      	orrs	r2, r1
 8005da8:	61da      	str	r2, [r3, #28]
      break;
 8005daa:	e000      	b.n	8005dae <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005dac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005db6:	2300      	movs	r3, #0
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3710      	adds	r7, #16
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005dc8:	bf00      	nop
 8005dca:	370c      	adds	r7, #12
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bc80      	pop	{r7}
 8005dd0:	4770      	bx	lr

08005dd2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005dd2:	b480      	push	{r7}
 8005dd4:	b083      	sub	sp, #12
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005dda:	bf00      	nop
 8005ddc:	370c      	adds	r7, #12
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bc80      	pop	{r7}
 8005de2:	4770      	bx	lr

08005de4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005dec:	bf00      	nop
 8005dee:	370c      	adds	r7, #12
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bc80      	pop	{r7}
 8005df4:	4770      	bx	lr

08005df6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005df6:	b480      	push	{r7}
 8005df8:	b083      	sub	sp, #12
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005dfe:	bf00      	nop
 8005e00:	370c      	adds	r7, #12
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bc80      	pop	{r7}
 8005e06:	4770      	bx	lr

08005e08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b085      	sub	sp, #20
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4a29      	ldr	r2, [pc, #164]	; (8005ec0 <TIM_Base_SetConfig+0xb8>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d00b      	beq.n	8005e38 <TIM_Base_SetConfig+0x30>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e26:	d007      	beq.n	8005e38 <TIM_Base_SetConfig+0x30>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4a26      	ldr	r2, [pc, #152]	; (8005ec4 <TIM_Base_SetConfig+0xbc>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d003      	beq.n	8005e38 <TIM_Base_SetConfig+0x30>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4a25      	ldr	r2, [pc, #148]	; (8005ec8 <TIM_Base_SetConfig+0xc0>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d108      	bne.n	8005e4a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	68fa      	ldr	r2, [r7, #12]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a1c      	ldr	r2, [pc, #112]	; (8005ec0 <TIM_Base_SetConfig+0xb8>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d00b      	beq.n	8005e6a <TIM_Base_SetConfig+0x62>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e58:	d007      	beq.n	8005e6a <TIM_Base_SetConfig+0x62>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a19      	ldr	r2, [pc, #100]	; (8005ec4 <TIM_Base_SetConfig+0xbc>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d003      	beq.n	8005e6a <TIM_Base_SetConfig+0x62>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4a18      	ldr	r2, [pc, #96]	; (8005ec8 <TIM_Base_SetConfig+0xc0>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d108      	bne.n	8005e7c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	68fa      	ldr	r2, [r7, #12]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	695b      	ldr	r3, [r3, #20]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	68fa      	ldr	r2, [r7, #12]
 8005e8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	689a      	ldr	r2, [r3, #8]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	4a07      	ldr	r2, [pc, #28]	; (8005ec0 <TIM_Base_SetConfig+0xb8>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d103      	bne.n	8005eb0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	691a      	ldr	r2, [r3, #16]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	615a      	str	r2, [r3, #20]
}
 8005eb6:	bf00      	nop
 8005eb8:	3714      	adds	r7, #20
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bc80      	pop	{r7}
 8005ebe:	4770      	bx	lr
 8005ec0:	40012c00 	.word	0x40012c00
 8005ec4:	40000400 	.word	0x40000400
 8005ec8:	40000800 	.word	0x40000800

08005ecc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b087      	sub	sp, #28
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6a1b      	ldr	r3, [r3, #32]
 8005eda:	f023 0201 	bic.w	r2, r3, #1
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6a1b      	ldr	r3, [r3, #32]
 8005ee6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	699b      	ldr	r3, [r3, #24]
 8005ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005efa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f023 0303 	bic.w	r3, r3, #3
 8005f02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	f023 0302 	bic.w	r3, r3, #2
 8005f14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	697a      	ldr	r2, [r7, #20]
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	4a1c      	ldr	r2, [pc, #112]	; (8005f94 <TIM_OC1_SetConfig+0xc8>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d10c      	bne.n	8005f42 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	f023 0308 	bic.w	r3, r3, #8
 8005f2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	697a      	ldr	r2, [r7, #20]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	f023 0304 	bic.w	r3, r3, #4
 8005f40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	4a13      	ldr	r2, [pc, #76]	; (8005f94 <TIM_OC1_SetConfig+0xc8>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d111      	bne.n	8005f6e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	695b      	ldr	r3, [r3, #20]
 8005f5e:	693a      	ldr	r2, [r7, #16]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	699b      	ldr	r3, [r3, #24]
 8005f68:	693a      	ldr	r2, [r7, #16]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	693a      	ldr	r2, [r7, #16]
 8005f72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	68fa      	ldr	r2, [r7, #12]
 8005f78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	685a      	ldr	r2, [r3, #4]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	697a      	ldr	r2, [r7, #20]
 8005f86:	621a      	str	r2, [r3, #32]
}
 8005f88:	bf00      	nop
 8005f8a:	371c      	adds	r7, #28
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bc80      	pop	{r7}
 8005f90:	4770      	bx	lr
 8005f92:	bf00      	nop
 8005f94:	40012c00 	.word	0x40012c00

08005f98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b087      	sub	sp, #28
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a1b      	ldr	r3, [r3, #32]
 8005fa6:	f023 0210 	bic.w	r2, r3, #16
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6a1b      	ldr	r3, [r3, #32]
 8005fb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	699b      	ldr	r3, [r3, #24]
 8005fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	021b      	lsls	r3, r3, #8
 8005fd6:	68fa      	ldr	r2, [r7, #12]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	f023 0320 	bic.w	r3, r3, #32
 8005fe2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	011b      	lsls	r3, r3, #4
 8005fea:	697a      	ldr	r2, [r7, #20]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4a1d      	ldr	r2, [pc, #116]	; (8006068 <TIM_OC2_SetConfig+0xd0>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d10d      	bne.n	8006014 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ffe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	011b      	lsls	r3, r3, #4
 8006006:	697a      	ldr	r2, [r7, #20]
 8006008:	4313      	orrs	r3, r2
 800600a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006012:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a14      	ldr	r2, [pc, #80]	; (8006068 <TIM_OC2_SetConfig+0xd0>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d113      	bne.n	8006044 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006022:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800602a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	695b      	ldr	r3, [r3, #20]
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	693a      	ldr	r2, [r7, #16]
 8006034:	4313      	orrs	r3, r2
 8006036:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	699b      	ldr	r3, [r3, #24]
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	693a      	ldr	r2, [r7, #16]
 8006040:	4313      	orrs	r3, r2
 8006042:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	693a      	ldr	r2, [r7, #16]
 8006048:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	68fa      	ldr	r2, [r7, #12]
 800604e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	685a      	ldr	r2, [r3, #4]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	697a      	ldr	r2, [r7, #20]
 800605c:	621a      	str	r2, [r3, #32]
}
 800605e:	bf00      	nop
 8006060:	371c      	adds	r7, #28
 8006062:	46bd      	mov	sp, r7
 8006064:	bc80      	pop	{r7}
 8006066:	4770      	bx	lr
 8006068:	40012c00 	.word	0x40012c00

0800606c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800606c:	b480      	push	{r7}
 800606e:	b087      	sub	sp, #28
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a1b      	ldr	r3, [r3, #32]
 800607a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6a1b      	ldr	r3, [r3, #32]
 8006086:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	69db      	ldr	r3, [r3, #28]
 8006092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800609a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f023 0303 	bic.w	r3, r3, #3
 80060a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68fa      	ldr	r2, [r7, #12]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80060b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	021b      	lsls	r3, r3, #8
 80060bc:	697a      	ldr	r2, [r7, #20]
 80060be:	4313      	orrs	r3, r2
 80060c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4a1d      	ldr	r2, [pc, #116]	; (800613c <TIM_OC3_SetConfig+0xd0>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d10d      	bne.n	80060e6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	68db      	ldr	r3, [r3, #12]
 80060d6:	021b      	lsls	r3, r3, #8
 80060d8:	697a      	ldr	r2, [r7, #20]
 80060da:	4313      	orrs	r3, r2
 80060dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	4a14      	ldr	r2, [pc, #80]	; (800613c <TIM_OC3_SetConfig+0xd0>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d113      	bne.n	8006116 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	695b      	ldr	r3, [r3, #20]
 8006102:	011b      	lsls	r3, r3, #4
 8006104:	693a      	ldr	r2, [r7, #16]
 8006106:	4313      	orrs	r3, r2
 8006108:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	699b      	ldr	r3, [r3, #24]
 800610e:	011b      	lsls	r3, r3, #4
 8006110:	693a      	ldr	r2, [r7, #16]
 8006112:	4313      	orrs	r3, r2
 8006114:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	693a      	ldr	r2, [r7, #16]
 800611a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	68fa      	ldr	r2, [r7, #12]
 8006120:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	685a      	ldr	r2, [r3, #4]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	697a      	ldr	r2, [r7, #20]
 800612e:	621a      	str	r2, [r3, #32]
}
 8006130:	bf00      	nop
 8006132:	371c      	adds	r7, #28
 8006134:	46bd      	mov	sp, r7
 8006136:	bc80      	pop	{r7}
 8006138:	4770      	bx	lr
 800613a:	bf00      	nop
 800613c:	40012c00 	.word	0x40012c00

08006140 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006140:	b480      	push	{r7}
 8006142:	b087      	sub	sp, #28
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6a1b      	ldr	r3, [r3, #32]
 800614e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a1b      	ldr	r3, [r3, #32]
 800615a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	69db      	ldr	r3, [r3, #28]
 8006166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800616e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006176:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	021b      	lsls	r3, r3, #8
 800617e:	68fa      	ldr	r2, [r7, #12]
 8006180:	4313      	orrs	r3, r2
 8006182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800618a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	031b      	lsls	r3, r3, #12
 8006192:	693a      	ldr	r2, [r7, #16]
 8006194:	4313      	orrs	r3, r2
 8006196:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4a0f      	ldr	r2, [pc, #60]	; (80061d8 <TIM_OC4_SetConfig+0x98>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d109      	bne.n	80061b4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	695b      	ldr	r3, [r3, #20]
 80061ac:	019b      	lsls	r3, r3, #6
 80061ae:	697a      	ldr	r2, [r7, #20]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	697a      	ldr	r2, [r7, #20]
 80061b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	68fa      	ldr	r2, [r7, #12]
 80061be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	685a      	ldr	r2, [r3, #4]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	693a      	ldr	r2, [r7, #16]
 80061cc:	621a      	str	r2, [r3, #32]
}
 80061ce:	bf00      	nop
 80061d0:	371c      	adds	r7, #28
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bc80      	pop	{r7}
 80061d6:	4770      	bx	lr
 80061d8:	40012c00 	.word	0x40012c00

080061dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061dc:	b480      	push	{r7}
 80061de:	b085      	sub	sp, #20
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d101      	bne.n	80061f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061f0:	2302      	movs	r3, #2
 80061f2:	e046      	b.n	8006282 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2202      	movs	r2, #2
 8006200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800621a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	68fa      	ldr	r2, [r7, #12]
 8006222:	4313      	orrs	r3, r2
 8006224:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	68fa      	ldr	r2, [r7, #12]
 800622c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a16      	ldr	r2, [pc, #88]	; (800628c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d00e      	beq.n	8006256 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006240:	d009      	beq.n	8006256 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a12      	ldr	r2, [pc, #72]	; (8006290 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d004      	beq.n	8006256 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a10      	ldr	r2, [pc, #64]	; (8006294 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d10c      	bne.n	8006270 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800625c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	68ba      	ldr	r2, [r7, #8]
 8006264:	4313      	orrs	r3, r2
 8006266:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	68ba      	ldr	r2, [r7, #8]
 800626e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2201      	movs	r2, #1
 8006274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006280:	2300      	movs	r3, #0
}
 8006282:	4618      	mov	r0, r3
 8006284:	3714      	adds	r7, #20
 8006286:	46bd      	mov	sp, r7
 8006288:	bc80      	pop	{r7}
 800628a:	4770      	bx	lr
 800628c:	40012c00 	.word	0x40012c00
 8006290:	40000400 	.word	0x40000400
 8006294:	40000800 	.word	0x40000800

08006298 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062a0:	bf00      	nop
 80062a2:	370c      	adds	r7, #12
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bc80      	pop	{r7}
 80062a8:	4770      	bx	lr

080062aa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062aa:	b480      	push	{r7}
 80062ac:	b083      	sub	sp, #12
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062b2:	bf00      	nop
 80062b4:	370c      	adds	r7, #12
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bc80      	pop	{r7}
 80062ba:	4770      	bx	lr

080062bc <__errno>:
 80062bc:	4b01      	ldr	r3, [pc, #4]	; (80062c4 <__errno+0x8>)
 80062be:	6818      	ldr	r0, [r3, #0]
 80062c0:	4770      	bx	lr
 80062c2:	bf00      	nop
 80062c4:	20000010 	.word	0x20000010

080062c8 <__libc_init_array>:
 80062c8:	b570      	push	{r4, r5, r6, lr}
 80062ca:	2500      	movs	r5, #0
 80062cc:	4e0c      	ldr	r6, [pc, #48]	; (8006300 <__libc_init_array+0x38>)
 80062ce:	4c0d      	ldr	r4, [pc, #52]	; (8006304 <__libc_init_array+0x3c>)
 80062d0:	1ba4      	subs	r4, r4, r6
 80062d2:	10a4      	asrs	r4, r4, #2
 80062d4:	42a5      	cmp	r5, r4
 80062d6:	d109      	bne.n	80062ec <__libc_init_array+0x24>
 80062d8:	f000 fc34 	bl	8006b44 <_init>
 80062dc:	2500      	movs	r5, #0
 80062de:	4e0a      	ldr	r6, [pc, #40]	; (8006308 <__libc_init_array+0x40>)
 80062e0:	4c0a      	ldr	r4, [pc, #40]	; (800630c <__libc_init_array+0x44>)
 80062e2:	1ba4      	subs	r4, r4, r6
 80062e4:	10a4      	asrs	r4, r4, #2
 80062e6:	42a5      	cmp	r5, r4
 80062e8:	d105      	bne.n	80062f6 <__libc_init_array+0x2e>
 80062ea:	bd70      	pop	{r4, r5, r6, pc}
 80062ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80062f0:	4798      	blx	r3
 80062f2:	3501      	adds	r5, #1
 80062f4:	e7ee      	b.n	80062d4 <__libc_init_array+0xc>
 80062f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80062fa:	4798      	blx	r3
 80062fc:	3501      	adds	r5, #1
 80062fe:	e7f2      	b.n	80062e6 <__libc_init_array+0x1e>
 8006300:	08007f38 	.word	0x08007f38
 8006304:	08007f38 	.word	0x08007f38
 8006308:	08007f38 	.word	0x08007f38
 800630c:	08007f3c 	.word	0x08007f3c

08006310 <memset>:
 8006310:	4603      	mov	r3, r0
 8006312:	4402      	add	r2, r0
 8006314:	4293      	cmp	r3, r2
 8006316:	d100      	bne.n	800631a <memset+0xa>
 8006318:	4770      	bx	lr
 800631a:	f803 1b01 	strb.w	r1, [r3], #1
 800631e:	e7f9      	b.n	8006314 <memset+0x4>

08006320 <siprintf>:
 8006320:	b40e      	push	{r1, r2, r3}
 8006322:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006326:	b500      	push	{lr}
 8006328:	b09c      	sub	sp, #112	; 0x70
 800632a:	ab1d      	add	r3, sp, #116	; 0x74
 800632c:	9002      	str	r0, [sp, #8]
 800632e:	9006      	str	r0, [sp, #24]
 8006330:	9107      	str	r1, [sp, #28]
 8006332:	9104      	str	r1, [sp, #16]
 8006334:	4808      	ldr	r0, [pc, #32]	; (8006358 <siprintf+0x38>)
 8006336:	4909      	ldr	r1, [pc, #36]	; (800635c <siprintf+0x3c>)
 8006338:	f853 2b04 	ldr.w	r2, [r3], #4
 800633c:	9105      	str	r1, [sp, #20]
 800633e:	6800      	ldr	r0, [r0, #0]
 8006340:	a902      	add	r1, sp, #8
 8006342:	9301      	str	r3, [sp, #4]
 8006344:	f000 f8c0 	bl	80064c8 <_svfiprintf_r>
 8006348:	2200      	movs	r2, #0
 800634a:	9b02      	ldr	r3, [sp, #8]
 800634c:	701a      	strb	r2, [r3, #0]
 800634e:	b01c      	add	sp, #112	; 0x70
 8006350:	f85d eb04 	ldr.w	lr, [sp], #4
 8006354:	b003      	add	sp, #12
 8006356:	4770      	bx	lr
 8006358:	20000010 	.word	0x20000010
 800635c:	ffff0208 	.word	0xffff0208

08006360 <_malloc_r>:
 8006360:	b570      	push	{r4, r5, r6, lr}
 8006362:	1ccd      	adds	r5, r1, #3
 8006364:	f025 0503 	bic.w	r5, r5, #3
 8006368:	3508      	adds	r5, #8
 800636a:	2d0c      	cmp	r5, #12
 800636c:	bf38      	it	cc
 800636e:	250c      	movcc	r5, #12
 8006370:	2d00      	cmp	r5, #0
 8006372:	4606      	mov	r6, r0
 8006374:	db01      	blt.n	800637a <_malloc_r+0x1a>
 8006376:	42a9      	cmp	r1, r5
 8006378:	d903      	bls.n	8006382 <_malloc_r+0x22>
 800637a:	230c      	movs	r3, #12
 800637c:	6033      	str	r3, [r6, #0]
 800637e:	2000      	movs	r0, #0
 8006380:	bd70      	pop	{r4, r5, r6, pc}
 8006382:	f000 fb63 	bl	8006a4c <__malloc_lock>
 8006386:	4a21      	ldr	r2, [pc, #132]	; (800640c <_malloc_r+0xac>)
 8006388:	6814      	ldr	r4, [r2, #0]
 800638a:	4621      	mov	r1, r4
 800638c:	b991      	cbnz	r1, 80063b4 <_malloc_r+0x54>
 800638e:	4c20      	ldr	r4, [pc, #128]	; (8006410 <_malloc_r+0xb0>)
 8006390:	6823      	ldr	r3, [r4, #0]
 8006392:	b91b      	cbnz	r3, 800639c <_malloc_r+0x3c>
 8006394:	4630      	mov	r0, r6
 8006396:	f000 fb17 	bl	80069c8 <_sbrk_r>
 800639a:	6020      	str	r0, [r4, #0]
 800639c:	4629      	mov	r1, r5
 800639e:	4630      	mov	r0, r6
 80063a0:	f000 fb12 	bl	80069c8 <_sbrk_r>
 80063a4:	1c43      	adds	r3, r0, #1
 80063a6:	d124      	bne.n	80063f2 <_malloc_r+0x92>
 80063a8:	230c      	movs	r3, #12
 80063aa:	4630      	mov	r0, r6
 80063ac:	6033      	str	r3, [r6, #0]
 80063ae:	f000 fb4e 	bl	8006a4e <__malloc_unlock>
 80063b2:	e7e4      	b.n	800637e <_malloc_r+0x1e>
 80063b4:	680b      	ldr	r3, [r1, #0]
 80063b6:	1b5b      	subs	r3, r3, r5
 80063b8:	d418      	bmi.n	80063ec <_malloc_r+0x8c>
 80063ba:	2b0b      	cmp	r3, #11
 80063bc:	d90f      	bls.n	80063de <_malloc_r+0x7e>
 80063be:	600b      	str	r3, [r1, #0]
 80063c0:	18cc      	adds	r4, r1, r3
 80063c2:	50cd      	str	r5, [r1, r3]
 80063c4:	4630      	mov	r0, r6
 80063c6:	f000 fb42 	bl	8006a4e <__malloc_unlock>
 80063ca:	f104 000b 	add.w	r0, r4, #11
 80063ce:	1d23      	adds	r3, r4, #4
 80063d0:	f020 0007 	bic.w	r0, r0, #7
 80063d4:	1ac3      	subs	r3, r0, r3
 80063d6:	d0d3      	beq.n	8006380 <_malloc_r+0x20>
 80063d8:	425a      	negs	r2, r3
 80063da:	50e2      	str	r2, [r4, r3]
 80063dc:	e7d0      	b.n	8006380 <_malloc_r+0x20>
 80063de:	684b      	ldr	r3, [r1, #4]
 80063e0:	428c      	cmp	r4, r1
 80063e2:	bf16      	itet	ne
 80063e4:	6063      	strne	r3, [r4, #4]
 80063e6:	6013      	streq	r3, [r2, #0]
 80063e8:	460c      	movne	r4, r1
 80063ea:	e7eb      	b.n	80063c4 <_malloc_r+0x64>
 80063ec:	460c      	mov	r4, r1
 80063ee:	6849      	ldr	r1, [r1, #4]
 80063f0:	e7cc      	b.n	800638c <_malloc_r+0x2c>
 80063f2:	1cc4      	adds	r4, r0, #3
 80063f4:	f024 0403 	bic.w	r4, r4, #3
 80063f8:	42a0      	cmp	r0, r4
 80063fa:	d005      	beq.n	8006408 <_malloc_r+0xa8>
 80063fc:	1a21      	subs	r1, r4, r0
 80063fe:	4630      	mov	r0, r6
 8006400:	f000 fae2 	bl	80069c8 <_sbrk_r>
 8006404:	3001      	adds	r0, #1
 8006406:	d0cf      	beq.n	80063a8 <_malloc_r+0x48>
 8006408:	6025      	str	r5, [r4, #0]
 800640a:	e7db      	b.n	80063c4 <_malloc_r+0x64>
 800640c:	200004d4 	.word	0x200004d4
 8006410:	200004d8 	.word	0x200004d8

08006414 <__ssputs_r>:
 8006414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006418:	688e      	ldr	r6, [r1, #8]
 800641a:	4682      	mov	sl, r0
 800641c:	429e      	cmp	r6, r3
 800641e:	460c      	mov	r4, r1
 8006420:	4690      	mov	r8, r2
 8006422:	4699      	mov	r9, r3
 8006424:	d837      	bhi.n	8006496 <__ssputs_r+0x82>
 8006426:	898a      	ldrh	r2, [r1, #12]
 8006428:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800642c:	d031      	beq.n	8006492 <__ssputs_r+0x7e>
 800642e:	2302      	movs	r3, #2
 8006430:	6825      	ldr	r5, [r4, #0]
 8006432:	6909      	ldr	r1, [r1, #16]
 8006434:	1a6f      	subs	r7, r5, r1
 8006436:	6965      	ldr	r5, [r4, #20]
 8006438:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800643c:	fb95 f5f3 	sdiv	r5, r5, r3
 8006440:	f109 0301 	add.w	r3, r9, #1
 8006444:	443b      	add	r3, r7
 8006446:	429d      	cmp	r5, r3
 8006448:	bf38      	it	cc
 800644a:	461d      	movcc	r5, r3
 800644c:	0553      	lsls	r3, r2, #21
 800644e:	d530      	bpl.n	80064b2 <__ssputs_r+0x9e>
 8006450:	4629      	mov	r1, r5
 8006452:	f7ff ff85 	bl	8006360 <_malloc_r>
 8006456:	4606      	mov	r6, r0
 8006458:	b950      	cbnz	r0, 8006470 <__ssputs_r+0x5c>
 800645a:	230c      	movs	r3, #12
 800645c:	f04f 30ff 	mov.w	r0, #4294967295
 8006460:	f8ca 3000 	str.w	r3, [sl]
 8006464:	89a3      	ldrh	r3, [r4, #12]
 8006466:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800646a:	81a3      	strh	r3, [r4, #12]
 800646c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006470:	463a      	mov	r2, r7
 8006472:	6921      	ldr	r1, [r4, #16]
 8006474:	f000 fac6 	bl	8006a04 <memcpy>
 8006478:	89a3      	ldrh	r3, [r4, #12]
 800647a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800647e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006482:	81a3      	strh	r3, [r4, #12]
 8006484:	6126      	str	r6, [r4, #16]
 8006486:	443e      	add	r6, r7
 8006488:	6026      	str	r6, [r4, #0]
 800648a:	464e      	mov	r6, r9
 800648c:	6165      	str	r5, [r4, #20]
 800648e:	1bed      	subs	r5, r5, r7
 8006490:	60a5      	str	r5, [r4, #8]
 8006492:	454e      	cmp	r6, r9
 8006494:	d900      	bls.n	8006498 <__ssputs_r+0x84>
 8006496:	464e      	mov	r6, r9
 8006498:	4632      	mov	r2, r6
 800649a:	4641      	mov	r1, r8
 800649c:	6820      	ldr	r0, [r4, #0]
 800649e:	f000 fabc 	bl	8006a1a <memmove>
 80064a2:	68a3      	ldr	r3, [r4, #8]
 80064a4:	2000      	movs	r0, #0
 80064a6:	1b9b      	subs	r3, r3, r6
 80064a8:	60a3      	str	r3, [r4, #8]
 80064aa:	6823      	ldr	r3, [r4, #0]
 80064ac:	441e      	add	r6, r3
 80064ae:	6026      	str	r6, [r4, #0]
 80064b0:	e7dc      	b.n	800646c <__ssputs_r+0x58>
 80064b2:	462a      	mov	r2, r5
 80064b4:	f000 fb18 	bl	8006ae8 <_realloc_r>
 80064b8:	4606      	mov	r6, r0
 80064ba:	2800      	cmp	r0, #0
 80064bc:	d1e2      	bne.n	8006484 <__ssputs_r+0x70>
 80064be:	6921      	ldr	r1, [r4, #16]
 80064c0:	4650      	mov	r0, sl
 80064c2:	f000 fac5 	bl	8006a50 <_free_r>
 80064c6:	e7c8      	b.n	800645a <__ssputs_r+0x46>

080064c8 <_svfiprintf_r>:
 80064c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064cc:	461d      	mov	r5, r3
 80064ce:	898b      	ldrh	r3, [r1, #12]
 80064d0:	b09d      	sub	sp, #116	; 0x74
 80064d2:	061f      	lsls	r7, r3, #24
 80064d4:	4680      	mov	r8, r0
 80064d6:	460c      	mov	r4, r1
 80064d8:	4616      	mov	r6, r2
 80064da:	d50f      	bpl.n	80064fc <_svfiprintf_r+0x34>
 80064dc:	690b      	ldr	r3, [r1, #16]
 80064de:	b96b      	cbnz	r3, 80064fc <_svfiprintf_r+0x34>
 80064e0:	2140      	movs	r1, #64	; 0x40
 80064e2:	f7ff ff3d 	bl	8006360 <_malloc_r>
 80064e6:	6020      	str	r0, [r4, #0]
 80064e8:	6120      	str	r0, [r4, #16]
 80064ea:	b928      	cbnz	r0, 80064f8 <_svfiprintf_r+0x30>
 80064ec:	230c      	movs	r3, #12
 80064ee:	f8c8 3000 	str.w	r3, [r8]
 80064f2:	f04f 30ff 	mov.w	r0, #4294967295
 80064f6:	e0c8      	b.n	800668a <_svfiprintf_r+0x1c2>
 80064f8:	2340      	movs	r3, #64	; 0x40
 80064fa:	6163      	str	r3, [r4, #20]
 80064fc:	2300      	movs	r3, #0
 80064fe:	9309      	str	r3, [sp, #36]	; 0x24
 8006500:	2320      	movs	r3, #32
 8006502:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006506:	2330      	movs	r3, #48	; 0x30
 8006508:	f04f 0b01 	mov.w	fp, #1
 800650c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006510:	9503      	str	r5, [sp, #12]
 8006512:	4637      	mov	r7, r6
 8006514:	463d      	mov	r5, r7
 8006516:	f815 3b01 	ldrb.w	r3, [r5], #1
 800651a:	b10b      	cbz	r3, 8006520 <_svfiprintf_r+0x58>
 800651c:	2b25      	cmp	r3, #37	; 0x25
 800651e:	d13e      	bne.n	800659e <_svfiprintf_r+0xd6>
 8006520:	ebb7 0a06 	subs.w	sl, r7, r6
 8006524:	d00b      	beq.n	800653e <_svfiprintf_r+0x76>
 8006526:	4653      	mov	r3, sl
 8006528:	4632      	mov	r2, r6
 800652a:	4621      	mov	r1, r4
 800652c:	4640      	mov	r0, r8
 800652e:	f7ff ff71 	bl	8006414 <__ssputs_r>
 8006532:	3001      	adds	r0, #1
 8006534:	f000 80a4 	beq.w	8006680 <_svfiprintf_r+0x1b8>
 8006538:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800653a:	4453      	add	r3, sl
 800653c:	9309      	str	r3, [sp, #36]	; 0x24
 800653e:	783b      	ldrb	r3, [r7, #0]
 8006540:	2b00      	cmp	r3, #0
 8006542:	f000 809d 	beq.w	8006680 <_svfiprintf_r+0x1b8>
 8006546:	2300      	movs	r3, #0
 8006548:	f04f 32ff 	mov.w	r2, #4294967295
 800654c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006550:	9304      	str	r3, [sp, #16]
 8006552:	9307      	str	r3, [sp, #28]
 8006554:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006558:	931a      	str	r3, [sp, #104]	; 0x68
 800655a:	462f      	mov	r7, r5
 800655c:	2205      	movs	r2, #5
 800655e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006562:	4850      	ldr	r0, [pc, #320]	; (80066a4 <_svfiprintf_r+0x1dc>)
 8006564:	f000 fa40 	bl	80069e8 <memchr>
 8006568:	9b04      	ldr	r3, [sp, #16]
 800656a:	b9d0      	cbnz	r0, 80065a2 <_svfiprintf_r+0xda>
 800656c:	06d9      	lsls	r1, r3, #27
 800656e:	bf44      	itt	mi
 8006570:	2220      	movmi	r2, #32
 8006572:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006576:	071a      	lsls	r2, r3, #28
 8006578:	bf44      	itt	mi
 800657a:	222b      	movmi	r2, #43	; 0x2b
 800657c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006580:	782a      	ldrb	r2, [r5, #0]
 8006582:	2a2a      	cmp	r2, #42	; 0x2a
 8006584:	d015      	beq.n	80065b2 <_svfiprintf_r+0xea>
 8006586:	462f      	mov	r7, r5
 8006588:	2000      	movs	r0, #0
 800658a:	250a      	movs	r5, #10
 800658c:	9a07      	ldr	r2, [sp, #28]
 800658e:	4639      	mov	r1, r7
 8006590:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006594:	3b30      	subs	r3, #48	; 0x30
 8006596:	2b09      	cmp	r3, #9
 8006598:	d94d      	bls.n	8006636 <_svfiprintf_r+0x16e>
 800659a:	b1b8      	cbz	r0, 80065cc <_svfiprintf_r+0x104>
 800659c:	e00f      	b.n	80065be <_svfiprintf_r+0xf6>
 800659e:	462f      	mov	r7, r5
 80065a0:	e7b8      	b.n	8006514 <_svfiprintf_r+0x4c>
 80065a2:	4a40      	ldr	r2, [pc, #256]	; (80066a4 <_svfiprintf_r+0x1dc>)
 80065a4:	463d      	mov	r5, r7
 80065a6:	1a80      	subs	r0, r0, r2
 80065a8:	fa0b f000 	lsl.w	r0, fp, r0
 80065ac:	4318      	orrs	r0, r3
 80065ae:	9004      	str	r0, [sp, #16]
 80065b0:	e7d3      	b.n	800655a <_svfiprintf_r+0x92>
 80065b2:	9a03      	ldr	r2, [sp, #12]
 80065b4:	1d11      	adds	r1, r2, #4
 80065b6:	6812      	ldr	r2, [r2, #0]
 80065b8:	9103      	str	r1, [sp, #12]
 80065ba:	2a00      	cmp	r2, #0
 80065bc:	db01      	blt.n	80065c2 <_svfiprintf_r+0xfa>
 80065be:	9207      	str	r2, [sp, #28]
 80065c0:	e004      	b.n	80065cc <_svfiprintf_r+0x104>
 80065c2:	4252      	negs	r2, r2
 80065c4:	f043 0302 	orr.w	r3, r3, #2
 80065c8:	9207      	str	r2, [sp, #28]
 80065ca:	9304      	str	r3, [sp, #16]
 80065cc:	783b      	ldrb	r3, [r7, #0]
 80065ce:	2b2e      	cmp	r3, #46	; 0x2e
 80065d0:	d10c      	bne.n	80065ec <_svfiprintf_r+0x124>
 80065d2:	787b      	ldrb	r3, [r7, #1]
 80065d4:	2b2a      	cmp	r3, #42	; 0x2a
 80065d6:	d133      	bne.n	8006640 <_svfiprintf_r+0x178>
 80065d8:	9b03      	ldr	r3, [sp, #12]
 80065da:	3702      	adds	r7, #2
 80065dc:	1d1a      	adds	r2, r3, #4
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	9203      	str	r2, [sp, #12]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	bfb8      	it	lt
 80065e6:	f04f 33ff 	movlt.w	r3, #4294967295
 80065ea:	9305      	str	r3, [sp, #20]
 80065ec:	4d2e      	ldr	r5, [pc, #184]	; (80066a8 <_svfiprintf_r+0x1e0>)
 80065ee:	2203      	movs	r2, #3
 80065f0:	7839      	ldrb	r1, [r7, #0]
 80065f2:	4628      	mov	r0, r5
 80065f4:	f000 f9f8 	bl	80069e8 <memchr>
 80065f8:	b138      	cbz	r0, 800660a <_svfiprintf_r+0x142>
 80065fa:	2340      	movs	r3, #64	; 0x40
 80065fc:	1b40      	subs	r0, r0, r5
 80065fe:	fa03 f000 	lsl.w	r0, r3, r0
 8006602:	9b04      	ldr	r3, [sp, #16]
 8006604:	3701      	adds	r7, #1
 8006606:	4303      	orrs	r3, r0
 8006608:	9304      	str	r3, [sp, #16]
 800660a:	7839      	ldrb	r1, [r7, #0]
 800660c:	2206      	movs	r2, #6
 800660e:	4827      	ldr	r0, [pc, #156]	; (80066ac <_svfiprintf_r+0x1e4>)
 8006610:	1c7e      	adds	r6, r7, #1
 8006612:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006616:	f000 f9e7 	bl	80069e8 <memchr>
 800661a:	2800      	cmp	r0, #0
 800661c:	d038      	beq.n	8006690 <_svfiprintf_r+0x1c8>
 800661e:	4b24      	ldr	r3, [pc, #144]	; (80066b0 <_svfiprintf_r+0x1e8>)
 8006620:	bb13      	cbnz	r3, 8006668 <_svfiprintf_r+0x1a0>
 8006622:	9b03      	ldr	r3, [sp, #12]
 8006624:	3307      	adds	r3, #7
 8006626:	f023 0307 	bic.w	r3, r3, #7
 800662a:	3308      	adds	r3, #8
 800662c:	9303      	str	r3, [sp, #12]
 800662e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006630:	444b      	add	r3, r9
 8006632:	9309      	str	r3, [sp, #36]	; 0x24
 8006634:	e76d      	b.n	8006512 <_svfiprintf_r+0x4a>
 8006636:	fb05 3202 	mla	r2, r5, r2, r3
 800663a:	2001      	movs	r0, #1
 800663c:	460f      	mov	r7, r1
 800663e:	e7a6      	b.n	800658e <_svfiprintf_r+0xc6>
 8006640:	2300      	movs	r3, #0
 8006642:	250a      	movs	r5, #10
 8006644:	4619      	mov	r1, r3
 8006646:	3701      	adds	r7, #1
 8006648:	9305      	str	r3, [sp, #20]
 800664a:	4638      	mov	r0, r7
 800664c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006650:	3a30      	subs	r2, #48	; 0x30
 8006652:	2a09      	cmp	r2, #9
 8006654:	d903      	bls.n	800665e <_svfiprintf_r+0x196>
 8006656:	2b00      	cmp	r3, #0
 8006658:	d0c8      	beq.n	80065ec <_svfiprintf_r+0x124>
 800665a:	9105      	str	r1, [sp, #20]
 800665c:	e7c6      	b.n	80065ec <_svfiprintf_r+0x124>
 800665e:	fb05 2101 	mla	r1, r5, r1, r2
 8006662:	2301      	movs	r3, #1
 8006664:	4607      	mov	r7, r0
 8006666:	e7f0      	b.n	800664a <_svfiprintf_r+0x182>
 8006668:	ab03      	add	r3, sp, #12
 800666a:	9300      	str	r3, [sp, #0]
 800666c:	4622      	mov	r2, r4
 800666e:	4b11      	ldr	r3, [pc, #68]	; (80066b4 <_svfiprintf_r+0x1ec>)
 8006670:	a904      	add	r1, sp, #16
 8006672:	4640      	mov	r0, r8
 8006674:	f3af 8000 	nop.w
 8006678:	f1b0 3fff 	cmp.w	r0, #4294967295
 800667c:	4681      	mov	r9, r0
 800667e:	d1d6      	bne.n	800662e <_svfiprintf_r+0x166>
 8006680:	89a3      	ldrh	r3, [r4, #12]
 8006682:	065b      	lsls	r3, r3, #25
 8006684:	f53f af35 	bmi.w	80064f2 <_svfiprintf_r+0x2a>
 8006688:	9809      	ldr	r0, [sp, #36]	; 0x24
 800668a:	b01d      	add	sp, #116	; 0x74
 800668c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006690:	ab03      	add	r3, sp, #12
 8006692:	9300      	str	r3, [sp, #0]
 8006694:	4622      	mov	r2, r4
 8006696:	4b07      	ldr	r3, [pc, #28]	; (80066b4 <_svfiprintf_r+0x1ec>)
 8006698:	a904      	add	r1, sp, #16
 800669a:	4640      	mov	r0, r8
 800669c:	f000 f882 	bl	80067a4 <_printf_i>
 80066a0:	e7ea      	b.n	8006678 <_svfiprintf_r+0x1b0>
 80066a2:	bf00      	nop
 80066a4:	08007f04 	.word	0x08007f04
 80066a8:	08007f0a 	.word	0x08007f0a
 80066ac:	08007f0e 	.word	0x08007f0e
 80066b0:	00000000 	.word	0x00000000
 80066b4:	08006415 	.word	0x08006415

080066b8 <_printf_common>:
 80066b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066bc:	4691      	mov	r9, r2
 80066be:	461f      	mov	r7, r3
 80066c0:	688a      	ldr	r2, [r1, #8]
 80066c2:	690b      	ldr	r3, [r1, #16]
 80066c4:	4606      	mov	r6, r0
 80066c6:	4293      	cmp	r3, r2
 80066c8:	bfb8      	it	lt
 80066ca:	4613      	movlt	r3, r2
 80066cc:	f8c9 3000 	str.w	r3, [r9]
 80066d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80066d4:	460c      	mov	r4, r1
 80066d6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80066da:	b112      	cbz	r2, 80066e2 <_printf_common+0x2a>
 80066dc:	3301      	adds	r3, #1
 80066de:	f8c9 3000 	str.w	r3, [r9]
 80066e2:	6823      	ldr	r3, [r4, #0]
 80066e4:	0699      	lsls	r1, r3, #26
 80066e6:	bf42      	ittt	mi
 80066e8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80066ec:	3302      	addmi	r3, #2
 80066ee:	f8c9 3000 	strmi.w	r3, [r9]
 80066f2:	6825      	ldr	r5, [r4, #0]
 80066f4:	f015 0506 	ands.w	r5, r5, #6
 80066f8:	d107      	bne.n	800670a <_printf_common+0x52>
 80066fa:	f104 0a19 	add.w	sl, r4, #25
 80066fe:	68e3      	ldr	r3, [r4, #12]
 8006700:	f8d9 2000 	ldr.w	r2, [r9]
 8006704:	1a9b      	subs	r3, r3, r2
 8006706:	42ab      	cmp	r3, r5
 8006708:	dc29      	bgt.n	800675e <_printf_common+0xa6>
 800670a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800670e:	6822      	ldr	r2, [r4, #0]
 8006710:	3300      	adds	r3, #0
 8006712:	bf18      	it	ne
 8006714:	2301      	movne	r3, #1
 8006716:	0692      	lsls	r2, r2, #26
 8006718:	d42e      	bmi.n	8006778 <_printf_common+0xc0>
 800671a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800671e:	4639      	mov	r1, r7
 8006720:	4630      	mov	r0, r6
 8006722:	47c0      	blx	r8
 8006724:	3001      	adds	r0, #1
 8006726:	d021      	beq.n	800676c <_printf_common+0xb4>
 8006728:	6823      	ldr	r3, [r4, #0]
 800672a:	68e5      	ldr	r5, [r4, #12]
 800672c:	f003 0306 	and.w	r3, r3, #6
 8006730:	2b04      	cmp	r3, #4
 8006732:	bf18      	it	ne
 8006734:	2500      	movne	r5, #0
 8006736:	f8d9 2000 	ldr.w	r2, [r9]
 800673a:	f04f 0900 	mov.w	r9, #0
 800673e:	bf08      	it	eq
 8006740:	1aad      	subeq	r5, r5, r2
 8006742:	68a3      	ldr	r3, [r4, #8]
 8006744:	6922      	ldr	r2, [r4, #16]
 8006746:	bf08      	it	eq
 8006748:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800674c:	4293      	cmp	r3, r2
 800674e:	bfc4      	itt	gt
 8006750:	1a9b      	subgt	r3, r3, r2
 8006752:	18ed      	addgt	r5, r5, r3
 8006754:	341a      	adds	r4, #26
 8006756:	454d      	cmp	r5, r9
 8006758:	d11a      	bne.n	8006790 <_printf_common+0xd8>
 800675a:	2000      	movs	r0, #0
 800675c:	e008      	b.n	8006770 <_printf_common+0xb8>
 800675e:	2301      	movs	r3, #1
 8006760:	4652      	mov	r2, sl
 8006762:	4639      	mov	r1, r7
 8006764:	4630      	mov	r0, r6
 8006766:	47c0      	blx	r8
 8006768:	3001      	adds	r0, #1
 800676a:	d103      	bne.n	8006774 <_printf_common+0xbc>
 800676c:	f04f 30ff 	mov.w	r0, #4294967295
 8006770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006774:	3501      	adds	r5, #1
 8006776:	e7c2      	b.n	80066fe <_printf_common+0x46>
 8006778:	2030      	movs	r0, #48	; 0x30
 800677a:	18e1      	adds	r1, r4, r3
 800677c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006780:	1c5a      	adds	r2, r3, #1
 8006782:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006786:	4422      	add	r2, r4
 8006788:	3302      	adds	r3, #2
 800678a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800678e:	e7c4      	b.n	800671a <_printf_common+0x62>
 8006790:	2301      	movs	r3, #1
 8006792:	4622      	mov	r2, r4
 8006794:	4639      	mov	r1, r7
 8006796:	4630      	mov	r0, r6
 8006798:	47c0      	blx	r8
 800679a:	3001      	adds	r0, #1
 800679c:	d0e6      	beq.n	800676c <_printf_common+0xb4>
 800679e:	f109 0901 	add.w	r9, r9, #1
 80067a2:	e7d8      	b.n	8006756 <_printf_common+0x9e>

080067a4 <_printf_i>:
 80067a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80067a8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80067ac:	460c      	mov	r4, r1
 80067ae:	7e09      	ldrb	r1, [r1, #24]
 80067b0:	b085      	sub	sp, #20
 80067b2:	296e      	cmp	r1, #110	; 0x6e
 80067b4:	4617      	mov	r7, r2
 80067b6:	4606      	mov	r6, r0
 80067b8:	4698      	mov	r8, r3
 80067ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80067bc:	f000 80b3 	beq.w	8006926 <_printf_i+0x182>
 80067c0:	d822      	bhi.n	8006808 <_printf_i+0x64>
 80067c2:	2963      	cmp	r1, #99	; 0x63
 80067c4:	d036      	beq.n	8006834 <_printf_i+0x90>
 80067c6:	d80a      	bhi.n	80067de <_printf_i+0x3a>
 80067c8:	2900      	cmp	r1, #0
 80067ca:	f000 80b9 	beq.w	8006940 <_printf_i+0x19c>
 80067ce:	2958      	cmp	r1, #88	; 0x58
 80067d0:	f000 8083 	beq.w	80068da <_printf_i+0x136>
 80067d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067d8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80067dc:	e032      	b.n	8006844 <_printf_i+0xa0>
 80067de:	2964      	cmp	r1, #100	; 0x64
 80067e0:	d001      	beq.n	80067e6 <_printf_i+0x42>
 80067e2:	2969      	cmp	r1, #105	; 0x69
 80067e4:	d1f6      	bne.n	80067d4 <_printf_i+0x30>
 80067e6:	6820      	ldr	r0, [r4, #0]
 80067e8:	6813      	ldr	r3, [r2, #0]
 80067ea:	0605      	lsls	r5, r0, #24
 80067ec:	f103 0104 	add.w	r1, r3, #4
 80067f0:	d52a      	bpl.n	8006848 <_printf_i+0xa4>
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	6011      	str	r1, [r2, #0]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	da03      	bge.n	8006802 <_printf_i+0x5e>
 80067fa:	222d      	movs	r2, #45	; 0x2d
 80067fc:	425b      	negs	r3, r3
 80067fe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006802:	486f      	ldr	r0, [pc, #444]	; (80069c0 <_printf_i+0x21c>)
 8006804:	220a      	movs	r2, #10
 8006806:	e039      	b.n	800687c <_printf_i+0xd8>
 8006808:	2973      	cmp	r1, #115	; 0x73
 800680a:	f000 809d 	beq.w	8006948 <_printf_i+0x1a4>
 800680e:	d808      	bhi.n	8006822 <_printf_i+0x7e>
 8006810:	296f      	cmp	r1, #111	; 0x6f
 8006812:	d020      	beq.n	8006856 <_printf_i+0xb2>
 8006814:	2970      	cmp	r1, #112	; 0x70
 8006816:	d1dd      	bne.n	80067d4 <_printf_i+0x30>
 8006818:	6823      	ldr	r3, [r4, #0]
 800681a:	f043 0320 	orr.w	r3, r3, #32
 800681e:	6023      	str	r3, [r4, #0]
 8006820:	e003      	b.n	800682a <_printf_i+0x86>
 8006822:	2975      	cmp	r1, #117	; 0x75
 8006824:	d017      	beq.n	8006856 <_printf_i+0xb2>
 8006826:	2978      	cmp	r1, #120	; 0x78
 8006828:	d1d4      	bne.n	80067d4 <_printf_i+0x30>
 800682a:	2378      	movs	r3, #120	; 0x78
 800682c:	4865      	ldr	r0, [pc, #404]	; (80069c4 <_printf_i+0x220>)
 800682e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006832:	e055      	b.n	80068e0 <_printf_i+0x13c>
 8006834:	6813      	ldr	r3, [r2, #0]
 8006836:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800683a:	1d19      	adds	r1, r3, #4
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	6011      	str	r1, [r2, #0]
 8006840:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006844:	2301      	movs	r3, #1
 8006846:	e08c      	b.n	8006962 <_printf_i+0x1be>
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800684e:	6011      	str	r1, [r2, #0]
 8006850:	bf18      	it	ne
 8006852:	b21b      	sxthne	r3, r3
 8006854:	e7cf      	b.n	80067f6 <_printf_i+0x52>
 8006856:	6813      	ldr	r3, [r2, #0]
 8006858:	6825      	ldr	r5, [r4, #0]
 800685a:	1d18      	adds	r0, r3, #4
 800685c:	6010      	str	r0, [r2, #0]
 800685e:	0628      	lsls	r0, r5, #24
 8006860:	d501      	bpl.n	8006866 <_printf_i+0xc2>
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	e002      	b.n	800686c <_printf_i+0xc8>
 8006866:	0668      	lsls	r0, r5, #25
 8006868:	d5fb      	bpl.n	8006862 <_printf_i+0xbe>
 800686a:	881b      	ldrh	r3, [r3, #0]
 800686c:	296f      	cmp	r1, #111	; 0x6f
 800686e:	bf14      	ite	ne
 8006870:	220a      	movne	r2, #10
 8006872:	2208      	moveq	r2, #8
 8006874:	4852      	ldr	r0, [pc, #328]	; (80069c0 <_printf_i+0x21c>)
 8006876:	2100      	movs	r1, #0
 8006878:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800687c:	6865      	ldr	r5, [r4, #4]
 800687e:	2d00      	cmp	r5, #0
 8006880:	60a5      	str	r5, [r4, #8]
 8006882:	f2c0 8095 	blt.w	80069b0 <_printf_i+0x20c>
 8006886:	6821      	ldr	r1, [r4, #0]
 8006888:	f021 0104 	bic.w	r1, r1, #4
 800688c:	6021      	str	r1, [r4, #0]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d13d      	bne.n	800690e <_printf_i+0x16a>
 8006892:	2d00      	cmp	r5, #0
 8006894:	f040 808e 	bne.w	80069b4 <_printf_i+0x210>
 8006898:	4665      	mov	r5, ip
 800689a:	2a08      	cmp	r2, #8
 800689c:	d10b      	bne.n	80068b6 <_printf_i+0x112>
 800689e:	6823      	ldr	r3, [r4, #0]
 80068a0:	07db      	lsls	r3, r3, #31
 80068a2:	d508      	bpl.n	80068b6 <_printf_i+0x112>
 80068a4:	6923      	ldr	r3, [r4, #16]
 80068a6:	6862      	ldr	r2, [r4, #4]
 80068a8:	429a      	cmp	r2, r3
 80068aa:	bfde      	ittt	le
 80068ac:	2330      	movle	r3, #48	; 0x30
 80068ae:	f805 3c01 	strble.w	r3, [r5, #-1]
 80068b2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80068b6:	ebac 0305 	sub.w	r3, ip, r5
 80068ba:	6123      	str	r3, [r4, #16]
 80068bc:	f8cd 8000 	str.w	r8, [sp]
 80068c0:	463b      	mov	r3, r7
 80068c2:	aa03      	add	r2, sp, #12
 80068c4:	4621      	mov	r1, r4
 80068c6:	4630      	mov	r0, r6
 80068c8:	f7ff fef6 	bl	80066b8 <_printf_common>
 80068cc:	3001      	adds	r0, #1
 80068ce:	d14d      	bne.n	800696c <_printf_i+0x1c8>
 80068d0:	f04f 30ff 	mov.w	r0, #4294967295
 80068d4:	b005      	add	sp, #20
 80068d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80068da:	4839      	ldr	r0, [pc, #228]	; (80069c0 <_printf_i+0x21c>)
 80068dc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80068e0:	6813      	ldr	r3, [r2, #0]
 80068e2:	6821      	ldr	r1, [r4, #0]
 80068e4:	1d1d      	adds	r5, r3, #4
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	6015      	str	r5, [r2, #0]
 80068ea:	060a      	lsls	r2, r1, #24
 80068ec:	d50b      	bpl.n	8006906 <_printf_i+0x162>
 80068ee:	07ca      	lsls	r2, r1, #31
 80068f0:	bf44      	itt	mi
 80068f2:	f041 0120 	orrmi.w	r1, r1, #32
 80068f6:	6021      	strmi	r1, [r4, #0]
 80068f8:	b91b      	cbnz	r3, 8006902 <_printf_i+0x15e>
 80068fa:	6822      	ldr	r2, [r4, #0]
 80068fc:	f022 0220 	bic.w	r2, r2, #32
 8006900:	6022      	str	r2, [r4, #0]
 8006902:	2210      	movs	r2, #16
 8006904:	e7b7      	b.n	8006876 <_printf_i+0xd2>
 8006906:	064d      	lsls	r5, r1, #25
 8006908:	bf48      	it	mi
 800690a:	b29b      	uxthmi	r3, r3
 800690c:	e7ef      	b.n	80068ee <_printf_i+0x14a>
 800690e:	4665      	mov	r5, ip
 8006910:	fbb3 f1f2 	udiv	r1, r3, r2
 8006914:	fb02 3311 	mls	r3, r2, r1, r3
 8006918:	5cc3      	ldrb	r3, [r0, r3]
 800691a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800691e:	460b      	mov	r3, r1
 8006920:	2900      	cmp	r1, #0
 8006922:	d1f5      	bne.n	8006910 <_printf_i+0x16c>
 8006924:	e7b9      	b.n	800689a <_printf_i+0xf6>
 8006926:	6813      	ldr	r3, [r2, #0]
 8006928:	6825      	ldr	r5, [r4, #0]
 800692a:	1d18      	adds	r0, r3, #4
 800692c:	6961      	ldr	r1, [r4, #20]
 800692e:	6010      	str	r0, [r2, #0]
 8006930:	0628      	lsls	r0, r5, #24
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	d501      	bpl.n	800693a <_printf_i+0x196>
 8006936:	6019      	str	r1, [r3, #0]
 8006938:	e002      	b.n	8006940 <_printf_i+0x19c>
 800693a:	066a      	lsls	r2, r5, #25
 800693c:	d5fb      	bpl.n	8006936 <_printf_i+0x192>
 800693e:	8019      	strh	r1, [r3, #0]
 8006940:	2300      	movs	r3, #0
 8006942:	4665      	mov	r5, ip
 8006944:	6123      	str	r3, [r4, #16]
 8006946:	e7b9      	b.n	80068bc <_printf_i+0x118>
 8006948:	6813      	ldr	r3, [r2, #0]
 800694a:	1d19      	adds	r1, r3, #4
 800694c:	6011      	str	r1, [r2, #0]
 800694e:	681d      	ldr	r5, [r3, #0]
 8006950:	6862      	ldr	r2, [r4, #4]
 8006952:	2100      	movs	r1, #0
 8006954:	4628      	mov	r0, r5
 8006956:	f000 f847 	bl	80069e8 <memchr>
 800695a:	b108      	cbz	r0, 8006960 <_printf_i+0x1bc>
 800695c:	1b40      	subs	r0, r0, r5
 800695e:	6060      	str	r0, [r4, #4]
 8006960:	6863      	ldr	r3, [r4, #4]
 8006962:	6123      	str	r3, [r4, #16]
 8006964:	2300      	movs	r3, #0
 8006966:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800696a:	e7a7      	b.n	80068bc <_printf_i+0x118>
 800696c:	6923      	ldr	r3, [r4, #16]
 800696e:	462a      	mov	r2, r5
 8006970:	4639      	mov	r1, r7
 8006972:	4630      	mov	r0, r6
 8006974:	47c0      	blx	r8
 8006976:	3001      	adds	r0, #1
 8006978:	d0aa      	beq.n	80068d0 <_printf_i+0x12c>
 800697a:	6823      	ldr	r3, [r4, #0]
 800697c:	079b      	lsls	r3, r3, #30
 800697e:	d413      	bmi.n	80069a8 <_printf_i+0x204>
 8006980:	68e0      	ldr	r0, [r4, #12]
 8006982:	9b03      	ldr	r3, [sp, #12]
 8006984:	4298      	cmp	r0, r3
 8006986:	bfb8      	it	lt
 8006988:	4618      	movlt	r0, r3
 800698a:	e7a3      	b.n	80068d4 <_printf_i+0x130>
 800698c:	2301      	movs	r3, #1
 800698e:	464a      	mov	r2, r9
 8006990:	4639      	mov	r1, r7
 8006992:	4630      	mov	r0, r6
 8006994:	47c0      	blx	r8
 8006996:	3001      	adds	r0, #1
 8006998:	d09a      	beq.n	80068d0 <_printf_i+0x12c>
 800699a:	3501      	adds	r5, #1
 800699c:	68e3      	ldr	r3, [r4, #12]
 800699e:	9a03      	ldr	r2, [sp, #12]
 80069a0:	1a9b      	subs	r3, r3, r2
 80069a2:	42ab      	cmp	r3, r5
 80069a4:	dcf2      	bgt.n	800698c <_printf_i+0x1e8>
 80069a6:	e7eb      	b.n	8006980 <_printf_i+0x1dc>
 80069a8:	2500      	movs	r5, #0
 80069aa:	f104 0919 	add.w	r9, r4, #25
 80069ae:	e7f5      	b.n	800699c <_printf_i+0x1f8>
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d1ac      	bne.n	800690e <_printf_i+0x16a>
 80069b4:	7803      	ldrb	r3, [r0, #0]
 80069b6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069ba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069be:	e76c      	b.n	800689a <_printf_i+0xf6>
 80069c0:	08007f15 	.word	0x08007f15
 80069c4:	08007f26 	.word	0x08007f26

080069c8 <_sbrk_r>:
 80069c8:	b538      	push	{r3, r4, r5, lr}
 80069ca:	2300      	movs	r3, #0
 80069cc:	4c05      	ldr	r4, [pc, #20]	; (80069e4 <_sbrk_r+0x1c>)
 80069ce:	4605      	mov	r5, r0
 80069d0:	4608      	mov	r0, r1
 80069d2:	6023      	str	r3, [r4, #0]
 80069d4:	f7fa fbe2 	bl	800119c <_sbrk>
 80069d8:	1c43      	adds	r3, r0, #1
 80069da:	d102      	bne.n	80069e2 <_sbrk_r+0x1a>
 80069dc:	6823      	ldr	r3, [r4, #0]
 80069de:	b103      	cbz	r3, 80069e2 <_sbrk_r+0x1a>
 80069e0:	602b      	str	r3, [r5, #0]
 80069e2:	bd38      	pop	{r3, r4, r5, pc}
 80069e4:	20000678 	.word	0x20000678

080069e8 <memchr>:
 80069e8:	b510      	push	{r4, lr}
 80069ea:	b2c9      	uxtb	r1, r1
 80069ec:	4402      	add	r2, r0
 80069ee:	4290      	cmp	r0, r2
 80069f0:	4603      	mov	r3, r0
 80069f2:	d101      	bne.n	80069f8 <memchr+0x10>
 80069f4:	2300      	movs	r3, #0
 80069f6:	e003      	b.n	8006a00 <memchr+0x18>
 80069f8:	781c      	ldrb	r4, [r3, #0]
 80069fa:	3001      	adds	r0, #1
 80069fc:	428c      	cmp	r4, r1
 80069fe:	d1f6      	bne.n	80069ee <memchr+0x6>
 8006a00:	4618      	mov	r0, r3
 8006a02:	bd10      	pop	{r4, pc}

08006a04 <memcpy>:
 8006a04:	b510      	push	{r4, lr}
 8006a06:	1e43      	subs	r3, r0, #1
 8006a08:	440a      	add	r2, r1
 8006a0a:	4291      	cmp	r1, r2
 8006a0c:	d100      	bne.n	8006a10 <memcpy+0xc>
 8006a0e:	bd10      	pop	{r4, pc}
 8006a10:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a18:	e7f7      	b.n	8006a0a <memcpy+0x6>

08006a1a <memmove>:
 8006a1a:	4288      	cmp	r0, r1
 8006a1c:	b510      	push	{r4, lr}
 8006a1e:	eb01 0302 	add.w	r3, r1, r2
 8006a22:	d807      	bhi.n	8006a34 <memmove+0x1a>
 8006a24:	1e42      	subs	r2, r0, #1
 8006a26:	4299      	cmp	r1, r3
 8006a28:	d00a      	beq.n	8006a40 <memmove+0x26>
 8006a2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a2e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006a32:	e7f8      	b.n	8006a26 <memmove+0xc>
 8006a34:	4283      	cmp	r3, r0
 8006a36:	d9f5      	bls.n	8006a24 <memmove+0xa>
 8006a38:	1881      	adds	r1, r0, r2
 8006a3a:	1ad2      	subs	r2, r2, r3
 8006a3c:	42d3      	cmn	r3, r2
 8006a3e:	d100      	bne.n	8006a42 <memmove+0x28>
 8006a40:	bd10      	pop	{r4, pc}
 8006a42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006a46:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006a4a:	e7f7      	b.n	8006a3c <memmove+0x22>

08006a4c <__malloc_lock>:
 8006a4c:	4770      	bx	lr

08006a4e <__malloc_unlock>:
 8006a4e:	4770      	bx	lr

08006a50 <_free_r>:
 8006a50:	b538      	push	{r3, r4, r5, lr}
 8006a52:	4605      	mov	r5, r0
 8006a54:	2900      	cmp	r1, #0
 8006a56:	d043      	beq.n	8006ae0 <_free_r+0x90>
 8006a58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a5c:	1f0c      	subs	r4, r1, #4
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	bfb8      	it	lt
 8006a62:	18e4      	addlt	r4, r4, r3
 8006a64:	f7ff fff2 	bl	8006a4c <__malloc_lock>
 8006a68:	4a1e      	ldr	r2, [pc, #120]	; (8006ae4 <_free_r+0x94>)
 8006a6a:	6813      	ldr	r3, [r2, #0]
 8006a6c:	4610      	mov	r0, r2
 8006a6e:	b933      	cbnz	r3, 8006a7e <_free_r+0x2e>
 8006a70:	6063      	str	r3, [r4, #4]
 8006a72:	6014      	str	r4, [r2, #0]
 8006a74:	4628      	mov	r0, r5
 8006a76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a7a:	f7ff bfe8 	b.w	8006a4e <__malloc_unlock>
 8006a7e:	42a3      	cmp	r3, r4
 8006a80:	d90b      	bls.n	8006a9a <_free_r+0x4a>
 8006a82:	6821      	ldr	r1, [r4, #0]
 8006a84:	1862      	adds	r2, r4, r1
 8006a86:	4293      	cmp	r3, r2
 8006a88:	bf01      	itttt	eq
 8006a8a:	681a      	ldreq	r2, [r3, #0]
 8006a8c:	685b      	ldreq	r3, [r3, #4]
 8006a8e:	1852      	addeq	r2, r2, r1
 8006a90:	6022      	streq	r2, [r4, #0]
 8006a92:	6063      	str	r3, [r4, #4]
 8006a94:	6004      	str	r4, [r0, #0]
 8006a96:	e7ed      	b.n	8006a74 <_free_r+0x24>
 8006a98:	4613      	mov	r3, r2
 8006a9a:	685a      	ldr	r2, [r3, #4]
 8006a9c:	b10a      	cbz	r2, 8006aa2 <_free_r+0x52>
 8006a9e:	42a2      	cmp	r2, r4
 8006aa0:	d9fa      	bls.n	8006a98 <_free_r+0x48>
 8006aa2:	6819      	ldr	r1, [r3, #0]
 8006aa4:	1858      	adds	r0, r3, r1
 8006aa6:	42a0      	cmp	r0, r4
 8006aa8:	d10b      	bne.n	8006ac2 <_free_r+0x72>
 8006aaa:	6820      	ldr	r0, [r4, #0]
 8006aac:	4401      	add	r1, r0
 8006aae:	1858      	adds	r0, r3, r1
 8006ab0:	4282      	cmp	r2, r0
 8006ab2:	6019      	str	r1, [r3, #0]
 8006ab4:	d1de      	bne.n	8006a74 <_free_r+0x24>
 8006ab6:	6810      	ldr	r0, [r2, #0]
 8006ab8:	6852      	ldr	r2, [r2, #4]
 8006aba:	4401      	add	r1, r0
 8006abc:	6019      	str	r1, [r3, #0]
 8006abe:	605a      	str	r2, [r3, #4]
 8006ac0:	e7d8      	b.n	8006a74 <_free_r+0x24>
 8006ac2:	d902      	bls.n	8006aca <_free_r+0x7a>
 8006ac4:	230c      	movs	r3, #12
 8006ac6:	602b      	str	r3, [r5, #0]
 8006ac8:	e7d4      	b.n	8006a74 <_free_r+0x24>
 8006aca:	6820      	ldr	r0, [r4, #0]
 8006acc:	1821      	adds	r1, r4, r0
 8006ace:	428a      	cmp	r2, r1
 8006ad0:	bf01      	itttt	eq
 8006ad2:	6811      	ldreq	r1, [r2, #0]
 8006ad4:	6852      	ldreq	r2, [r2, #4]
 8006ad6:	1809      	addeq	r1, r1, r0
 8006ad8:	6021      	streq	r1, [r4, #0]
 8006ada:	6062      	str	r2, [r4, #4]
 8006adc:	605c      	str	r4, [r3, #4]
 8006ade:	e7c9      	b.n	8006a74 <_free_r+0x24>
 8006ae0:	bd38      	pop	{r3, r4, r5, pc}
 8006ae2:	bf00      	nop
 8006ae4:	200004d4 	.word	0x200004d4

08006ae8 <_realloc_r>:
 8006ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aea:	4607      	mov	r7, r0
 8006aec:	4614      	mov	r4, r2
 8006aee:	460e      	mov	r6, r1
 8006af0:	b921      	cbnz	r1, 8006afc <_realloc_r+0x14>
 8006af2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006af6:	4611      	mov	r1, r2
 8006af8:	f7ff bc32 	b.w	8006360 <_malloc_r>
 8006afc:	b922      	cbnz	r2, 8006b08 <_realloc_r+0x20>
 8006afe:	f7ff ffa7 	bl	8006a50 <_free_r>
 8006b02:	4625      	mov	r5, r4
 8006b04:	4628      	mov	r0, r5
 8006b06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b08:	f000 f814 	bl	8006b34 <_malloc_usable_size_r>
 8006b0c:	42a0      	cmp	r0, r4
 8006b0e:	d20f      	bcs.n	8006b30 <_realloc_r+0x48>
 8006b10:	4621      	mov	r1, r4
 8006b12:	4638      	mov	r0, r7
 8006b14:	f7ff fc24 	bl	8006360 <_malloc_r>
 8006b18:	4605      	mov	r5, r0
 8006b1a:	2800      	cmp	r0, #0
 8006b1c:	d0f2      	beq.n	8006b04 <_realloc_r+0x1c>
 8006b1e:	4631      	mov	r1, r6
 8006b20:	4622      	mov	r2, r4
 8006b22:	f7ff ff6f 	bl	8006a04 <memcpy>
 8006b26:	4631      	mov	r1, r6
 8006b28:	4638      	mov	r0, r7
 8006b2a:	f7ff ff91 	bl	8006a50 <_free_r>
 8006b2e:	e7e9      	b.n	8006b04 <_realloc_r+0x1c>
 8006b30:	4635      	mov	r5, r6
 8006b32:	e7e7      	b.n	8006b04 <_realloc_r+0x1c>

08006b34 <_malloc_usable_size_r>:
 8006b34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b38:	1f18      	subs	r0, r3, #4
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	bfbc      	itt	lt
 8006b3e:	580b      	ldrlt	r3, [r1, r0]
 8006b40:	18c0      	addlt	r0, r0, r3
 8006b42:	4770      	bx	lr

08006b44 <_init>:
 8006b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b46:	bf00      	nop
 8006b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b4a:	bc08      	pop	{r3}
 8006b4c:	469e      	mov	lr, r3
 8006b4e:	4770      	bx	lr

08006b50 <_fini>:
 8006b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b52:	bf00      	nop
 8006b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b56:	bc08      	pop	{r3}
 8006b58:	469e      	mov	lr, r3
 8006b5a:	4770      	bx	lr
