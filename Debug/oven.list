
oven.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069d8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013d4  08006ae4  08006ae4  00016ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007eb8  08007eb8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08007eb8  08007eb8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007eb8  08007eb8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007eb8  08007eb8  00017eb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ebc  08007ebc  00017ebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007ec0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000058c  20000074  08007f34  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000600  08007f34  00020600  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00069e81  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003b3b  00000000  00000000  00089f1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002b90  00000000  00000000  0008da60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002988  00000000  00000000  000905f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019669  00000000  00000000  00092f78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015865  00000000  00000000  000ac5e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009d888  00000000  00000000  000c1e46  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015f6ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c09c  00000000  00000000  0015f74c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08006acc 	.word	0x08006acc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08006acc 	.word	0x08006acc

0800014c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800015a:	2b00      	cmp	r3, #0
 800015c:	db0c      	blt.n	8000178 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800015e:	79fb      	ldrb	r3, [r7, #7]
 8000160:	f003 021f 	and.w	r2, r3, #31
 8000164:	4907      	ldr	r1, [pc, #28]	; (8000184 <__NVIC_ClearPendingIRQ+0x38>)
 8000166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800016a:	095b      	lsrs	r3, r3, #5
 800016c:	2001      	movs	r0, #1
 800016e:	fa00 f202 	lsl.w	r2, r0, r2
 8000172:	3360      	adds	r3, #96	; 0x60
 8000174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000178:	bf00      	nop
 800017a:	370c      	adds	r7, #12
 800017c:	46bd      	mov	sp, r7
 800017e:	bc80      	pop	{r7}
 8000180:	4770      	bx	lr
 8000182:	bf00      	nop
 8000184:	e000e100 	.word	0xe000e100

08000188 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800018c:	f003 f842 	bl	8003214 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000190:	f000 f886 	bl	80002a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000194:	f000 f9fa 	bl	800058c <MX_GPIO_Init>
  MX_SPI2_Init();
 8000198:	f000 f94c 	bl	8000434 <MX_SPI2_Init>
  MX_TIM3_Init();
 800019c:	f000 f980 	bl	80004a0 <MX_TIM3_Init>
  MX_RTC_Init();
 80001a0:	f000 f8dc 	bl	800035c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
	u8g2_Setup_st7920_s_128x64_f(&u8g2, U8G2_R0, U8x8ByteSTM32HWSPI,
 80001a4:	4b2d      	ldr	r3, [pc, #180]	; (800025c <main+0xd4>)
 80001a6:	4a2e      	ldr	r2, [pc, #184]	; (8000260 <main+0xd8>)
 80001a8:	492e      	ldr	r1, [pc, #184]	; (8000264 <main+0xdc>)
 80001aa:	482f      	ldr	r0, [pc, #188]	; (8000268 <main+0xe0>)
 80001ac:	f001 faf6 	bl	800179c <u8g2_Setup_st7920_s_128x64_f>
			U8x8Stm32GPIOAndDelay);
	u8g2_InitDisplay(&u8g2); // send init sequence to the display, display is in sleep mode after this,
 80001b0:	482d      	ldr	r0, [pc, #180]	; (8000268 <main+0xe0>)
 80001b2:	f002 ff68 	bl	8003086 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0); // wake up display
 80001b6:	2100      	movs	r1, #0
 80001b8:	482b      	ldr	r0, [pc, #172]	; (8000268 <main+0xe0>)
 80001ba:	f002 ff73 	bl	80030a4 <u8x8_SetPowerSave>
	u8g2_SetFont(&u8g2, u8g2_font_6x12_t_cyrillic);
 80001be:	492b      	ldr	r1, [pc, #172]	; (800026c <main+0xe4>)
 80001c0:	4829      	ldr	r0, [pc, #164]	; (8000268 <main+0xe0>)
 80001c2:	f002 f875 	bl	80022b0 <u8g2_SetFont>
	u8g2_SetFontDirection(&u8g2, 0);
 80001c6:	2100      	movs	r1, #0
 80001c8:	4827      	ldr	r0, [pc, #156]	; (8000268 <main+0xe0>)
 80001ca:	f002 f88b 	bl	80022e4 <u8g2_SetFontDirection>

	ScreenUpdate(255);
 80001ce:	20ff      	movs	r0, #255	; 0xff
 80001d0:	f000 fd52 	bl	8000c78 <ScreenUpdate>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		if (EventFlag(&time_irq[0], &flag_irq[0], EXTI0_IRQn)) {
 80001d4:	2206      	movs	r2, #6
 80001d6:	4926      	ldr	r1, [pc, #152]	; (8000270 <main+0xe8>)
 80001d8:	4826      	ldr	r0, [pc, #152]	; (8000274 <main+0xec>)
 80001da:	f000 fd7f 	bl	8000cdc <EventFlag>
 80001de:	4603      	mov	r3, r0
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d003      	beq.n	80001ec <main+0x64>
			activity = 0;
 80001e4:	4b24      	ldr	r3, [pc, #144]	; (8000278 <main+0xf0>)
 80001e6:	2200      	movs	r2, #0
 80001e8:	701a      	strb	r2, [r3, #0]
			goto gotoUpdate;
 80001ea:	e02d      	b.n	8000248 <main+0xc0>
		} else if (EventFlag(&time_irq[1], &flag_irq[1], EXTI1_IRQn)) {
 80001ec:	2207      	movs	r2, #7
 80001ee:	4923      	ldr	r1, [pc, #140]	; (800027c <main+0xf4>)
 80001f0:	4823      	ldr	r0, [pc, #140]	; (8000280 <main+0xf8>)
 80001f2:	f000 fd73 	bl	8000cdc <EventFlag>
 80001f6:	4603      	mov	r3, r0
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d003      	beq.n	8000204 <main+0x7c>
			activity = 1;
 80001fc:	4b1e      	ldr	r3, [pc, #120]	; (8000278 <main+0xf0>)
 80001fe:	2201      	movs	r2, #1
 8000200:	701a      	strb	r2, [r3, #0]
			goto gotoUpdate;
 8000202:	e021      	b.n	8000248 <main+0xc0>
		} else if (EventFlag(&time_irq[2], &flag_irq[2], EXTI2_IRQn)) {
 8000204:	2208      	movs	r2, #8
 8000206:	491f      	ldr	r1, [pc, #124]	; (8000284 <main+0xfc>)
 8000208:	481f      	ldr	r0, [pc, #124]	; (8000288 <main+0x100>)
 800020a:	f000 fd67 	bl	8000cdc <EventFlag>
 800020e:	4603      	mov	r3, r0
 8000210:	2b00      	cmp	r3, #0
 8000212:	d114      	bne.n	800023e <main+0xb6>
			goto gotoUpdate;
		} else if (EventFlag(&time_irq[3], &flag_irq[3], EXTI3_IRQn)) {
 8000214:	2209      	movs	r2, #9
 8000216:	491d      	ldr	r1, [pc, #116]	; (800028c <main+0x104>)
 8000218:	481d      	ldr	r0, [pc, #116]	; (8000290 <main+0x108>)
 800021a:	f000 fd5f 	bl	8000cdc <EventFlag>
 800021e:	4603      	mov	r3, r0
 8000220:	2b00      	cmp	r3, #0
 8000222:	d10e      	bne.n	8000242 <main+0xba>
			goto gotoUpdate;
		} else if (EventFlag(&time_irq[4], &flag_irq[4], EXTI4_IRQn)) {
 8000224:	220a      	movs	r2, #10
 8000226:	491b      	ldr	r1, [pc, #108]	; (8000294 <main+0x10c>)
 8000228:	481b      	ldr	r0, [pc, #108]	; (8000298 <main+0x110>)
 800022a:	f000 fd57 	bl	8000cdc <EventFlag>
 800022e:	4603      	mov	r3, r0
 8000230:	2b00      	cmp	r3, #0
 8000232:	d108      	bne.n	8000246 <main+0xbe>
		//	pointer = (__HAL_TIM_GET_COUNTER(&htim4) / 2);
		//	goto gotoUpdate;
		//} else
		//six = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
		//seven = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7);
			if (update != 255) {
 8000234:	4b19      	ldr	r3, [pc, #100]	; (800029c <main+0x114>)
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	2bff      	cmp	r3, #255	; 0xff
 800023a:	d0cb      	beq.n	80001d4 <main+0x4c>
			gotoUpdate: ScreenUpdate(update);
 800023c:	e004      	b.n	8000248 <main+0xc0>
			goto gotoUpdate;
 800023e:	bf00      	nop
 8000240:	e002      	b.n	8000248 <main+0xc0>
			goto gotoUpdate;
 8000242:	bf00      	nop
 8000244:	e000      	b.n	8000248 <main+0xc0>
			goto gotoUpdate;
 8000246:	bf00      	nop
			gotoUpdate: ScreenUpdate(update);
 8000248:	4b14      	ldr	r3, [pc, #80]	; (800029c <main+0x114>)
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	4618      	mov	r0, r3
 800024e:	f000 fd13 	bl	8000c78 <ScreenUpdate>
			update = 255;
 8000252:	4b12      	ldr	r3, [pc, #72]	; (800029c <main+0x114>)
 8000254:	22ff      	movs	r2, #255	; 0xff
 8000256:	701a      	strb	r2, [r3, #0]
		if (EventFlag(&time_irq[0], &flag_irq[0], EXTI0_IRQn)) {
 8000258:	e7bc      	b.n	80001d4 <main+0x4c>
 800025a:	bf00      	nop
 800025c:	08000745 	.word	0x08000745
 8000260:	08000839 	.word	0x08000839
 8000264:	08007dd8 	.word	0x08007dd8
 8000268:	20000528 	.word	0x20000528
 800026c:	08006b54 	.word	0x08006b54
 8000270:	20000094 	.word	0x20000094
 8000274:	2000009c 	.word	0x2000009c
 8000278:	20000001 	.word	0x20000001
 800027c:	20000095 	.word	0x20000095
 8000280:	200000a0 	.word	0x200000a0
 8000284:	20000096 	.word	0x20000096
 8000288:	200000a4 	.word	0x200000a4
 800028c:	20000097 	.word	0x20000097
 8000290:	200000a8 	.word	0x200000a8
 8000294:	20000098 	.word	0x20000098
 8000298:	200000ac 	.word	0x200000ac
 800029c:	20000002 	.word	0x20000002

080002a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b094      	sub	sp, #80	; 0x50
 80002a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002aa:	2228      	movs	r2, #40	; 0x28
 80002ac:	2100      	movs	r1, #0
 80002ae:	4618      	mov	r0, r3
 80002b0:	f005 fff2 	bl	8006298 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b4:	f107 0314 	add.w	r3, r7, #20
 80002b8:	2200      	movs	r2, #0
 80002ba:	601a      	str	r2, [r3, #0]
 80002bc:	605a      	str	r2, [r3, #4]
 80002be:	609a      	str	r2, [r3, #8]
 80002c0:	60da      	str	r2, [r3, #12]
 80002c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002c4:	1d3b      	adds	r3, r7, #4
 80002c6:	2200      	movs	r2, #0
 80002c8:	601a      	str	r2, [r3, #0]
 80002ca:	605a      	str	r2, [r3, #4]
 80002cc:	609a      	str	r2, [r3, #8]
 80002ce:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80002d0:	2305      	movs	r3, #5
 80002d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002da:	2300      	movs	r3, #0
 80002dc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80002de:	2301      	movs	r3, #1
 80002e0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e2:	2301      	movs	r3, #1
 80002e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002e6:	2302      	movs	r3, #2
 80002e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002f0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002fa:	4618      	mov	r0, r3
 80002fc:	f003 fafa 	bl	80038f4 <HAL_RCC_OscConfig>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d001      	beq.n	800030a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000306:	f000 fd3d 	bl	8000d84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800030a:	230f      	movs	r3, #15
 800030c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800030e:	2302      	movs	r3, #2
 8000310:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000312:	2300      	movs	r3, #0
 8000314:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000316:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800031a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800031c:	2300      	movs	r3, #0
 800031e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000320:	f107 0314 	add.w	r3, r7, #20
 8000324:	2102      	movs	r1, #2
 8000326:	4618      	mov	r0, r3
 8000328:	f003 fd64 	bl	8003df4 <HAL_RCC_ClockConfig>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000332:	f000 fd27 	bl	8000d84 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000336:	2301      	movs	r3, #1
 8000338:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800033a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800033e:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000340:	1d3b      	adds	r3, r7, #4
 8000342:	4618      	mov	r0, r3
 8000344:	f003 fede 	bl	8004104 <HAL_RCCEx_PeriphCLKConfig>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800034e:	f000 fd19 	bl	8000d84 <Error_Handler>
  }
}
 8000352:	bf00      	nop
 8000354:	3750      	adds	r7, #80	; 0x50
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}
	...

0800035c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b084      	sub	sp, #16
 8000360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000362:	f107 030c 	add.w	r3, r7, #12
 8000366:	2100      	movs	r1, #0
 8000368:	460a      	mov	r2, r1
 800036a:	801a      	strh	r2, [r3, #0]
 800036c:	460a      	mov	r2, r1
 800036e:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8000370:	2300      	movs	r3, #0
 8000372:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN RTC_Init 1 */
	RTC_AlarmTypeDef sAlarm = { 0 };
 8000374:	463b      	mov	r3, r7
 8000376:	2200      	movs	r2, #0
 8000378:	601a      	str	r2, [r3, #0]
 800037a:	605a      	str	r2, [r3, #4]
  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800037c:	4b2b      	ldr	r3, [pc, #172]	; (800042c <MX_RTC_Init+0xd0>)
 800037e:	4a2c      	ldr	r2, [pc, #176]	; (8000430 <MX_RTC_Init+0xd4>)
 8000380:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000382:	4b2a      	ldr	r3, [pc, #168]	; (800042c <MX_RTC_Init+0xd0>)
 8000384:	f04f 32ff 	mov.w	r2, #4294967295
 8000388:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 800038a:	4b28      	ldr	r3, [pc, #160]	; (800042c <MX_RTC_Init+0xd0>)
 800038c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000390:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000392:	4826      	ldr	r0, [pc, #152]	; (800042c <MX_RTC_Init+0xd0>)
 8000394:	f004 f828 	bl	80043e8 <HAL_RTC_Init>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 800039e:	f000 fcf1 	bl	8000d84 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 80003a2:	2300      	movs	r3, #0
 80003a4:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = 0;
 80003a6:	2300      	movs	r3, #0
 80003a8:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = 0;
 80003aa:	2300      	movs	r3, #0
 80003ac:	73bb      	strb	r3, [r7, #14]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80003ae:	f107 030c 	add.w	r3, r7, #12
 80003b2:	2200      	movs	r2, #0
 80003b4:	4619      	mov	r1, r3
 80003b6:	481d      	ldr	r0, [pc, #116]	; (800042c <MX_RTC_Init+0xd0>)
 80003b8:	f004 f8ac 	bl	8004514 <HAL_RTC_SetTime>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <MX_RTC_Init+0x6a>
  {
    Error_Handler();
 80003c2:	f000 fcdf 	bl	8000d84 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 80003c6:	2301      	movs	r3, #1
 80003c8:	723b      	strb	r3, [r7, #8]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 80003ca:	2301      	movs	r3, #1
 80003cc:	727b      	strb	r3, [r7, #9]
  DateToUpdate.Date = 1;
 80003ce:	2301      	movs	r3, #1
 80003d0:	72bb      	strb	r3, [r7, #10]
  DateToUpdate.Year = 0;
 80003d2:	2300      	movs	r3, #0
 80003d4:	72fb      	strb	r3, [r7, #11]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 80003d6:	f107 0308 	add.w	r3, r7, #8
 80003da:	2200      	movs	r2, #0
 80003dc:	4619      	mov	r1, r3
 80003de:	4813      	ldr	r0, [pc, #76]	; (800042c <MX_RTC_Init+0xd0>)
 80003e0:	f004 fa08 	bl	80047f4 <HAL_RTC_SetDate>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80003ea:	f000 fccb 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

	sAlarm.Alarm = RTC_ALARM_A;
 80003ee:	2300      	movs	r3, #0
 80003f0:	607b      	str	r3, [r7, #4]
	sAlarm.AlarmTime.Hours = 0;
 80003f2:	2300      	movs	r3, #0
 80003f4:	703b      	strb	r3, [r7, #0]
	sAlarm.AlarmTime.Minutes = 0;
 80003f6:	2300      	movs	r3, #0
 80003f8:	707b      	strb	r3, [r7, #1]
	sAlarm.AlarmTime.Seconds = 30;
 80003fa:	231e      	movs	r3, #30
 80003fc:	70bb      	strb	r3, [r7, #2]

	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK) {
 80003fe:	463b      	mov	r3, r7
 8000400:	2200      	movs	r2, #0
 8000402:	4619      	mov	r1, r3
 8000404:	4809      	ldr	r0, [pc, #36]	; (800042c <MX_RTC_Init+0xd0>)
 8000406:	f004 faff 	bl	8004a08 <HAL_RTC_SetAlarm_IT>
 800040a:	4603      	mov	r3, r0
 800040c:	2b00      	cmp	r3, #0
 800040e:	d001      	beq.n	8000414 <MX_RTC_Init+0xb8>
		Error_Handler();
 8000410:	f000 fcb8 	bl	8000d84 <Error_Handler>
	}

	HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0x0F, 0);
 8000414:	2200      	movs	r2, #0
 8000416:	210f      	movs	r1, #15
 8000418:	2029      	movs	r0, #41	; 0x29
 800041a:	f003 f878 	bl	800350e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800041e:	2029      	movs	r0, #41	; 0x29
 8000420:	f003 f891 	bl	8003546 <HAL_NVIC_EnableIRQ>
  /* USER CODE END RTC_Init 2 */

}
 8000424:	bf00      	nop
 8000426:	3710      	adds	r7, #16
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}
 800042c:	200004bc 	.word	0x200004bc
 8000430:	40002800 	.word	0x40002800

08000434 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000438:	4b17      	ldr	r3, [pc, #92]	; (8000498 <MX_SPI2_Init+0x64>)
 800043a:	4a18      	ldr	r2, [pc, #96]	; (800049c <MX_SPI2_Init+0x68>)
 800043c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800043e:	4b16      	ldr	r3, [pc, #88]	; (8000498 <MX_SPI2_Init+0x64>)
 8000440:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000444:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000446:	4b14      	ldr	r3, [pc, #80]	; (8000498 <MX_SPI2_Init+0x64>)
 8000448:	2200      	movs	r2, #0
 800044a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800044c:	4b12      	ldr	r3, [pc, #72]	; (8000498 <MX_SPI2_Init+0x64>)
 800044e:	2200      	movs	r2, #0
 8000450:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000452:	4b11      	ldr	r3, [pc, #68]	; (8000498 <MX_SPI2_Init+0x64>)
 8000454:	2200      	movs	r2, #0
 8000456:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000458:	4b0f      	ldr	r3, [pc, #60]	; (8000498 <MX_SPI2_Init+0x64>)
 800045a:	2201      	movs	r2, #1
 800045c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800045e:	4b0e      	ldr	r3, [pc, #56]	; (8000498 <MX_SPI2_Init+0x64>)
 8000460:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000464:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000466:	4b0c      	ldr	r3, [pc, #48]	; (8000498 <MX_SPI2_Init+0x64>)
 8000468:	2228      	movs	r2, #40	; 0x28
 800046a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800046c:	4b0a      	ldr	r3, [pc, #40]	; (8000498 <MX_SPI2_Init+0x64>)
 800046e:	2200      	movs	r2, #0
 8000470:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000472:	4b09      	ldr	r3, [pc, #36]	; (8000498 <MX_SPI2_Init+0x64>)
 8000474:	2200      	movs	r2, #0
 8000476:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000478:	4b07      	ldr	r3, [pc, #28]	; (8000498 <MX_SPI2_Init+0x64>)
 800047a:	2200      	movs	r2, #0
 800047c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800047e:	4b06      	ldr	r3, [pc, #24]	; (8000498 <MX_SPI2_Init+0x64>)
 8000480:	220a      	movs	r2, #10
 8000482:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000484:	4804      	ldr	r0, [pc, #16]	; (8000498 <MX_SPI2_Init+0x64>)
 8000486:	f004 fe3d 	bl	8005104 <HAL_SPI_Init>
 800048a:	4603      	mov	r3, r0
 800048c:	2b00      	cmp	r3, #0
 800048e:	d001      	beq.n	8000494 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000490:	f000 fc78 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000494:	bf00      	nop
 8000496:	bd80      	pop	{r7, pc}
 8000498:	200004d0 	.word	0x200004d0
 800049c:	40003800 	.word	0x40003800

080004a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b08e      	sub	sp, #56	; 0x38
 80004a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004aa:	2200      	movs	r2, #0
 80004ac:	601a      	str	r2, [r3, #0]
 80004ae:	605a      	str	r2, [r3, #4]
 80004b0:	609a      	str	r2, [r3, #8]
 80004b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004b4:	f107 0320 	add.w	r3, r7, #32
 80004b8:	2200      	movs	r2, #0
 80004ba:	601a      	str	r2, [r3, #0]
 80004bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004be:	1d3b      	adds	r3, r7, #4
 80004c0:	2200      	movs	r2, #0
 80004c2:	601a      	str	r2, [r3, #0]
 80004c4:	605a      	str	r2, [r3, #4]
 80004c6:	609a      	str	r2, [r3, #8]
 80004c8:	60da      	str	r2, [r3, #12]
 80004ca:	611a      	str	r2, [r3, #16]
 80004cc:	615a      	str	r2, [r3, #20]
 80004ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80004d0:	4b2c      	ldr	r3, [pc, #176]	; (8000584 <MX_TIM3_Init+0xe4>)
 80004d2:	4a2d      	ldr	r2, [pc, #180]	; (8000588 <MX_TIM3_Init+0xe8>)
 80004d4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 80004d6:	4b2b      	ldr	r3, [pc, #172]	; (8000584 <MX_TIM3_Init+0xe4>)
 80004d8:	2247      	movs	r2, #71	; 0x47
 80004da:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004dc:	4b29      	ldr	r3, [pc, #164]	; (8000584 <MX_TIM3_Init+0xe4>)
 80004de:	2200      	movs	r2, #0
 80004e0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80004e2:	4b28      	ldr	r3, [pc, #160]	; (8000584 <MX_TIM3_Init+0xe4>)
 80004e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004e8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004ea:	4b26      	ldr	r3, [pc, #152]	; (8000584 <MX_TIM3_Init+0xe4>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004f0:	4b24      	ldr	r3, [pc, #144]	; (8000584 <MX_TIM3_Init+0xe4>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80004f6:	4823      	ldr	r0, [pc, #140]	; (8000584 <MX_TIM3_Init+0xe4>)
 80004f8:	f005 f86a 	bl	80055d0 <HAL_TIM_Base_Init>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d001      	beq.n	8000506 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000502:	f000 fc3f 	bl	8000d84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000506:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800050a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800050c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000510:	4619      	mov	r1, r3
 8000512:	481c      	ldr	r0, [pc, #112]	; (8000584 <MX_TIM3_Init+0xe4>)
 8000514:	f005 faca 	bl	8005aac <HAL_TIM_ConfigClockSource>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800051e:	f000 fc31 	bl	8000d84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000522:	4818      	ldr	r0, [pc, #96]	; (8000584 <MX_TIM3_Init+0xe4>)
 8000524:	f005 f8a3 	bl	800566e <HAL_TIM_PWM_Init>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800052e:	f000 fc29 	bl	8000d84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000532:	2300      	movs	r3, #0
 8000534:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000536:	2300      	movs	r3, #0
 8000538:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800053a:	f107 0320 	add.w	r3, r7, #32
 800053e:	4619      	mov	r1, r3
 8000540:	4810      	ldr	r0, [pc, #64]	; (8000584 <MX_TIM3_Init+0xe4>)
 8000542:	f005 fe0f 	bl	8006164 <HAL_TIMEx_MasterConfigSynchronization>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800054c:	f000 fc1a 	bl	8000d84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000550:	2360      	movs	r3, #96	; 0x60
 8000552:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000554:	2300      	movs	r3, #0
 8000556:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000558:	2300      	movs	r3, #0
 800055a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800055c:	2300      	movs	r3, #0
 800055e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	2208      	movs	r2, #8
 8000564:	4619      	mov	r1, r3
 8000566:	4807      	ldr	r0, [pc, #28]	; (8000584 <MX_TIM3_Init+0xe4>)
 8000568:	f005 f9e2 	bl	8005930 <HAL_TIM_PWM_ConfigChannel>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000572:	f000 fc07 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000576:	4803      	ldr	r0, [pc, #12]	; (8000584 <MX_TIM3_Init+0xe4>)
 8000578:	f000 fcce 	bl	8000f18 <HAL_TIM_MspPostInit>

}
 800057c:	bf00      	nop
 800057e:	3738      	adds	r7, #56	; 0x38
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	200005b0 	.word	0x200005b0
 8000588:	40000400 	.word	0x40000400

0800058c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b088      	sub	sp, #32
 8000590:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000592:	f107 0310 	add.w	r3, r7, #16
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]
 800059c:	609a      	str	r2, [r3, #8]
 800059e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a0:	4b63      	ldr	r3, [pc, #396]	; (8000730 <MX_GPIO_Init+0x1a4>)
 80005a2:	699b      	ldr	r3, [r3, #24]
 80005a4:	4a62      	ldr	r2, [pc, #392]	; (8000730 <MX_GPIO_Init+0x1a4>)
 80005a6:	f043 0310 	orr.w	r3, r3, #16
 80005aa:	6193      	str	r3, [r2, #24]
 80005ac:	4b60      	ldr	r3, [pc, #384]	; (8000730 <MX_GPIO_Init+0x1a4>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	f003 0310 	and.w	r3, r3, #16
 80005b4:	60fb      	str	r3, [r7, #12]
 80005b6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005b8:	4b5d      	ldr	r3, [pc, #372]	; (8000730 <MX_GPIO_Init+0x1a4>)
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	4a5c      	ldr	r2, [pc, #368]	; (8000730 <MX_GPIO_Init+0x1a4>)
 80005be:	f043 0320 	orr.w	r3, r3, #32
 80005c2:	6193      	str	r3, [r2, #24]
 80005c4:	4b5a      	ldr	r3, [pc, #360]	; (8000730 <MX_GPIO_Init+0x1a4>)
 80005c6:	699b      	ldr	r3, [r3, #24]
 80005c8:	f003 0320 	and.w	r3, r3, #32
 80005cc:	60bb      	str	r3, [r7, #8]
 80005ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d0:	4b57      	ldr	r3, [pc, #348]	; (8000730 <MX_GPIO_Init+0x1a4>)
 80005d2:	699b      	ldr	r3, [r3, #24]
 80005d4:	4a56      	ldr	r2, [pc, #344]	; (8000730 <MX_GPIO_Init+0x1a4>)
 80005d6:	f043 0304 	orr.w	r3, r3, #4
 80005da:	6193      	str	r3, [r2, #24]
 80005dc:	4b54      	ldr	r3, [pc, #336]	; (8000730 <MX_GPIO_Init+0x1a4>)
 80005de:	699b      	ldr	r3, [r3, #24]
 80005e0:	f003 0304 	and.w	r3, r3, #4
 80005e4:	607b      	str	r3, [r7, #4]
 80005e6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e8:	4b51      	ldr	r3, [pc, #324]	; (8000730 <MX_GPIO_Init+0x1a4>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	4a50      	ldr	r2, [pc, #320]	; (8000730 <MX_GPIO_Init+0x1a4>)
 80005ee:	f043 0308 	orr.w	r3, r3, #8
 80005f2:	6193      	str	r3, [r2, #24]
 80005f4:	4b4e      	ldr	r3, [pc, #312]	; (8000730 <MX_GPIO_Init+0x1a4>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	f003 0308 	and.w	r3, r3, #8
 80005fc:	603b      	str	r3, [r7, #0]
 80005fe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000600:	2201      	movs	r2, #1
 8000602:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000606:	484b      	ldr	r0, [pc, #300]	; (8000734 <MX_GPIO_Init+0x1a8>)
 8000608:	f003 f937 	bl	800387a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 800060c:	2201      	movs	r2, #1
 800060e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000612:	4849      	ldr	r0, [pc, #292]	; (8000738 <MX_GPIO_Init+0x1ac>)
 8000614:	f003 f931 	bl	800387a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000618:	230f      	movs	r3, #15
 800061a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800061c:	4b47      	ldr	r3, [pc, #284]	; (800073c <MX_GPIO_Init+0x1b0>)
 800061e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000620:	2301      	movs	r3, #1
 8000622:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000624:	f107 0310 	add.w	r3, r7, #16
 8000628:	4619      	mov	r1, r3
 800062a:	4843      	ldr	r0, [pc, #268]	; (8000738 <MX_GPIO_Init+0x1ac>)
 800062c:	f002 ffb4 	bl	8003598 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000630:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000634:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000636:	2301      	movs	r3, #1
 8000638:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063a:	2300      	movs	r3, #0
 800063c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800063e:	2303      	movs	r3, #3
 8000640:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000642:	f107 0310 	add.w	r3, r7, #16
 8000646:	4619      	mov	r1, r3
 8000648:	483a      	ldr	r0, [pc, #232]	; (8000734 <MX_GPIO_Init+0x1a8>)
 800064a:	f002 ffa5 	bl	8003598 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800064e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000652:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000654:	4b39      	ldr	r3, [pc, #228]	; (800073c <MX_GPIO_Init+0x1b0>)
 8000656:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	2300      	movs	r3, #0
 800065a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800065c:	f107 0310 	add.w	r3, r7, #16
 8000660:	4619      	mov	r1, r3
 8000662:	4835      	ldr	r0, [pc, #212]	; (8000738 <MX_GPIO_Init+0x1ac>)
 8000664:	f002 ff98 	bl	8003598 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000668:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800066c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066e:	2301      	movs	r3, #1
 8000670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000676:	2303      	movs	r3, #3
 8000678:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067a:	f107 0310 	add.w	r3, r7, #16
 800067e:	4619      	mov	r1, r3
 8000680:	482d      	ldr	r0, [pc, #180]	; (8000738 <MX_GPIO_Init+0x1ac>)
 8000682:	f002 ff89 	bl	8003598 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000686:	2310      	movs	r3, #16
 8000688:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800068a:	4b2d      	ldr	r3, [pc, #180]	; (8000740 <MX_GPIO_Init+0x1b4>)
 800068c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800068e:	2301      	movs	r3, #1
 8000690:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000692:	f107 0310 	add.w	r3, r7, #16
 8000696:	4619      	mov	r1, r3
 8000698:	4826      	ldr	r0, [pc, #152]	; (8000734 <MX_GPIO_Init+0x1a8>)
 800069a:	f002 ff7d 	bl	8003598 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800069e:	2340      	movs	r3, #64	; 0x40
 80006a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006a2:	4b26      	ldr	r3, [pc, #152]	; (800073c <MX_GPIO_Init+0x1b0>)
 80006a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a6:	2300      	movs	r3, #0
 80006a8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006aa:	f107 0310 	add.w	r3, r7, #16
 80006ae:	4619      	mov	r1, r3
 80006b0:	4820      	ldr	r0, [pc, #128]	; (8000734 <MX_GPIO_Init+0x1a8>)
 80006b2:	f002 ff71 	bl	8003598 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2100      	movs	r1, #0
 80006ba:	2006      	movs	r0, #6
 80006bc:	f002 ff27 	bl	800350e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80006c0:	2006      	movs	r0, #6
 80006c2:	f002 ff40 	bl	8003546 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2100      	movs	r1, #0
 80006ca:	2007      	movs	r0, #7
 80006cc:	f002 ff1f 	bl	800350e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80006d0:	2007      	movs	r0, #7
 80006d2:	f002 ff38 	bl	8003546 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80006d6:	2200      	movs	r2, #0
 80006d8:	2100      	movs	r1, #0
 80006da:	2008      	movs	r0, #8
 80006dc:	f002 ff17 	bl	800350e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80006e0:	2008      	movs	r0, #8
 80006e2:	f002 ff30 	bl	8003546 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2100      	movs	r1, #0
 80006ea:	2009      	movs	r0, #9
 80006ec:	f002 ff0f 	bl	800350e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80006f0:	2009      	movs	r0, #9
 80006f2:	f002 ff28 	bl	8003546 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80006f6:	2200      	movs	r2, #0
 80006f8:	2100      	movs	r1, #0
 80006fa:	200a      	movs	r0, #10
 80006fc:	f002 ff07 	bl	800350e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000700:	200a      	movs	r0, #10
 8000702:	f002 ff20 	bl	8003546 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000706:	2200      	movs	r2, #0
 8000708:	2100      	movs	r1, #0
 800070a:	2017      	movs	r0, #23
 800070c:	f002 feff 	bl	800350e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000710:	2017      	movs	r0, #23
 8000712:	f002 ff18 	bl	8003546 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000716:	2200      	movs	r2, #0
 8000718:	2100      	movs	r1, #0
 800071a:	2028      	movs	r0, #40	; 0x28
 800071c:	f002 fef7 	bl	800350e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000720:	2028      	movs	r0, #40	; 0x28
 8000722:	f002 ff10 	bl	8003546 <HAL_NVIC_EnableIRQ>

}
 8000726:	bf00      	nop
 8000728:	3720      	adds	r7, #32
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40021000 	.word	0x40021000
 8000734:	40010c00 	.word	0x40010c00
 8000738:	40010800 	.word	0x40010800
 800073c:	10210000 	.word	0x10210000
 8000740:	10310000 	.word	0x10310000

08000744 <U8x8Stm32GPIOAndDelay>:

/* USER CODE BEGIN 4 */
uint8_t U8x8Stm32GPIOAndDelay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int,
		void *arg_ptr) {
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
 800074a:	60f8      	str	r0, [r7, #12]
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	460b      	mov	r3, r1
 8000750:	72fb      	strb	r3, [r7, #11]
 8000752:	4613      	mov	r3, r2
 8000754:	72bb      	strb	r3, [r7, #10]
	/* STM32 supports HW SPI, Remove unused cases like U8X8_MSG_DELAY_XXX & U8X8_MSG_GPIO_XXX */
	switch (msg) {
 8000756:	7afb      	ldrb	r3, [r7, #11]
 8000758:	3b28      	subs	r3, #40	; 0x28
 800075a:	2b23      	cmp	r3, #35	; 0x23
 800075c:	d85f      	bhi.n	800081e <U8x8Stm32GPIOAndDelay+0xda>
 800075e:	a201      	add	r2, pc, #4	; (adr r2, 8000764 <U8x8Stm32GPIOAndDelay+0x20>)
 8000760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000764:	08000823 	.word	0x08000823
 8000768:	080007f5 	.word	0x080007f5
 800076c:	0800081f 	.word	0x0800081f
 8000770:	0800081f 	.word	0x0800081f
 8000774:	0800081f 	.word	0x0800081f
 8000778:	0800081f 	.word	0x0800081f
 800077c:	0800081f 	.word	0x0800081f
 8000780:	0800081f 	.word	0x0800081f
 8000784:	0800081f 	.word	0x0800081f
 8000788:	0800081f 	.word	0x0800081f
 800078c:	0800081f 	.word	0x0800081f
 8000790:	0800081f 	.word	0x0800081f
 8000794:	0800081f 	.word	0x0800081f
 8000798:	0800081f 	.word	0x0800081f
 800079c:	0800081f 	.word	0x0800081f
 80007a0:	0800081f 	.word	0x0800081f
 80007a4:	0800081f 	.word	0x0800081f
 80007a8:	0800081f 	.word	0x0800081f
 80007ac:	0800081f 	.word	0x0800081f
 80007b0:	0800081f 	.word	0x0800081f
 80007b4:	0800081f 	.word	0x0800081f
 80007b8:	0800081f 	.word	0x0800081f
 80007bc:	0800081f 	.word	0x0800081f
 80007c0:	0800081f 	.word	0x0800081f
 80007c4:	0800081f 	.word	0x0800081f
 80007c8:	0800081f 	.word	0x0800081f
 80007cc:	0800081f 	.word	0x0800081f
 80007d0:	0800081f 	.word	0x0800081f
 80007d4:	0800081f 	.word	0x0800081f
 80007d8:	0800081f 	.word	0x0800081f
 80007dc:	0800081f 	.word	0x0800081f
 80007e0:	0800081f 	.word	0x0800081f
 80007e4:	0800081f 	.word	0x0800081f
 80007e8:	080007ff 	.word	0x080007ff
 80007ec:	08000823 	.word	0x08000823
 80007f0:	0800080f 	.word	0x0800080f
	case U8X8_MSG_GPIO_AND_DELAY_INIT:
		/* Insert codes for initialization */
		break;
	case U8X8_MSG_DELAY_MILLI:
		/* ms Delay */
		HAL_Delay(arg_int);
 80007f4:	7abb      	ldrb	r3, [r7, #10]
 80007f6:	4618      	mov	r0, r3
 80007f8:	f002 fd6e 	bl	80032d8 <HAL_Delay>
		break;
 80007fc:	e012      	b.n	8000824 <U8x8Stm32GPIOAndDelay+0xe0>
	case U8X8_MSG_GPIO_CS:
		/* Insert codes for SS pin control */
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, arg_int);
 80007fe:	7abb      	ldrb	r3, [r7, #10]
 8000800:	461a      	mov	r2, r3
 8000802:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000806:	480a      	ldr	r0, [pc, #40]	; (8000830 <U8x8Stm32GPIOAndDelay+0xec>)
 8000808:	f003 f837 	bl	800387a <HAL_GPIO_WritePin>
		break;
 800080c:	e00a      	b.n	8000824 <U8x8Stm32GPIOAndDelay+0xe0>
		/* Insert codes for DC pin control */
		//HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, arg_int);
		break;
	case U8X8_MSG_GPIO_RESET:
		/* Insert codes for RST pin control */
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, arg_int);
 800080e:	7abb      	ldrb	r3, [r7, #10]
 8000810:	461a      	mov	r2, r3
 8000812:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000816:	4807      	ldr	r0, [pc, #28]	; (8000834 <U8x8Stm32GPIOAndDelay+0xf0>)
 8000818:	f003 f82f 	bl	800387a <HAL_GPIO_WritePin>
		break;
 800081c:	e002      	b.n	8000824 <U8x8Stm32GPIOAndDelay+0xe0>
	default:
		//u8x8_SetGPIOResult(u8x8, 1);
		return 1;
 800081e:	2301      	movs	r3, #1
 8000820:	e001      	b.n	8000826 <U8x8Stm32GPIOAndDelay+0xe2>
		break;
 8000822:	bf00      	nop
	}
	return 1;
 8000824:	2301      	movs	r3, #1
}
 8000826:	4618      	mov	r0, r3
 8000828:	3710      	adds	r7, #16
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40010c00 	.word	0x40010c00
 8000834:	40010800 	.word	0x40010800

08000838 <U8x8ByteSTM32HWSPI>:

uint8_t U8x8ByteSTM32HWSPI(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int,
		void *arg_ptr) {
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0
 800083e:	60f8      	str	r0, [r7, #12]
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	460b      	mov	r3, r1
 8000844:	72fb      	strb	r3, [r7, #11]
 8000846:	4613      	mov	r3, r2
 8000848:	72bb      	strb	r3, [r7, #10]
	switch (msg) {
 800084a:	7afb      	ldrb	r3, [r7, #11]
 800084c:	3b14      	subs	r3, #20
 800084e:	2b0c      	cmp	r3, #12
 8000850:	d848      	bhi.n	80008e4 <U8x8ByteSTM32HWSPI+0xac>
 8000852:	a201      	add	r2, pc, #4	; (adr r2, 8000858 <U8x8ByteSTM32HWSPI+0x20>)
 8000854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000858:	080008e9 	.word	0x080008e9
 800085c:	080008e5 	.word	0x080008e5
 8000860:	080008e5 	.word	0x080008e5
 8000864:	0800088d 	.word	0x0800088d
 8000868:	080008b5 	.word	0x080008b5
 800086c:	080008cd 	.word	0x080008cd
 8000870:	080008e5 	.word	0x080008e5
 8000874:	080008e5 	.word	0x080008e5
 8000878:	080008e5 	.word	0x080008e5
 800087c:	080008e5 	.word	0x080008e5
 8000880:	080008e5 	.word	0x080008e5
 8000884:	080008e5 	.word	0x080008e5
 8000888:	080008a7 	.word	0x080008a7
	case U8X8_MSG_BYTE_SEND:
		/* Insert codes to transmit data */
		if (HAL_SPI_Transmit(&hspi2, arg_ptr, arg_int, 1000) != HAL_OK)
 800088c:	7abb      	ldrb	r3, [r7, #10]
 800088e:	b29a      	uxth	r2, r3
 8000890:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000894:	6879      	ldr	r1, [r7, #4]
 8000896:	4818      	ldr	r0, [pc, #96]	; (80008f8 <U8x8ByteSTM32HWSPI+0xc0>)
 8000898:	f004 fcb8 	bl	800520c <HAL_SPI_Transmit>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d024      	beq.n	80008ec <U8x8ByteSTM32HWSPI+0xb4>
			return 0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	e024      	b.n	80008f0 <U8x8ByteSTM32HWSPI+0xb8>
	case U8X8_MSG_BYTE_INIT:
		/* Insert codes to begin SPI transmission */
		break;
	case U8X8_MSG_BYTE_SET_DC:
		/* Control DC pin, U8X8_MSG_GPIO_DC will be called */
		u8x8_gpio_SetDC(u8x8, arg_int);
 80008a6:	7abb      	ldrb	r3, [r7, #10]
 80008a8:	461a      	mov	r2, r3
 80008aa:	214a      	movs	r1, #74	; 0x4a
 80008ac:	68f8      	ldr	r0, [r7, #12]
 80008ae:	f002 fc19 	bl	80030e4 <u8x8_gpio_call>
		break;
 80008b2:	e01c      	b.n	80008ee <U8x8ByteSTM32HWSPI+0xb6>
	case U8X8_MSG_BYTE_START_TRANSFER:
		/* Select slave, U8X8_MSG_GPIO_CS will be called */
		u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	461a      	mov	r2, r3
 80008bc:	2149      	movs	r1, #73	; 0x49
 80008be:	68f8      	ldr	r0, [r7, #12]
 80008c0:	f002 fc10 	bl	80030e4 <u8x8_gpio_call>
		HAL_Delay(1);
 80008c4:	2001      	movs	r0, #1
 80008c6:	f002 fd07 	bl	80032d8 <HAL_Delay>
		break;
 80008ca:	e010      	b.n	80008ee <U8x8ByteSTM32HWSPI+0xb6>
	case U8X8_MSG_BYTE_END_TRANSFER:
		HAL_Delay(1);
 80008cc:	2001      	movs	r0, #1
 80008ce:	f002 fd03 	bl	80032d8 <HAL_Delay>
		/* Insert codes to end SPI transmission */
		u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	785b      	ldrb	r3, [r3, #1]
 80008d8:	461a      	mov	r2, r3
 80008da:	2149      	movs	r1, #73	; 0x49
 80008dc:	68f8      	ldr	r0, [r7, #12]
 80008de:	f002 fc01 	bl	80030e4 <u8x8_gpio_call>
		break;
 80008e2:	e004      	b.n	80008ee <U8x8ByteSTM32HWSPI+0xb6>
	default:
		return 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	e003      	b.n	80008f0 <U8x8ByteSTM32HWSPI+0xb8>
		break;
 80008e8:	bf00      	nop
 80008ea:	e000      	b.n	80008ee <U8x8ByteSTM32HWSPI+0xb6>
		break;
 80008ec:	bf00      	nop
	}
	return 1;
 80008ee:	2301      	movs	r3, #1
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3710      	adds	r7, #16
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	200004d0 	.word	0x200004d0

080008fc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 8000906:	88fb      	ldrh	r3, [r7, #6]
 8000908:	3b01      	subs	r3, #1
 800090a:	2b0f      	cmp	r3, #15
 800090c:	d87c      	bhi.n	8000a08 <HAL_GPIO_EXTI_Callback+0x10c>
 800090e:	a201      	add	r2, pc, #4	; (adr r2, 8000914 <HAL_GPIO_EXTI_Callback+0x18>)
 8000910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000914:	08000955 	.word	0x08000955
 8000918:	08000979 	.word	0x08000979
 800091c:	08000a09 	.word	0x08000a09
 8000920:	0800099d 	.word	0x0800099d
 8000924:	08000a09 	.word	0x08000a09
 8000928:	08000a09 	.word	0x08000a09
 800092c:	08000a09 	.word	0x08000a09
 8000930:	080009c1 	.word	0x080009c1
 8000934:	08000a09 	.word	0x08000a09
 8000938:	08000a09 	.word	0x08000a09
 800093c:	08000a09 	.word	0x08000a09
 8000940:	08000a09 	.word	0x08000a09
 8000944:	08000a09 	.word	0x08000a09
 8000948:	08000a09 	.word	0x08000a09
 800094c:	08000a09 	.word	0x08000a09
 8000950:	080009e5 	.word	0x080009e5
	case GPIO_PIN_0:
		HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8000954:	2006      	movs	r0, #6
 8000956:	f002 fe04 	bl	8003562 <HAL_NVIC_DisableIRQ>
		flag_irq[0]++;
 800095a:	4b2d      	ldr	r3, [pc, #180]	; (8000a10 <HAL_GPIO_EXTI_Callback+0x114>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	3301      	adds	r3, #1
 8000960:	b2da      	uxtb	r2, r3
 8000962:	4b2b      	ldr	r3, [pc, #172]	; (8000a10 <HAL_GPIO_EXTI_Callback+0x114>)
 8000964:	701a      	strb	r2, [r3, #0]
		time_irq[0] = HAL_GetTick();
 8000966:	f002 fcad 	bl	80032c4 <HAL_GetTick>
 800096a:	4602      	mov	r2, r0
 800096c:	4b29      	ldr	r3, [pc, #164]	; (8000a14 <HAL_GPIO_EXTI_Callback+0x118>)
 800096e:	601a      	str	r2, [r3, #0]
		update = 0;
 8000970:	4b29      	ldr	r3, [pc, #164]	; (8000a18 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000972:	2200      	movs	r2, #0
 8000974:	701a      	strb	r2, [r3, #0]
		break;
 8000976:	e047      	b.n	8000a08 <HAL_GPIO_EXTI_Callback+0x10c>
	case GPIO_PIN_1:
		HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 8000978:	2007      	movs	r0, #7
 800097a:	f002 fdf2 	bl	8003562 <HAL_NVIC_DisableIRQ>
		flag_irq[1]++;
 800097e:	4b24      	ldr	r3, [pc, #144]	; (8000a10 <HAL_GPIO_EXTI_Callback+0x114>)
 8000980:	785b      	ldrb	r3, [r3, #1]
 8000982:	3301      	adds	r3, #1
 8000984:	b2da      	uxtb	r2, r3
 8000986:	4b22      	ldr	r3, [pc, #136]	; (8000a10 <HAL_GPIO_EXTI_Callback+0x114>)
 8000988:	705a      	strb	r2, [r3, #1]
		time_irq[1] = HAL_GetTick();
 800098a:	f002 fc9b 	bl	80032c4 <HAL_GetTick>
 800098e:	4602      	mov	r2, r0
 8000990:	4b20      	ldr	r3, [pc, #128]	; (8000a14 <HAL_GPIO_EXTI_Callback+0x118>)
 8000992:	605a      	str	r2, [r3, #4]
		update = 1;
 8000994:	4b20      	ldr	r3, [pc, #128]	; (8000a18 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000996:	2201      	movs	r2, #1
 8000998:	701a      	strb	r2, [r3, #0]
		break;
 800099a:	e035      	b.n	8000a08 <HAL_GPIO_EXTI_Callback+0x10c>
	case GPIO_PIN_2:
		HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 800099c:	2008      	movs	r0, #8
 800099e:	f002 fde0 	bl	8003562 <HAL_NVIC_DisableIRQ>
		flag_irq[2]++;
 80009a2:	4b1b      	ldr	r3, [pc, #108]	; (8000a10 <HAL_GPIO_EXTI_Callback+0x114>)
 80009a4:	789b      	ldrb	r3, [r3, #2]
 80009a6:	3301      	adds	r3, #1
 80009a8:	b2da      	uxtb	r2, r3
 80009aa:	4b19      	ldr	r3, [pc, #100]	; (8000a10 <HAL_GPIO_EXTI_Callback+0x114>)
 80009ac:	709a      	strb	r2, [r3, #2]
		time_irq[2] = HAL_GetTick();
 80009ae:	f002 fc89 	bl	80032c4 <HAL_GetTick>
 80009b2:	4602      	mov	r2, r0
 80009b4:	4b17      	ldr	r3, [pc, #92]	; (8000a14 <HAL_GPIO_EXTI_Callback+0x118>)
 80009b6:	609a      	str	r2, [r3, #8]
		update = 2;
 80009b8:	4b17      	ldr	r3, [pc, #92]	; (8000a18 <HAL_GPIO_EXTI_Callback+0x11c>)
 80009ba:	2202      	movs	r2, #2
 80009bc:	701a      	strb	r2, [r3, #0]
		break;
 80009be:	e023      	b.n	8000a08 <HAL_GPIO_EXTI_Callback+0x10c>
	case GPIO_PIN_3:
		HAL_NVIC_DisableIRQ(EXTI3_IRQn);
 80009c0:	2009      	movs	r0, #9
 80009c2:	f002 fdce 	bl	8003562 <HAL_NVIC_DisableIRQ>
		flag_irq[3]++;
 80009c6:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <HAL_GPIO_EXTI_Callback+0x114>)
 80009c8:	78db      	ldrb	r3, [r3, #3]
 80009ca:	3301      	adds	r3, #1
 80009cc:	b2da      	uxtb	r2, r3
 80009ce:	4b10      	ldr	r3, [pc, #64]	; (8000a10 <HAL_GPIO_EXTI_Callback+0x114>)
 80009d0:	70da      	strb	r2, [r3, #3]
		time_irq[3] = HAL_GetTick();
 80009d2:	f002 fc77 	bl	80032c4 <HAL_GetTick>
 80009d6:	4602      	mov	r2, r0
 80009d8:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <HAL_GPIO_EXTI_Callback+0x118>)
 80009da:	60da      	str	r2, [r3, #12]
		update = 3;
 80009dc:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <HAL_GPIO_EXTI_Callback+0x11c>)
 80009de:	2203      	movs	r2, #3
 80009e0:	701a      	strb	r2, [r3, #0]
		break;
 80009e2:	e011      	b.n	8000a08 <HAL_GPIO_EXTI_Callback+0x10c>
	case GPIO_PIN_4:
		HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 80009e4:	200a      	movs	r0, #10
 80009e6:	f002 fdbc 	bl	8003562 <HAL_NVIC_DisableIRQ>
		flag_irq[4]++;
 80009ea:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <HAL_GPIO_EXTI_Callback+0x114>)
 80009ec:	791b      	ldrb	r3, [r3, #4]
 80009ee:	3301      	adds	r3, #1
 80009f0:	b2da      	uxtb	r2, r3
 80009f2:	4b07      	ldr	r3, [pc, #28]	; (8000a10 <HAL_GPIO_EXTI_Callback+0x114>)
 80009f4:	711a      	strb	r2, [r3, #4]
		time_irq[4] = HAL_GetTick();
 80009f6:	f002 fc65 	bl	80032c4 <HAL_GetTick>
 80009fa:	4602      	mov	r2, r0
 80009fc:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <HAL_GPIO_EXTI_Callback+0x118>)
 80009fe:	611a      	str	r2, [r3, #16]
		update = 4;
 8000a00:	4b05      	ldr	r3, [pc, #20]	; (8000a18 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000a02:	2204      	movs	r2, #4
 8000a04:	701a      	strb	r2, [r3, #0]
	}
}
 8000a06:	e7ff      	b.n	8000a08 <HAL_GPIO_EXTI_Callback+0x10c>
 8000a08:	bf00      	nop
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20000094 	.word	0x20000094
 8000a14:	2000009c 	.word	0x2000009c
 8000a18:	20000002 	.word	0x20000002

08000a1c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
		//update = 1;
	}
}
 8000a24:	bf00      	nop
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bc80      	pop	{r7}
 8000a2c:	4770      	bx	lr

08000a2e <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8000a2e:	b480      	push	{r7}
 8000a30:	b083      	sub	sp, #12
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	6078      	str	r0, [r7, #4]
	//sprintf((char*) stAlarm, "ZAZ");
}
 8000a36:	bf00      	nop
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bc80      	pop	{r7}
 8000a3e:	4770      	bx	lr

08000a40 <MainActivity>:

void MainActivity(void) {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b086      	sub	sp, #24
 8000a44:	af02      	add	r7, sp, #8
	u8g2_FirstPage(&u8g2);
 8000a46:	4851      	ldr	r0, [pc, #324]	; (8000b8c <MainActivity+0x14c>)
 8000a48:	f000 fca6 	bl	8001398 <u8g2_FirstPage>
	do {
		u8g2_ClearBuffer(&u8g2);
 8000a4c:	484f      	ldr	r0, [pc, #316]	; (8000b8c <MainActivity+0x14c>)
 8000a4e:	f000 fc18 	bl	8001282 <u8g2_ClearBuffer>
		u8g2_SetDrawColor(&u8g2, 1);
 8000a52:	2101      	movs	r1, #1
 8000a54:	484d      	ldr	r0, [pc, #308]	; (8000b8c <MainActivity+0x14c>)
 8000a56:	f001 fd79 	bl	800254c <u8g2_SetDrawColor>
		u8g2_DrawFrame(&u8g2, 0, 1, 15, 15);
 8000a5a:	230f      	movs	r3, #15
 8000a5c:	9300      	str	r3, [sp, #0]
 8000a5e:	230f      	movs	r3, #15
 8000a60:	2201      	movs	r2, #1
 8000a62:	2100      	movs	r1, #0
 8000a64:	4849      	ldr	r0, [pc, #292]	; (8000b8c <MainActivity+0x14c>)
 8000a66:	f000 fbb4 	bl	80011d2 <u8g2_DrawFrame>
		u8g2_DrawFilledEllipse(&u8g2, 14, 1, 7, 7, U8G2_DRAW_LOWER_LEFT);
 8000a6a:	2304      	movs	r3, #4
 8000a6c:	9301      	str	r3, [sp, #4]
 8000a6e:	2307      	movs	r3, #7
 8000a70:	9300      	str	r3, [sp, #0]
 8000a72:	2307      	movs	r3, #7
 8000a74:	2201      	movs	r2, #1
 8000a76:	210e      	movs	r1, #14
 8000a78:	4844      	ldr	r0, [pc, #272]	; (8000b8c <MainActivity+0x14c>)
 8000a7a:	f000 fe45 	bl	8001708 <u8g2_DrawFilledEllipse>
		u8g2_DrawFrame(&u8g2, 0, 17, 15, 15);
 8000a7e:	230f      	movs	r3, #15
 8000a80:	9300      	str	r3, [sp, #0]
 8000a82:	230f      	movs	r3, #15
 8000a84:	2211      	movs	r2, #17
 8000a86:	2100      	movs	r1, #0
 8000a88:	4840      	ldr	r0, [pc, #256]	; (8000b8c <MainActivity+0x14c>)
 8000a8a:	f000 fba2 	bl	80011d2 <u8g2_DrawFrame>
		u8g2_DrawFilledEllipse(&u8g2, 14, 31, 7, 7, U8G2_DRAW_UPPER_LEFT);
 8000a8e:	2302      	movs	r3, #2
 8000a90:	9301      	str	r3, [sp, #4]
 8000a92:	2307      	movs	r3, #7
 8000a94:	9300      	str	r3, [sp, #0]
 8000a96:	2307      	movs	r3, #7
 8000a98:	221f      	movs	r2, #31
 8000a9a:	210e      	movs	r1, #14
 8000a9c:	483b      	ldr	r0, [pc, #236]	; (8000b8c <MainActivity+0x14c>)
 8000a9e:	f000 fe33 	bl	8001708 <u8g2_DrawFilledEllipse>
		u8g2_DrawFrame(&u8g2, 0, 33, 15, 15);
 8000aa2:	230f      	movs	r3, #15
 8000aa4:	9300      	str	r3, [sp, #0]
 8000aa6:	230f      	movs	r3, #15
 8000aa8:	2221      	movs	r2, #33	; 0x21
 8000aaa:	2100      	movs	r1, #0
 8000aac:	4837      	ldr	r0, [pc, #220]	; (8000b8c <MainActivity+0x14c>)
 8000aae:	f000 fb90 	bl	80011d2 <u8g2_DrawFrame>
		u8g2_DrawFilledEllipse(&u8g2, 0, 47, 7, 7, U8G2_DRAW_UPPER_RIGHT);
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	9301      	str	r3, [sp, #4]
 8000ab6:	2307      	movs	r3, #7
 8000ab8:	9300      	str	r3, [sp, #0]
 8000aba:	2307      	movs	r3, #7
 8000abc:	222f      	movs	r2, #47	; 0x2f
 8000abe:	2100      	movs	r1, #0
 8000ac0:	4832      	ldr	r0, [pc, #200]	; (8000b8c <MainActivity+0x14c>)
 8000ac2:	f000 fe21 	bl	8001708 <u8g2_DrawFilledEllipse>
		u8g2_DrawFrame(&u8g2, 0, 49, 15, 15);
 8000ac6:	230f      	movs	r3, #15
 8000ac8:	9300      	str	r3, [sp, #0]
 8000aca:	230f      	movs	r3, #15
 8000acc:	2231      	movs	r2, #49	; 0x31
 8000ace:	2100      	movs	r1, #0
 8000ad0:	482e      	ldr	r0, [pc, #184]	; (8000b8c <MainActivity+0x14c>)
 8000ad2:	f000 fb7e 	bl	80011d2 <u8g2_DrawFrame>
		//if (lowerHeat)
		u8g2_DrawFilledEllipse(&u8g2, 7, 63, 7, 3,
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	9301      	str	r3, [sp, #4]
 8000ada:	2303      	movs	r3, #3
 8000adc:	9300      	str	r3, [sp, #0]
 8000ade:	2307      	movs	r3, #7
 8000ae0:	223f      	movs	r2, #63	; 0x3f
 8000ae2:	2107      	movs	r1, #7
 8000ae4:	4829      	ldr	r0, [pc, #164]	; (8000b8c <MainActivity+0x14c>)
 8000ae6:	f000 fe0f 	bl	8001708 <u8g2_DrawFilledEllipse>
		U8G2_DRAW_UPPER_LEFT | U8G2_DRAW_UPPER_RIGHT);
		//if (upperHeat)
		u8g2_DrawFilledEllipse(&u8g2, 7, 49, 7, 3,
 8000aea:	230c      	movs	r3, #12
 8000aec:	9301      	str	r3, [sp, #4]
 8000aee:	2303      	movs	r3, #3
 8000af0:	9300      	str	r3, [sp, #0]
 8000af2:	2307      	movs	r3, #7
 8000af4:	2231      	movs	r2, #49	; 0x31
 8000af6:	2107      	movs	r1, #7
 8000af8:	4824      	ldr	r0, [pc, #144]	; (8000b8c <MainActivity+0x14c>)
 8000afa:	f000 fe05 	bl	8001708 <u8g2_DrawFilledEllipse>
		U8G2_DRAW_LOWER_LEFT | U8G2_DRAW_LOWER_RIGHT);
		//if (heatOn)
		//{
		u8g2_DrawVLine(&u8g2, 5, 54, 5);
 8000afe:	2305      	movs	r3, #5
 8000b00:	2236      	movs	r2, #54	; 0x36
 8000b02:	2105      	movs	r1, #5
 8000b04:	4821      	ldr	r0, [pc, #132]	; (8000b8c <MainActivity+0x14c>)
 8000b06:	f001 fd07 	bl	8002518 <u8g2_DrawVLine>
		u8g2_DrawVLine(&u8g2, 9, 54, 5);
 8000b0a:	2305      	movs	r3, #5
 8000b0c:	2236      	movs	r2, #54	; 0x36
 8000b0e:	2109      	movs	r1, #9
 8000b10:	481e      	ldr	r0, [pc, #120]	; (8000b8c <MainActivity+0x14c>)
 8000b12:	f001 fd01 	bl	8002518 <u8g2_DrawVLine>
		u8g2_SetDrawColor(&u8g2, 2);
 8000b16:	2102      	movs	r1, #2
 8000b18:	481c      	ldr	r0, [pc, #112]	; (8000b8c <MainActivity+0x14c>)
 8000b1a:	f001 fd17 	bl	800254c <u8g2_SetDrawColor>
		u8g2_DrawHLine(&u8g2, 5, 56, 2);
 8000b1e:	2302      	movs	r3, #2
 8000b20:	2238      	movs	r2, #56	; 0x38
 8000b22:	2105      	movs	r1, #5
 8000b24:	4819      	ldr	r0, [pc, #100]	; (8000b8c <MainActivity+0x14c>)
 8000b26:	f001 fcdd 	bl	80024e4 <u8g2_DrawHLine>
		u8g2_DrawHLine(&u8g2, 9, 56, 2);
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	2238      	movs	r2, #56	; 0x38
 8000b2e:	2109      	movs	r1, #9
 8000b30:	4816      	ldr	r0, [pc, #88]	; (8000b8c <MainActivity+0x14c>)
 8000b32:	f001 fcd7 	bl	80024e4 <u8g2_DrawHLine>
		u8g2_SetDrawColor(&u8g2, 1);
 8000b36:	2101      	movs	r1, #1
 8000b38:	4814      	ldr	r0, [pc, #80]	; (8000b8c <MainActivity+0x14c>)
 8000b3a:	f001 fd07 	bl	800254c <u8g2_SetDrawColor>
		//}
		uint8_t stime[9];
		RTC_TimeShow(stime);
 8000b3e:	1d3b      	adds	r3, r7, #4
 8000b40:	4618      	mov	r0, r3
 8000b42:	f000 f8f9 	bl	8000d38 <RTC_TimeShow>
		u8g2_DrawUTF8(&u8g2, 17, 16 * 1 - 2, stime);
 8000b46:	1d3b      	adds	r3, r7, #4
 8000b48:	220e      	movs	r2, #14
 8000b4a:	2111      	movs	r1, #17
 8000b4c:	480f      	ldr	r0, [pc, #60]	; (8000b8c <MainActivity+0x14c>)
 8000b4e:	f001 fb11 	bl	8002174 <u8g2_DrawUTF8>
		//u8g2_DrawUTF8(&u8g2, 17, 16 * 2 - 2, stAlarm);
		//u8g2_DrawUTF8(&u8g2, 17, 16 * 3 - 2, time);
		//u8g2_DrawUTF8(&u8g2, 17, 16 * 4 - 2, time);
		u8g2_SetDrawColor(&u8g2, 2);
 8000b52:	2102      	movs	r1, #2
 8000b54:	480d      	ldr	r0, [pc, #52]	; (8000b8c <MainActivity+0x14c>)
 8000b56:	f001 fcf9 	bl	800254c <u8g2_SetDrawColor>
		u8g2_DrawBox(&u8g2, 16, 1 + 16 * (pointer), 112, 15);
 8000b5a:	4b0d      	ldr	r3, [pc, #52]	; (8000b90 <MainActivity+0x150>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	011b      	lsls	r3, r3, #4
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	3301      	adds	r3, #1
 8000b64:	b2da      	uxtb	r2, r3
 8000b66:	230f      	movs	r3, #15
 8000b68:	9300      	str	r3, [sp, #0]
 8000b6a:	2370      	movs	r3, #112	; 0x70
 8000b6c:	2110      	movs	r1, #16
 8000b6e:	4807      	ldr	r0, [pc, #28]	; (8000b8c <MainActivity+0x14c>)
 8000b70:	f000 faf8 	bl	8001164 <u8g2_DrawBox>
		//HAL_Delay(1200);
		//u8g2_ClearBuffer(&u8g2);
		//u8g2_SetBitmapMode(&u8g2,1);
		//u8g2_DrawBitmap(&u8g2, 0, 0, bitmap_height, bitmap_width,  bitmap);

	} while (u8g2_NextPage(&u8g2));
 8000b74:	4805      	ldr	r0, [pc, #20]	; (8000b8c <MainActivity+0x14c>)
 8000b76:	f000 fc23 	bl	80013c0 <u8g2_NextPage>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	f47f af65 	bne.w	8000a4c <MainActivity+0xc>
}
 8000b82:	bf00      	nop
 8000b84:	3710      	adds	r7, #16
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	20000528 	.word	0x20000528
 8000b90:	20000090 	.word	0x20000090

08000b94 <OrderActivity>:

void OrderActivity(void) {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b088      	sub	sp, #32
 8000b98:	af02      	add	r7, sp, #8

	u8g2_FirstPage(&u8g2);
 8000b9a:	4832      	ldr	r0, [pc, #200]	; (8000c64 <OrderActivity+0xd0>)
 8000b9c:	f000 fbfc 	bl	8001398 <u8g2_FirstPage>
	do {
		u8g2_ClearBuffer(&u8g2);
 8000ba0:	4830      	ldr	r0, [pc, #192]	; (8000c64 <OrderActivity+0xd0>)
 8000ba2:	f000 fb6e 	bl	8001282 <u8g2_ClearBuffer>
		u8g2_SetDrawColor(&u8g2, 1);
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	482e      	ldr	r0, [pc, #184]	; (8000c64 <OrderActivity+0xd0>)
 8000baa:	f001 fccf 	bl	800254c <u8g2_SetDrawColor>

		u8g2_DrawFrame(&u8g2, 0, 1, 15, 15);
 8000bae:	230f      	movs	r3, #15
 8000bb0:	9300      	str	r3, [sp, #0]
 8000bb2:	230f      	movs	r3, #15
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	482a      	ldr	r0, [pc, #168]	; (8000c64 <OrderActivity+0xd0>)
 8000bba:	f000 fb0a 	bl	80011d2 <u8g2_DrawFrame>
		u8g2_DrawFilledEllipse(&u8g2, 14, 1, 7, 7, U8G2_DRAW_LOWER_LEFT);
 8000bbe:	2304      	movs	r3, #4
 8000bc0:	9301      	str	r3, [sp, #4]
 8000bc2:	2307      	movs	r3, #7
 8000bc4:	9300      	str	r3, [sp, #0]
 8000bc6:	2307      	movs	r3, #7
 8000bc8:	2201      	movs	r2, #1
 8000bca:	210e      	movs	r1, #14
 8000bcc:	4825      	ldr	r0, [pc, #148]	; (8000c64 <OrderActivity+0xd0>)
 8000bce:	f000 fd9b 	bl	8001708 <u8g2_DrawFilledEllipse>

		u8g2_DrawUTF8(&u8g2, 17, 14, "Меню");
 8000bd2:	4b25      	ldr	r3, [pc, #148]	; (8000c68 <OrderActivity+0xd4>)
 8000bd4:	220e      	movs	r2, #14
 8000bd6:	2111      	movs	r1, #17
 8000bd8:	4822      	ldr	r0, [pc, #136]	; (8000c64 <OrderActivity+0xd0>)
 8000bda:	f001 facb 	bl	8002174 <u8g2_DrawUTF8>
		u8g2_DrawHLine(&u8g2, 0, 15, 128);
 8000bde:	2380      	movs	r3, #128	; 0x80
 8000be0:	220f      	movs	r2, #15
 8000be2:	2100      	movs	r1, #0
 8000be4:	481f      	ldr	r0, [pc, #124]	; (8000c64 <OrderActivity+0xd0>)
 8000be6:	f001 fc7d 	bl	80024e4 <u8g2_DrawHLine>
		u8g2_DrawUTF8(&u8g2, 1, 30, "Режим: 3");
 8000bea:	4b20      	ldr	r3, [pc, #128]	; (8000c6c <OrderActivity+0xd8>)
 8000bec:	221e      	movs	r2, #30
 8000bee:	2101      	movs	r1, #1
 8000bf0:	481c      	ldr	r0, [pc, #112]	; (8000c64 <OrderActivity+0xd0>)
 8000bf2:	f001 fabf 	bl	8002174 <u8g2_DrawUTF8>
		//u8g2_DrawUTF8(&u8g2, 1, 46, "Время: 00:12:49");
		uint8_t stime[9], poin[9];
		RTC_TimeShow(stime);
 8000bf6:	f107 030c 	add.w	r3, r7, #12
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f000 f89c 	bl	8000d38 <RTC_TimeShow>
		u8g2_DrawUTF8(&u8g2, 1, 46, stime);
 8000c00:	f107 030c 	add.w	r3, r7, #12
 8000c04:	222e      	movs	r2, #46	; 0x2e
 8000c06:	2101      	movs	r1, #1
 8000c08:	4816      	ldr	r0, [pc, #88]	; (8000c64 <OrderActivity+0xd0>)
 8000c0a:	f001 fab3 	bl	8002174 <u8g2_DrawUTF8>
		sprintf((char*) poin, "%9d", pointer);
 8000c0e:	4b18      	ldr	r3, [pc, #96]	; (8000c70 <OrderActivity+0xdc>)
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	461a      	mov	r2, r3
 8000c14:	463b      	mov	r3, r7
 8000c16:	4917      	ldr	r1, [pc, #92]	; (8000c74 <OrderActivity+0xe0>)
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f005 fb45 	bl	80062a8 <siprintf>
		u8g2_DrawUTF8(&u8g2, 1, 62, poin);
 8000c1e:	463b      	mov	r3, r7
 8000c20:	223e      	movs	r2, #62	; 0x3e
 8000c22:	2101      	movs	r1, #1
 8000c24:	480f      	ldr	r0, [pc, #60]	; (8000c64 <OrderActivity+0xd0>)
 8000c26:	f001 faa5 	bl	8002174 <u8g2_DrawUTF8>
		u8g2_SetDrawColor(&u8g2, 2);
 8000c2a:	2102      	movs	r1, #2
 8000c2c:	480d      	ldr	r0, [pc, #52]	; (8000c64 <OrderActivity+0xd0>)
 8000c2e:	f001 fc8d 	bl	800254c <u8g2_SetDrawColor>
		u8g2_DrawBox(&u8g2, 0, 1 + 16 * (pointer + 1), 128, 15);
 8000c32:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <OrderActivity+0xdc>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	3301      	adds	r3, #1
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	011b      	lsls	r3, r3, #4
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	3301      	adds	r3, #1
 8000c40:	b2da      	uxtb	r2, r3
 8000c42:	230f      	movs	r3, #15
 8000c44:	9300      	str	r3, [sp, #0]
 8000c46:	2380      	movs	r3, #128	; 0x80
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4806      	ldr	r0, [pc, #24]	; (8000c64 <OrderActivity+0xd0>)
 8000c4c:	f000 fa8a 	bl	8001164 <u8g2_DrawBox>
	} while (u8g2_NextPage(&u8g2));
 8000c50:	4804      	ldr	r0, [pc, #16]	; (8000c64 <OrderActivity+0xd0>)
 8000c52:	f000 fbb5 	bl	80013c0 <u8g2_NextPage>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d1a1      	bne.n	8000ba0 <OrderActivity+0xc>
}
 8000c5c:	bf00      	nop
 8000c5e:	3718      	adds	r7, #24
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20000528 	.word	0x20000528
 8000c68:	08006ae4 	.word	0x08006ae4
 8000c6c:	08006af0 	.word	0x08006af0
 8000c70:	20000090 	.word	0x20000090
 8000c74:	08006b00 	.word	0x08006b00

08000c78 <ScreenUpdate>:

void ScreenUpdate(uint8_t button) {
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	71fb      	strb	r3, [r7, #7]
	if (activityOLD != activity) {
 8000c82:	4b14      	ldr	r3, [pc, #80]	; (8000cd4 <ScreenUpdate+0x5c>)
 8000c84:	781a      	ldrb	r2, [r3, #0]
 8000c86:	4b14      	ldr	r3, [pc, #80]	; (8000cd8 <ScreenUpdate+0x60>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	429a      	cmp	r2, r3
 8000c8c:	d00b      	beq.n	8000ca6 <ScreenUpdate+0x2e>
		activityOLD = activity;
 8000c8e:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <ScreenUpdate+0x60>)
 8000c90:	781a      	ldrb	r2, [r3, #0]
 8000c92:	4b10      	ldr	r3, [pc, #64]	; (8000cd4 <ScreenUpdate+0x5c>)
 8000c94:	701a      	strb	r2, [r3, #0]
		switch (activity) {
 8000c96:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <ScreenUpdate+0x60>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d005      	beq.n	8000caa <ScreenUpdate+0x32>
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d005      	beq.n	8000cae <ScreenUpdate+0x36>
			break;
		case 1:
			//TIM4_ReConfig(5, 1);
			break;
		default:
			__NOP();
 8000ca2:	bf00      	nop
 8000ca4:	e004      	b.n	8000cb0 <ScreenUpdate+0x38>
		}
	}
 8000ca6:	bf00      	nop
 8000ca8:	e002      	b.n	8000cb0 <ScreenUpdate+0x38>
			break;
 8000caa:	bf00      	nop
 8000cac:	e000      	b.n	8000cb0 <ScreenUpdate+0x38>
			break;
 8000cae:	bf00      	nop
	switch (activity) {
 8000cb0:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <ScreenUpdate+0x60>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d002      	beq.n	8000cbe <ScreenUpdate+0x46>
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d003      	beq.n	8000cc4 <ScreenUpdate+0x4c>
 8000cbc:	e005      	b.n	8000cca <ScreenUpdate+0x52>
	case 0:
		MainActivity();
 8000cbe:	f7ff febf 	bl	8000a40 <MainActivity>
		break;
 8000cc2:	e003      	b.n	8000ccc <ScreenUpdate+0x54>
	case 1:
		OrderActivity();
 8000cc4:	f7ff ff66 	bl	8000b94 <OrderActivity>
		break;
 8000cc8:	e000      	b.n	8000ccc <ScreenUpdate+0x54>
	default:
		__NOP();
 8000cca:	bf00      	nop
	}
}
 8000ccc:	bf00      	nop
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20000000 	.word	0x20000000
 8000cd8:	20000001 	.word	0x20000001

08000cdc <EventFlag>:
//		Error_Handler();
//	}
//	htim4.Instance->CNT = cnt;
//}

_Bool EventFlag(uint32_t *time_irq, uint8_t *flag_irq, IRQn_Type exti) {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	60b9      	str	r1, [r7, #8]
 8000ce6:	4613      	mov	r3, r2
 8000ce8:	71fb      	strb	r3, [r7, #7]
	if ((*flag_irq == 1)
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d11a      	bne.n	8000d28 <EventFlag+0x4c>
			&& (HAL_GetTick() - *time_irq) > 100) {
 8000cf2:	f002 fae7 	bl	80032c4 <HAL_GetTick>
 8000cf6:	4602      	mov	r2, r0
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	2b64      	cmp	r3, #100	; 0x64
 8000d00:	d912      	bls.n	8000d28 <EventFlag+0x4c>
		__HAL_GPIO_EXTI_CLEAR_IT(exti);
 8000d02:	4a0c      	ldr	r2, [pc, #48]	; (8000d34 <EventFlag+0x58>)
 8000d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d08:	6153      	str	r3, [r2, #20]
		NVIC_ClearPendingIRQ(exti);
 8000d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff fa1c 	bl	800014c <__NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(exti);
 8000d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f002 fc14 	bl	8003546 <HAL_NVIC_EnableIRQ>
//		if (*flag_irq == 1) {
//			(*flag_irq)++;
//			return (_Bool) 0;
//		} else {
			*flag_irq = 0;
 8000d1e:	68bb      	ldr	r3, [r7, #8]
 8000d20:	2200      	movs	r2, #0
 8000d22:	701a      	strb	r2, [r3, #0]
			return (_Bool) 1;
 8000d24:	2301      	movs	r3, #1
 8000d26:	e000      	b.n	8000d2a <EventFlag+0x4e>
//		}
	}
	return (_Bool) 0;
 8000d28:	2300      	movs	r3, #0
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3710      	adds	r7, #16
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40010400 	.word	0x40010400

08000d38 <RTC_TimeShow>:

static void RTC_TimeShow(uint8_t *showtime) {
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af02      	add	r7, sp, #8
 8000d3e:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef sdatestructureget;
	RTC_TimeTypeDef stimestructureget;

	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &stimestructureget, RTC_FORMAT_BIN);
 8000d40:	f107 0308 	add.w	r3, r7, #8
 8000d44:	2200      	movs	r2, #0
 8000d46:	4619      	mov	r1, r3
 8000d48:	480c      	ldr	r0, [pc, #48]	; (8000d7c <RTC_TimeShow+0x44>)
 8000d4a:	f003 fc7b 	bl	8004644 <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &sdatestructureget, RTC_FORMAT_BIN);
 8000d4e:	f107 030c 	add.w	r3, r7, #12
 8000d52:	2200      	movs	r2, #0
 8000d54:	4619      	mov	r1, r3
 8000d56:	4809      	ldr	r0, [pc, #36]	; (8000d7c <RTC_TimeShow+0x44>)
 8000d58:	f003 fe02 	bl	8004960 <HAL_RTC_GetDate>
	/* Display time Format : hh:mm:ss */
	sprintf((char*) showtime, "%02d:%02d:%02d", stimestructureget.Hours,
 8000d5c:	7a3b      	ldrb	r3, [r7, #8]
 8000d5e:	461a      	mov	r2, r3
			stimestructureget.Minutes, stimestructureget.Seconds);
 8000d60:	7a7b      	ldrb	r3, [r7, #9]
	sprintf((char*) showtime, "%02d:%02d:%02d", stimestructureget.Hours,
 8000d62:	4619      	mov	r1, r3
			stimestructureget.Minutes, stimestructureget.Seconds);
 8000d64:	7abb      	ldrb	r3, [r7, #10]
	sprintf((char*) showtime, "%02d:%02d:%02d", stimestructureget.Hours,
 8000d66:	9300      	str	r3, [sp, #0]
 8000d68:	460b      	mov	r3, r1
 8000d6a:	4905      	ldr	r1, [pc, #20]	; (8000d80 <RTC_TimeShow+0x48>)
 8000d6c:	6878      	ldr	r0, [r7, #4]
 8000d6e:	f005 fa9b 	bl	80062a8 <siprintf>
}
 8000d72:	bf00      	nop
 8000d74:	3710      	adds	r7, #16
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	200004bc 	.word	0x200004bc
 8000d80:	08006b04 	.word	0x08006b04

08000d84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bc80      	pop	{r7}
 8000d8e:	4770      	bx	lr

08000d90 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d96:	4b15      	ldr	r3, [pc, #84]	; (8000dec <HAL_MspInit+0x5c>)
 8000d98:	699b      	ldr	r3, [r3, #24]
 8000d9a:	4a14      	ldr	r2, [pc, #80]	; (8000dec <HAL_MspInit+0x5c>)
 8000d9c:	f043 0301 	orr.w	r3, r3, #1
 8000da0:	6193      	str	r3, [r2, #24]
 8000da2:	4b12      	ldr	r3, [pc, #72]	; (8000dec <HAL_MspInit+0x5c>)
 8000da4:	699b      	ldr	r3, [r3, #24]
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	60bb      	str	r3, [r7, #8]
 8000dac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dae:	4b0f      	ldr	r3, [pc, #60]	; (8000dec <HAL_MspInit+0x5c>)
 8000db0:	69db      	ldr	r3, [r3, #28]
 8000db2:	4a0e      	ldr	r2, [pc, #56]	; (8000dec <HAL_MspInit+0x5c>)
 8000db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000db8:	61d3      	str	r3, [r2, #28]
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <HAL_MspInit+0x5c>)
 8000dbc:	69db      	ldr	r3, [r3, #28]
 8000dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc2:	607b      	str	r3, [r7, #4]
 8000dc4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000dc6:	4b0a      	ldr	r3, [pc, #40]	; (8000df0 <HAL_MspInit+0x60>)
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	4a04      	ldr	r2, [pc, #16]	; (8000df0 <HAL_MspInit+0x60>)
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000de2:	bf00      	nop
 8000de4:	3714      	adds	r7, #20
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bc80      	pop	{r7}
 8000dea:	4770      	bx	lr
 8000dec:	40021000 	.word	0x40021000
 8000df0:	40010000 	.word	0x40010000

08000df4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a0f      	ldr	r2, [pc, #60]	; (8000e40 <HAL_RTC_MspInit+0x4c>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d118      	bne.n	8000e38 <HAL_RTC_MspInit+0x44>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000e06:	f002 fd69 	bl	80038dc <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000e0a:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <HAL_RTC_MspInit+0x50>)
 8000e0c:	69db      	ldr	r3, [r3, #28]
 8000e0e:	4a0d      	ldr	r2, [pc, #52]	; (8000e44 <HAL_RTC_MspInit+0x50>)
 8000e10:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000e14:	61d3      	str	r3, [r2, #28]
 8000e16:	4b0b      	ldr	r3, [pc, #44]	; (8000e44 <HAL_RTC_MspInit+0x50>)
 8000e18:	69db      	ldr	r3, [r3, #28]
 8000e1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000e22:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <HAL_RTC_MspInit+0x54>)
 8000e24:	2201      	movs	r2, #1
 8000e26:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	2029      	movs	r0, #41	; 0x29
 8000e2e:	f002 fb6e 	bl	800350e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000e32:	2029      	movs	r0, #41	; 0x29
 8000e34:	f002 fb87 	bl	8003546 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000e38:	bf00      	nop
 8000e3a:	3710      	adds	r7, #16
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40002800 	.word	0x40002800
 8000e44:	40021000 	.word	0x40021000
 8000e48:	4242043c 	.word	0x4242043c

08000e4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b088      	sub	sp, #32
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e54:	f107 0310 	add.w	r3, r7, #16
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a16      	ldr	r2, [pc, #88]	; (8000ec0 <HAL_SPI_MspInit+0x74>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d124      	bne.n	8000eb6 <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e6c:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <HAL_SPI_MspInit+0x78>)
 8000e6e:	69db      	ldr	r3, [r3, #28]
 8000e70:	4a14      	ldr	r2, [pc, #80]	; (8000ec4 <HAL_SPI_MspInit+0x78>)
 8000e72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e76:	61d3      	str	r3, [r2, #28]
 8000e78:	4b12      	ldr	r3, [pc, #72]	; (8000ec4 <HAL_SPI_MspInit+0x78>)
 8000e7a:	69db      	ldr	r3, [r3, #28]
 8000e7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e80:	60fb      	str	r3, [r7, #12]
 8000e82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e84:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <HAL_SPI_MspInit+0x78>)
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	4a0e      	ldr	r2, [pc, #56]	; (8000ec4 <HAL_SPI_MspInit+0x78>)
 8000e8a:	f043 0308 	orr.w	r3, r3, #8
 8000e8e:	6193      	str	r3, [r2, #24]
 8000e90:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <HAL_SPI_MspInit+0x78>)
 8000e92:	699b      	ldr	r3, [r3, #24]
 8000e94:	f003 0308 	and.w	r3, r3, #8
 8000e98:	60bb      	str	r3, [r7, #8]
 8000e9a:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000e9c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000ea0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eaa:	f107 0310 	add.w	r3, r7, #16
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4805      	ldr	r0, [pc, #20]	; (8000ec8 <HAL_SPI_MspInit+0x7c>)
 8000eb2:	f002 fb71 	bl	8003598 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000eb6:	bf00      	nop
 8000eb8:	3720      	adds	r7, #32
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40003800 	.word	0x40003800
 8000ec4:	40021000 	.word	0x40021000
 8000ec8:	40010c00 	.word	0x40010c00

08000ecc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a0d      	ldr	r2, [pc, #52]	; (8000f10 <HAL_TIM_Base_MspInit+0x44>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d113      	bne.n	8000f06 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ede:	4b0d      	ldr	r3, [pc, #52]	; (8000f14 <HAL_TIM_Base_MspInit+0x48>)
 8000ee0:	69db      	ldr	r3, [r3, #28]
 8000ee2:	4a0c      	ldr	r2, [pc, #48]	; (8000f14 <HAL_TIM_Base_MspInit+0x48>)
 8000ee4:	f043 0302 	orr.w	r3, r3, #2
 8000ee8:	61d3      	str	r3, [r2, #28]
 8000eea:	4b0a      	ldr	r3, [pc, #40]	; (8000f14 <HAL_TIM_Base_MspInit+0x48>)
 8000eec:	69db      	ldr	r3, [r3, #28]
 8000eee:	f003 0302 	and.w	r3, r3, #2
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2100      	movs	r1, #0
 8000efa:	201d      	movs	r0, #29
 8000efc:	f002 fb07 	bl	800350e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f00:	201d      	movs	r0, #29
 8000f02:	f002 fb20 	bl	8003546 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000f06:	bf00      	nop
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40000400 	.word	0x40000400
 8000f14:	40021000 	.word	0x40021000

08000f18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b088      	sub	sp, #32
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f20:	f107 0310 	add.w	r3, r7, #16
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a0f      	ldr	r2, [pc, #60]	; (8000f70 <HAL_TIM_MspPostInit+0x58>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d117      	bne.n	8000f68 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f38:	4b0e      	ldr	r3, [pc, #56]	; (8000f74 <HAL_TIM_MspPostInit+0x5c>)
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	4a0d      	ldr	r2, [pc, #52]	; (8000f74 <HAL_TIM_MspPostInit+0x5c>)
 8000f3e:	f043 0308 	orr.w	r3, r3, #8
 8000f42:	6193      	str	r3, [r2, #24]
 8000f44:	4b0b      	ldr	r3, [pc, #44]	; (8000f74 <HAL_TIM_MspPostInit+0x5c>)
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	f003 0308 	and.w	r3, r3, #8
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f50:	2301      	movs	r3, #1
 8000f52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f54:	2302      	movs	r3, #2
 8000f56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5c:	f107 0310 	add.w	r3, r7, #16
 8000f60:	4619      	mov	r1, r3
 8000f62:	4805      	ldr	r0, [pc, #20]	; (8000f78 <HAL_TIM_MspPostInit+0x60>)
 8000f64:	f002 fb18 	bl	8003598 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000f68:	bf00      	nop
 8000f6a:	3720      	adds	r7, #32
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40000400 	.word	0x40000400
 8000f74:	40021000 	.word	0x40021000
 8000f78:	40010c00 	.word	0x40010c00

08000f7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr

08000f88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f8c:	e7fe      	b.n	8000f8c <HardFault_Handler+0x4>

08000f8e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f92:	e7fe      	b.n	8000f92 <MemManage_Handler+0x4>

08000f94 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f98:	e7fe      	b.n	8000f98 <BusFault_Handler+0x4>

08000f9a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f9e:	e7fe      	b.n	8000f9e <UsageFault_Handler+0x4>

08000fa0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bc80      	pop	{r7}
 8000faa:	4770      	bx	lr

08000fac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fb0:	bf00      	nop
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bc80      	pop	{r7}
 8000fb6:	4770      	bx	lr

08000fb8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bc80      	pop	{r7}
 8000fc2:	4770      	bx	lr

08000fc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fc8:	f002 f96a 	bl	80032a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fcc:	bf00      	nop
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	f002 fc69 	bl	80038ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000fe2:	2002      	movs	r0, #2
 8000fe4:	f002 fc62 	bl	80038ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}

08000fec <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000ff0:	2004      	movs	r0, #4
 8000ff2:	f002 fc5b 	bl	80038ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000ffe:	2008      	movs	r0, #8
 8001000:	f002 fc54 	bl	80038ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}

08001008 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800100c:	2010      	movs	r0, #16
 800100e:	f002 fc4d 	bl	80038ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
	...

08001018 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	if (HAL_GetTick() - time_irq > 50)
 800101c:	f002 f952 	bl	80032c4 <HAL_GetTick>
 8001020:	4602      	mov	r2, r0
 8001022:	4b10      	ldr	r3, [pc, #64]	; (8001064 <EXTI9_5_IRQHandler+0x4c>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	2b32      	cmp	r3, #50	; 0x32
 800102a:	d915      	bls.n	8001058 <EXTI9_5_IRQHandler+0x40>
		if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)) {
 800102c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001030:	480d      	ldr	r0, [pc, #52]	; (8001068 <EXTI9_5_IRQHandler+0x50>)
 8001032:	f002 fc0b 	bl	800384c <HAL_GPIO_ReadPin>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d10d      	bne.n	8001058 <EXTI9_5_IRQHandler+0x40>
			pointer++;
 800103c:	4b0b      	ldr	r3, [pc, #44]	; (800106c <EXTI9_5_IRQHandler+0x54>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	3301      	adds	r3, #1
 8001042:	b2da      	uxtb	r2, r3
 8001044:	4b09      	ldr	r3, [pc, #36]	; (800106c <EXTI9_5_IRQHandler+0x54>)
 8001046:	701a      	strb	r2, [r3, #0]
			update = 5;
 8001048:	4b09      	ldr	r3, [pc, #36]	; (8001070 <EXTI9_5_IRQHandler+0x58>)
 800104a:	2205      	movs	r2, #5
 800104c:	701a      	strb	r2, [r3, #0]
			time_irq = HAL_GetTick();
 800104e:	f002 f939 	bl	80032c4 <HAL_GetTick>
 8001052:	4602      	mov	r2, r0
 8001054:	4b03      	ldr	r3, [pc, #12]	; (8001064 <EXTI9_5_IRQHandler+0x4c>)
 8001056:	601a      	str	r2, [r3, #0]
		}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001058:	2040      	movs	r0, #64	; 0x40
 800105a:	f002 fc27 	bl	80038ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	2000009c 	.word	0x2000009c
 8001068:	40010800 	.word	0x40010800
 800106c:	20000090 	.word	0x20000090
 8001070:	20000002 	.word	0x20000002

08001074 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001078:	4802      	ldr	r0, [pc, #8]	; (8001084 <TIM3_IRQHandler+0x10>)
 800107a:	f004 fb50 	bl	800571e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	200005b0 	.word	0x200005b0

08001088 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if (HAL_GetTick() - time_irq > 50)
 800108c:	f002 f91a 	bl	80032c4 <HAL_GetTick>
 8001090:	4602      	mov	r2, r0
 8001092:	4b0d      	ldr	r3, [pc, #52]	; (80010c8 <EXTI15_10_IRQHandler+0x40>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	2b32      	cmp	r3, #50	; 0x32
 800109a:	d90f      	bls.n	80010bc <EXTI15_10_IRQHandler+0x34>
		if (!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)) {
 800109c:	2140      	movs	r1, #64	; 0x40
 800109e:	480b      	ldr	r0, [pc, #44]	; (80010cc <EXTI15_10_IRQHandler+0x44>)
 80010a0:	f002 fbd4 	bl	800384c <HAL_GPIO_ReadPin>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d108      	bne.n	80010bc <EXTI15_10_IRQHandler+0x34>
			pointer--;
 80010aa:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <EXTI15_10_IRQHandler+0x48>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	3b01      	subs	r3, #1
 80010b0:	b2da      	uxtb	r2, r3
 80010b2:	4b07      	ldr	r3, [pc, #28]	; (80010d0 <EXTI15_10_IRQHandler+0x48>)
 80010b4:	701a      	strb	r2, [r3, #0]
			update = 6;
 80010b6:	4b07      	ldr	r3, [pc, #28]	; (80010d4 <EXTI15_10_IRQHandler+0x4c>)
 80010b8:	2206      	movs	r2, #6
 80010ba:	701a      	strb	r2, [r3, #0]
		}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80010bc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80010c0:	f002 fbf4 	bl	80038ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80010c4:	bf00      	nop
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	2000009c 	.word	0x2000009c
 80010cc:	40010c00 	.word	0x40010c00
 80010d0:	20000090 	.word	0x20000090
 80010d4:	20000002 	.word	0x20000002

080010d8 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80010dc:	4802      	ldr	r0, [pc, #8]	; (80010e8 <RTC_Alarm_IRQHandler+0x10>)
 80010de:	f003 fd47 	bl	8004b70 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	200004bc 	.word	0x200004bc

080010ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010f4:	4a14      	ldr	r2, [pc, #80]	; (8001148 <_sbrk+0x5c>)
 80010f6:	4b15      	ldr	r3, [pc, #84]	; (800114c <_sbrk+0x60>)
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001100:	4b13      	ldr	r3, [pc, #76]	; (8001150 <_sbrk+0x64>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d102      	bne.n	800110e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001108:	4b11      	ldr	r3, [pc, #68]	; (8001150 <_sbrk+0x64>)
 800110a:	4a12      	ldr	r2, [pc, #72]	; (8001154 <_sbrk+0x68>)
 800110c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800110e:	4b10      	ldr	r3, [pc, #64]	; (8001150 <_sbrk+0x64>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4413      	add	r3, r2
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	429a      	cmp	r2, r3
 800111a:	d207      	bcs.n	800112c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800111c:	f005 f892 	bl	8006244 <__errno>
 8001120:	4602      	mov	r2, r0
 8001122:	230c      	movs	r3, #12
 8001124:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001126:	f04f 33ff 	mov.w	r3, #4294967295
 800112a:	e009      	b.n	8001140 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800112c:	4b08      	ldr	r3, [pc, #32]	; (8001150 <_sbrk+0x64>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001132:	4b07      	ldr	r3, [pc, #28]	; (8001150 <_sbrk+0x64>)
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4413      	add	r3, r2
 800113a:	4a05      	ldr	r2, [pc, #20]	; (8001150 <_sbrk+0x64>)
 800113c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800113e:	68fb      	ldr	r3, [r7, #12]
}
 8001140:	4618      	mov	r0, r3
 8001142:	3718      	adds	r7, #24
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20005000 	.word	0x20005000
 800114c:	00000400 	.word	0x00000400
 8001150:	200000a0 	.word	0x200000a0
 8001154:	20000600 	.word	0x20000600

08001158 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	bc80      	pop	{r7}
 8001162:	4770      	bx	lr

08001164 <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af02      	add	r7, sp, #8
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	4608      	mov	r0, r1
 800116e:	4611      	mov	r1, r2
 8001170:	461a      	mov	r2, r3
 8001172:	4603      	mov	r3, r0
 8001174:	70fb      	strb	r3, [r7, #3]
 8001176:	460b      	mov	r3, r1
 8001178:	70bb      	strb	r3, [r7, #2]
 800117a:	4613      	mov	r3, r2
 800117c:	707b      	strb	r3, [r7, #1]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 800117e:	78fa      	ldrb	r2, [r7, #3]
 8001180:	787b      	ldrb	r3, [r7, #1]
 8001182:	4413      	add	r3, r2
 8001184:	b2d8      	uxtb	r0, r3
 8001186:	78ba      	ldrb	r2, [r7, #2]
 8001188:	7c3b      	ldrb	r3, [r7, #16]
 800118a:	4413      	add	r3, r2
 800118c:	b2db      	uxtb	r3, r3
 800118e:	78ba      	ldrb	r2, [r7, #2]
 8001190:	78f9      	ldrb	r1, [r7, #3]
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	4603      	mov	r3, r0
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f001 fa21 	bl	80025de <u8g2_IsIntersection>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d013      	beq.n	80011ca <u8g2_DrawBox+0x66>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 80011a2:	e00e      	b.n	80011c2 <u8g2_DrawBox+0x5e>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 80011a4:	7878      	ldrb	r0, [r7, #1]
 80011a6:	78ba      	ldrb	r2, [r7, #2]
 80011a8:	78f9      	ldrb	r1, [r7, #3]
 80011aa:	2300      	movs	r3, #0
 80011ac:	9300      	str	r3, [sp, #0]
 80011ae:	4603      	mov	r3, r0
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f001 f914 	bl	80023de <u8g2_DrawHVLine>
    y++;    
 80011b6:	78bb      	ldrb	r3, [r7, #2]
 80011b8:	3301      	adds	r3, #1
 80011ba:	70bb      	strb	r3, [r7, #2]
    h--;
 80011bc:	7c3b      	ldrb	r3, [r7, #16]
 80011be:	3b01      	subs	r3, #1
 80011c0:	743b      	strb	r3, [r7, #16]
  while( h != 0 )
 80011c2:	7c3b      	ldrb	r3, [r7, #16]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d1ed      	bne.n	80011a4 <u8g2_DrawBox+0x40>
 80011c8:	e000      	b.n	80011cc <u8g2_DrawBox+0x68>
    return;
 80011ca:	bf00      	nop
  }
}
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <u8g2_DrawFrame>:
  restriction: does not work for w = 0 or h = 0
  ToDo:
    pixel in the corners are drawn twice. This could be optimized.
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b086      	sub	sp, #24
 80011d6:	af02      	add	r7, sp, #8
 80011d8:	6078      	str	r0, [r7, #4]
 80011da:	4608      	mov	r0, r1
 80011dc:	4611      	mov	r1, r2
 80011de:	461a      	mov	r2, r3
 80011e0:	4603      	mov	r3, r0
 80011e2:	70fb      	strb	r3, [r7, #3]
 80011e4:	460b      	mov	r3, r1
 80011e6:	70bb      	strb	r3, [r7, #2]
 80011e8:	4613      	mov	r3, r2
 80011ea:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t xtmp = x;
 80011ec:	78fb      	ldrb	r3, [r7, #3]
 80011ee:	73fb      	strb	r3, [r7, #15]
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 80011f0:	78fa      	ldrb	r2, [r7, #3]
 80011f2:	787b      	ldrb	r3, [r7, #1]
 80011f4:	4413      	add	r3, r2
 80011f6:	b2d8      	uxtb	r0, r3
 80011f8:	78ba      	ldrb	r2, [r7, #2]
 80011fa:	7e3b      	ldrb	r3, [r7, #24]
 80011fc:	4413      	add	r3, r2
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	78ba      	ldrb	r2, [r7, #2]
 8001202:	78f9      	ldrb	r1, [r7, #3]
 8001204:	9300      	str	r3, [sp, #0]
 8001206:	4603      	mov	r3, r0
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f001 f9e8 	bl	80025de <u8g2_IsIntersection>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d032      	beq.n	800127a <u8g2_DrawFrame+0xa8>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8001214:	7878      	ldrb	r0, [r7, #1]
 8001216:	78ba      	ldrb	r2, [r7, #2]
 8001218:	78f9      	ldrb	r1, [r7, #3]
 800121a:	2300      	movs	r3, #0
 800121c:	9300      	str	r3, [sp, #0]
 800121e:	4603      	mov	r3, r0
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f001 f8dc 	bl	80023de <u8g2_DrawHVLine>
  u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8001226:	7e38      	ldrb	r0, [r7, #24]
 8001228:	78ba      	ldrb	r2, [r7, #2]
 800122a:	78f9      	ldrb	r1, [r7, #3]
 800122c:	2301      	movs	r3, #1
 800122e:	9300      	str	r3, [sp, #0]
 8001230:	4603      	mov	r3, r0
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f001 f8d3 	bl	80023de <u8g2_DrawHVLine>
  x+=w;
 8001238:	78fa      	ldrb	r2, [r7, #3]
 800123a:	787b      	ldrb	r3, [r7, #1]
 800123c:	4413      	add	r3, r2
 800123e:	70fb      	strb	r3, [r7, #3]
  x--;
 8001240:	78fb      	ldrb	r3, [r7, #3]
 8001242:	3b01      	subs	r3, #1
 8001244:	70fb      	strb	r3, [r7, #3]
  u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8001246:	7e38      	ldrb	r0, [r7, #24]
 8001248:	78ba      	ldrb	r2, [r7, #2]
 800124a:	78f9      	ldrb	r1, [r7, #3]
 800124c:	2301      	movs	r3, #1
 800124e:	9300      	str	r3, [sp, #0]
 8001250:	4603      	mov	r3, r0
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f001 f8c3 	bl	80023de <u8g2_DrawHVLine>
  y+=h;
 8001258:	78ba      	ldrb	r2, [r7, #2]
 800125a:	7e3b      	ldrb	r3, [r7, #24]
 800125c:	4413      	add	r3, r2
 800125e:	70bb      	strb	r3, [r7, #2]
  y--;
 8001260:	78bb      	ldrb	r3, [r7, #2]
 8001262:	3b01      	subs	r3, #1
 8001264:	70bb      	strb	r3, [r7, #2]
  u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 8001266:	7878      	ldrb	r0, [r7, #1]
 8001268:	78ba      	ldrb	r2, [r7, #2]
 800126a:	7bf9      	ldrb	r1, [r7, #15]
 800126c:	2300      	movs	r3, #0
 800126e:	9300      	str	r3, [sp, #0]
 8001270:	4603      	mov	r3, r0
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f001 f8b3 	bl	80023de <u8g2_DrawHVLine>
 8001278:	e000      	b.n	800127c <u8g2_DrawFrame+0xaa>
    return;
 800127a:	bf00      	nop
}
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b084      	sub	sp, #16
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	7c1b      	ldrb	r3, [r3, #16]
 8001290:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001298:	461a      	mov	r2, r3
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	fb02 f303 	mul.w	r3, r2, r3
 80012a0:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	00db      	lsls	r3, r3, #3
 80012a6:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012ac:	68fa      	ldr	r2, [r7, #12]
 80012ae:	2100      	movs	r1, #0
 80012b0:	4618      	mov	r0, r3
 80012b2:	f004 fff1 	bl	8006298 <memset>
}
 80012b6:	bf00      	nop
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b086      	sub	sp, #24
 80012c2:	af02      	add	r7, sp, #8
 80012c4:	6078      	str	r0, [r7, #4]
 80012c6:	460b      	mov	r3, r1
 80012c8:	70fb      	strb	r3, [r7, #3]
 80012ca:	4613      	mov	r3, r2
 80012cc:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	7c1b      	ldrb	r3, [r3, #16]
 80012d4:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 80012d6:	78fb      	ldrb	r3, [r7, #3]
 80012d8:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012de:	60bb      	str	r3, [r7, #8]
  offset *= w;
 80012e0:	7bfb      	ldrb	r3, [r7, #15]
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	89ba      	ldrh	r2, [r7, #12]
 80012e6:	fb02 f303 	mul.w	r3, r2, r3
 80012ea:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 80012ec:	89bb      	ldrh	r3, [r7, #12]
 80012ee:	00db      	lsls	r3, r3, #3
 80012f0:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 80012f2:	89bb      	ldrh	r3, [r7, #12]
 80012f4:	68ba      	ldr	r2, [r7, #8]
 80012f6:	4413      	add	r3, r2
 80012f8:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 80012fa:	7bf9      	ldrb	r1, [r7, #15]
 80012fc:	78ba      	ldrb	r2, [r7, #2]
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	9300      	str	r3, [sp, #0]
 8001302:	460b      	mov	r3, r1
 8001304:	2100      	movs	r1, #0
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f001 fe8c 	bl	8003024 <u8x8_DrawTile>
}
 800130c:	bf00      	nop
 800130e:	3710      	adds	r7, #16
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}

08001314 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 800131c:	2300      	movs	r3, #0
 800131e:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001326:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800132e:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	7c5b      	ldrb	r3, [r3, #17]
 8001336:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8001338:	7bba      	ldrb	r2, [r7, #14]
 800133a:	7bfb      	ldrb	r3, [r7, #15]
 800133c:	4619      	mov	r1, r3
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff ffbd 	bl	80012be <u8g2_send_tile_row>
    src_row++;
 8001344:	7bfb      	ldrb	r3, [r7, #15]
 8001346:	3301      	adds	r3, #1
 8001348:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 800134a:	7bbb      	ldrb	r3, [r7, #14]
 800134c:	3301      	adds	r3, #1
 800134e:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8001350:	7bfa      	ldrb	r2, [r7, #15]
 8001352:	7b7b      	ldrb	r3, [r7, #13]
 8001354:	429a      	cmp	r2, r3
 8001356:	d203      	bcs.n	8001360 <u8g2_send_buffer+0x4c>
 8001358:	7bba      	ldrb	r2, [r7, #14]
 800135a:	7b3b      	ldrb	r3, [r7, #12]
 800135c:	429a      	cmp	r2, r3
 800135e:	d3eb      	bcc.n	8001338 <u8g2_send_buffer+0x24>
}
 8001360:	bf00      	nop
 8001362:	3710      	adds	r7, #16
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <u8g2_SetBufferCurrTileRow>:
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
}

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	460b      	mov	r3, r1
 8001372:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	78fa      	ldrb	r2, [r7, #3]
 8001378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  u8g2->cb->update_dimension(u8g2);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	4798      	blx	r3
}
 8001390:	bf00      	nop
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d002      	beq.n	80013b0 <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f7ff ff69 	bl	8001282 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 80013b0:	2100      	movs	r1, #0
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7ff ffd8 	bl	8001368 <u8g2_SetBufferCurrTileRow>
}
 80013b8:	bf00      	nop
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f7ff ffa3 	bl	8001314 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013d4:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 80013dc:	7bfb      	ldrb	r3, [r7, #15]
 80013de:	4413      	add	r3, r2
 80013e0:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	7c5b      	ldrb	r3, [r3, #17]
 80013e8:	7bfa      	ldrb	r2, [r7, #15]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d304      	bcc.n	80013f8 <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f001 fe69 	bl	80030c6 <u8x8_RefreshDisplay>
    return 0;
 80013f4:	2300      	movs	r3, #0
 80013f6:	e00d      	b.n	8001414 <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d002      	beq.n	8001408 <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f7ff ff3d 	bl	8001282 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8001408:	7bfb      	ldrb	r3, [r7, #15]
 800140a:	4619      	mov	r1, r3
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff ffab 	bl	8001368 <u8g2_SetBufferCurrTileRow>
  return 1;
 8001412:	2301      	movs	r3, #1
}
 8001414:	4618      	mov	r0, r3
 8001416:	3710      	adds	r7, #16
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <u8g2_draw_filled_ellipse_section>:
/*==============================================*/
/* Filled Ellipse */

static void u8g2_draw_filled_ellipse_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option) U8G2_NOINLINE;
static void u8g2_draw_filled_ellipse_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	4608      	mov	r0, r1
 8001426:	4611      	mov	r1, r2
 8001428:	461a      	mov	r2, r3
 800142a:	4603      	mov	r3, r0
 800142c:	70fb      	strb	r3, [r7, #3]
 800142e:	460b      	mov	r3, r1
 8001430:	70bb      	strb	r3, [r7, #2]
 8001432:	4613      	mov	r3, r2
 8001434:	707b      	strb	r3, [r7, #1]
    /* upper right */
    if ( option & U8G2_DRAW_UPPER_RIGHT )
 8001436:	7d3b      	ldrb	r3, [r7, #20]
 8001438:	f003 0301 	and.w	r3, r3, #1
 800143c:	2b00      	cmp	r3, #0
 800143e:	d00d      	beq.n	800145c <u8g2_draw_filled_ellipse_section+0x40>
    {
      u8g2_DrawVLine(u8g2, x0+x, y0-y, y+1);
 8001440:	787a      	ldrb	r2, [r7, #1]
 8001442:	78fb      	ldrb	r3, [r7, #3]
 8001444:	4413      	add	r3, r2
 8001446:	b2d9      	uxtb	r1, r3
 8001448:	7c3a      	ldrb	r2, [r7, #16]
 800144a:	78bb      	ldrb	r3, [r7, #2]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	b2da      	uxtb	r2, r3
 8001450:	78bb      	ldrb	r3, [r7, #2]
 8001452:	3301      	adds	r3, #1
 8001454:	b2db      	uxtb	r3, r3
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f001 f85e 	bl	8002518 <u8g2_DrawVLine>
    }
    
    /* upper left */
    if ( option & U8G2_DRAW_UPPER_LEFT )
 800145c:	7d3b      	ldrb	r3, [r7, #20]
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d00d      	beq.n	8001482 <u8g2_draw_filled_ellipse_section+0x66>
    {
      u8g2_DrawVLine(u8g2, x0-x, y0-y, y+1);
 8001466:	787a      	ldrb	r2, [r7, #1]
 8001468:	78fb      	ldrb	r3, [r7, #3]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	b2d9      	uxtb	r1, r3
 800146e:	7c3a      	ldrb	r2, [r7, #16]
 8001470:	78bb      	ldrb	r3, [r7, #2]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	b2da      	uxtb	r2, r3
 8001476:	78bb      	ldrb	r3, [r7, #2]
 8001478:	3301      	adds	r3, #1
 800147a:	b2db      	uxtb	r3, r3
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f001 f84b 	bl	8002518 <u8g2_DrawVLine>
    }
    
    /* lower right */
    if ( option & U8G2_DRAW_LOWER_RIGHT )
 8001482:	7d3b      	ldrb	r3, [r7, #20]
 8001484:	f003 0308 	and.w	r3, r3, #8
 8001488:	2b00      	cmp	r3, #0
 800148a:	d00a      	beq.n	80014a2 <u8g2_draw_filled_ellipse_section+0x86>
    {
      u8g2_DrawVLine(u8g2, x0+x, y0, y+1);
 800148c:	787a      	ldrb	r2, [r7, #1]
 800148e:	78fb      	ldrb	r3, [r7, #3]
 8001490:	4413      	add	r3, r2
 8001492:	b2d9      	uxtb	r1, r3
 8001494:	78bb      	ldrb	r3, [r7, #2]
 8001496:	3301      	adds	r3, #1
 8001498:	b2db      	uxtb	r3, r3
 800149a:	7c3a      	ldrb	r2, [r7, #16]
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f001 f83b 	bl	8002518 <u8g2_DrawVLine>
    }
    
    /* lower left */
    if ( option & U8G2_DRAW_LOWER_LEFT )
 80014a2:	7d3b      	ldrb	r3, [r7, #20]
 80014a4:	f003 0304 	and.w	r3, r3, #4
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d00a      	beq.n	80014c2 <u8g2_draw_filled_ellipse_section+0xa6>
    {
      u8g2_DrawVLine(u8g2, x0-x, y0, y+1);
 80014ac:	787a      	ldrb	r2, [r7, #1]
 80014ae:	78fb      	ldrb	r3, [r7, #3]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	b2d9      	uxtb	r1, r3
 80014b4:	78bb      	ldrb	r3, [r7, #2]
 80014b6:	3301      	adds	r3, #1
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	7c3a      	ldrb	r2, [r7, #16]
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f001 f82b 	bl	8002518 <u8g2_DrawVLine>
    }
}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <u8g2_draw_filled_ellipse>:

static void u8g2_draw_filled_ellipse(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rx, u8g2_uint_t ry, uint8_t option)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b088      	sub	sp, #32
 80014ce:	af02      	add	r7, sp, #8
 80014d0:	6078      	str	r0, [r7, #4]
 80014d2:	4608      	mov	r0, r1
 80014d4:	4611      	mov	r1, r2
 80014d6:	461a      	mov	r2, r3
 80014d8:	4603      	mov	r3, r0
 80014da:	70fb      	strb	r3, [r7, #3]
 80014dc:	460b      	mov	r3, r1
 80014de:	70bb      	strb	r3, [r7, #2]
 80014e0:	4613      	mov	r3, r2
 80014e2:	707b      	strb	r3, [r7, #1]
  u8g2_long_t err;
  u8g2_long_t rxrx2;
  u8g2_long_t ryry2;
  u8g2_long_t stopx, stopy;
  
  rxrx2 = rx;
 80014e4:	787b      	ldrb	r3, [r7, #1]
 80014e6:	817b      	strh	r3, [r7, #10]
  rxrx2 *= rx;
 80014e8:	787b      	ldrb	r3, [r7, #1]
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	897a      	ldrh	r2, [r7, #10]
 80014ee:	fb02 f303 	mul.w	r3, r2, r3
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	817b      	strh	r3, [r7, #10]
  rxrx2 *= 2;
 80014f6:	897b      	ldrh	r3, [r7, #10]
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	817b      	strh	r3, [r7, #10]
  
  ryry2 = ry;
 80014fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001502:	813b      	strh	r3, [r7, #8]
  ryry2 *= ry;
 8001504:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001508:	b29b      	uxth	r3, r3
 800150a:	893a      	ldrh	r2, [r7, #8]
 800150c:	fb02 f303 	mul.w	r3, r2, r3
 8001510:	b29b      	uxth	r3, r3
 8001512:	813b      	strh	r3, [r7, #8]
  ryry2 *= 2;
 8001514:	893b      	ldrh	r3, [r7, #8]
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	b29b      	uxth	r3, r3
 800151a:	813b      	strh	r3, [r7, #8]
  
  x = rx;
 800151c:	787b      	ldrb	r3, [r7, #1]
 800151e:	75fb      	strb	r3, [r7, #23]
  y = 0;
 8001520:	2300      	movs	r3, #0
 8001522:	75bb      	strb	r3, [r7, #22]
  
  xchg = 1;
 8001524:	2301      	movs	r3, #1
 8001526:	82bb      	strh	r3, [r7, #20]
  xchg -= rx;
 8001528:	8aba      	ldrh	r2, [r7, #20]
 800152a:	787b      	ldrb	r3, [r7, #1]
 800152c:	b29b      	uxth	r3, r3
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	b29b      	uxth	r3, r3
 8001532:	82bb      	strh	r3, [r7, #20]
  xchg -= rx;
 8001534:	8aba      	ldrh	r2, [r7, #20]
 8001536:	787b      	ldrb	r3, [r7, #1]
 8001538:	b29b      	uxth	r3, r3
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	b29b      	uxth	r3, r3
 800153e:	82bb      	strh	r3, [r7, #20]
  xchg *= ry;
 8001540:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001544:	b29b      	uxth	r3, r3
 8001546:	8aba      	ldrh	r2, [r7, #20]
 8001548:	fb02 f303 	mul.w	r3, r2, r3
 800154c:	b29b      	uxth	r3, r3
 800154e:	82bb      	strh	r3, [r7, #20]
  xchg *= ry;
 8001550:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001554:	b29b      	uxth	r3, r3
 8001556:	8aba      	ldrh	r2, [r7, #20]
 8001558:	fb02 f303 	mul.w	r3, r2, r3
 800155c:	b29b      	uxth	r3, r3
 800155e:	82bb      	strh	r3, [r7, #20]
  
  ychg = rx;
 8001560:	787b      	ldrb	r3, [r7, #1]
 8001562:	827b      	strh	r3, [r7, #18]
  ychg *= rx;
 8001564:	787b      	ldrb	r3, [r7, #1]
 8001566:	b29b      	uxth	r3, r3
 8001568:	8a7a      	ldrh	r2, [r7, #18]
 800156a:	fb02 f303 	mul.w	r3, r2, r3
 800156e:	b29b      	uxth	r3, r3
 8001570:	827b      	strh	r3, [r7, #18]
  
  err = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	823b      	strh	r3, [r7, #16]
  
  stopx = ryry2;
 8001576:	893b      	ldrh	r3, [r7, #8]
 8001578:	81fb      	strh	r3, [r7, #14]
  stopx *= rx;
 800157a:	787b      	ldrb	r3, [r7, #1]
 800157c:	b29b      	uxth	r3, r3
 800157e:	89fa      	ldrh	r2, [r7, #14]
 8001580:	fb02 f303 	mul.w	r3, r2, r3
 8001584:	b29b      	uxth	r3, r3
 8001586:	81fb      	strh	r3, [r7, #14]
  stopy = 0;
 8001588:	2300      	movs	r3, #0
 800158a:	81bb      	strh	r3, [r7, #12]
  
  while( stopx >= stopy )
 800158c:	e037      	b.n	80015fe <u8g2_draw_filled_ellipse+0x134>
  {
    u8g2_draw_filled_ellipse_section(u8g2, x, y, x0, y0, option);
 800158e:	78f8      	ldrb	r0, [r7, #3]
 8001590:	7dba      	ldrb	r2, [r7, #22]
 8001592:	7df9      	ldrb	r1, [r7, #23]
 8001594:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001598:	9301      	str	r3, [sp, #4]
 800159a:	78bb      	ldrb	r3, [r7, #2]
 800159c:	9300      	str	r3, [sp, #0]
 800159e:	4603      	mov	r3, r0
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f7ff ff3b 	bl	800141c <u8g2_draw_filled_ellipse_section>
    y++;
 80015a6:	7dbb      	ldrb	r3, [r7, #22]
 80015a8:	3301      	adds	r3, #1
 80015aa:	75bb      	strb	r3, [r7, #22]
    stopy += rxrx2;
 80015ac:	89ba      	ldrh	r2, [r7, #12]
 80015ae:	897b      	ldrh	r3, [r7, #10]
 80015b0:	4413      	add	r3, r2
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	81bb      	strh	r3, [r7, #12]
    err += ychg;
 80015b6:	8a3a      	ldrh	r2, [r7, #16]
 80015b8:	8a7b      	ldrh	r3, [r7, #18]
 80015ba:	4413      	add	r3, r2
 80015bc:	b29b      	uxth	r3, r3
 80015be:	823b      	strh	r3, [r7, #16]
    ychg += rxrx2;
 80015c0:	8a7a      	ldrh	r2, [r7, #18]
 80015c2:	897b      	ldrh	r3, [r7, #10]
 80015c4:	4413      	add	r3, r2
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	827b      	strh	r3, [r7, #18]
    if ( 2*err+xchg > 0 )
 80015ca:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80015ce:	005a      	lsls	r2, r3, #1
 80015d0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80015d4:	4413      	add	r3, r2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	dd11      	ble.n	80015fe <u8g2_draw_filled_ellipse+0x134>
    {
      x--;
 80015da:	7dfb      	ldrb	r3, [r7, #23]
 80015dc:	3b01      	subs	r3, #1
 80015de:	75fb      	strb	r3, [r7, #23]
      stopx -= ryry2;
 80015e0:	89fa      	ldrh	r2, [r7, #14]
 80015e2:	893b      	ldrh	r3, [r7, #8]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	81fb      	strh	r3, [r7, #14]
      err += xchg;
 80015ea:	8a3a      	ldrh	r2, [r7, #16]
 80015ec:	8abb      	ldrh	r3, [r7, #20]
 80015ee:	4413      	add	r3, r2
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	823b      	strh	r3, [r7, #16]
      xchg += ryry2;      
 80015f4:	8aba      	ldrh	r2, [r7, #20]
 80015f6:	893b      	ldrh	r3, [r7, #8]
 80015f8:	4413      	add	r3, r2
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	82bb      	strh	r3, [r7, #20]
  while( stopx >= stopy )
 80015fe:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001602:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001606:	429a      	cmp	r2, r3
 8001608:	dac1      	bge.n	800158e <u8g2_draw_filled_ellipse+0xc4>
    }
  }

  x = 0;
 800160a:	2300      	movs	r3, #0
 800160c:	75fb      	strb	r3, [r7, #23]
  y = ry;
 800160e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001612:	75bb      	strb	r3, [r7, #22]
  
  xchg = ry;
 8001614:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001618:	82bb      	strh	r3, [r7, #20]
  xchg *= ry;
 800161a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800161e:	b29b      	uxth	r3, r3
 8001620:	8aba      	ldrh	r2, [r7, #20]
 8001622:	fb02 f303 	mul.w	r3, r2, r3
 8001626:	b29b      	uxth	r3, r3
 8001628:	82bb      	strh	r3, [r7, #20]
  
  ychg = 1;
 800162a:	2301      	movs	r3, #1
 800162c:	827b      	strh	r3, [r7, #18]
  ychg -= ry;
 800162e:	8a7a      	ldrh	r2, [r7, #18]
 8001630:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001634:	b29b      	uxth	r3, r3
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	b29b      	uxth	r3, r3
 800163a:	827b      	strh	r3, [r7, #18]
  ychg -= ry;
 800163c:	8a7a      	ldrh	r2, [r7, #18]
 800163e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001642:	b29b      	uxth	r3, r3
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	b29b      	uxth	r3, r3
 8001648:	827b      	strh	r3, [r7, #18]
  ychg *= rx;
 800164a:	787b      	ldrb	r3, [r7, #1]
 800164c:	b29b      	uxth	r3, r3
 800164e:	8a7a      	ldrh	r2, [r7, #18]
 8001650:	fb02 f303 	mul.w	r3, r2, r3
 8001654:	b29b      	uxth	r3, r3
 8001656:	827b      	strh	r3, [r7, #18]
  ychg *= rx;
 8001658:	787b      	ldrb	r3, [r7, #1]
 800165a:	b29b      	uxth	r3, r3
 800165c:	8a7a      	ldrh	r2, [r7, #18]
 800165e:	fb02 f303 	mul.w	r3, r2, r3
 8001662:	b29b      	uxth	r3, r3
 8001664:	827b      	strh	r3, [r7, #18]
  
  err = 0;
 8001666:	2300      	movs	r3, #0
 8001668:	823b      	strh	r3, [r7, #16]
  
  stopx = 0;
 800166a:	2300      	movs	r3, #0
 800166c:	81fb      	strh	r3, [r7, #14]

  stopy = rxrx2;
 800166e:	897b      	ldrh	r3, [r7, #10]
 8001670:	81bb      	strh	r3, [r7, #12]
  stopy *= ry;
 8001672:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001676:	b29b      	uxth	r3, r3
 8001678:	89ba      	ldrh	r2, [r7, #12]
 800167a:	fb02 f303 	mul.w	r3, r2, r3
 800167e:	b29b      	uxth	r3, r3
 8001680:	81bb      	strh	r3, [r7, #12]
  

  while( stopx <= stopy )
 8001682:	e037      	b.n	80016f4 <u8g2_draw_filled_ellipse+0x22a>
  {
    u8g2_draw_filled_ellipse_section(u8g2, x, y, x0, y0, option);
 8001684:	78f8      	ldrb	r0, [r7, #3]
 8001686:	7dba      	ldrb	r2, [r7, #22]
 8001688:	7df9      	ldrb	r1, [r7, #23]
 800168a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800168e:	9301      	str	r3, [sp, #4]
 8001690:	78bb      	ldrb	r3, [r7, #2]
 8001692:	9300      	str	r3, [sp, #0]
 8001694:	4603      	mov	r3, r0
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f7ff fec0 	bl	800141c <u8g2_draw_filled_ellipse_section>
    x++;
 800169c:	7dfb      	ldrb	r3, [r7, #23]
 800169e:	3301      	adds	r3, #1
 80016a0:	75fb      	strb	r3, [r7, #23]
    stopx += ryry2;
 80016a2:	89fa      	ldrh	r2, [r7, #14]
 80016a4:	893b      	ldrh	r3, [r7, #8]
 80016a6:	4413      	add	r3, r2
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	81fb      	strh	r3, [r7, #14]
    err += xchg;
 80016ac:	8a3a      	ldrh	r2, [r7, #16]
 80016ae:	8abb      	ldrh	r3, [r7, #20]
 80016b0:	4413      	add	r3, r2
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	823b      	strh	r3, [r7, #16]
    xchg += ryry2;
 80016b6:	8aba      	ldrh	r2, [r7, #20]
 80016b8:	893b      	ldrh	r3, [r7, #8]
 80016ba:	4413      	add	r3, r2
 80016bc:	b29b      	uxth	r3, r3
 80016be:	82bb      	strh	r3, [r7, #20]
    if ( 2*err+ychg > 0 )
 80016c0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80016c4:	005a      	lsls	r2, r3, #1
 80016c6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80016ca:	4413      	add	r3, r2
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	dd11      	ble.n	80016f4 <u8g2_draw_filled_ellipse+0x22a>
    {
      y--;
 80016d0:	7dbb      	ldrb	r3, [r7, #22]
 80016d2:	3b01      	subs	r3, #1
 80016d4:	75bb      	strb	r3, [r7, #22]
      stopy -= rxrx2;
 80016d6:	89ba      	ldrh	r2, [r7, #12]
 80016d8:	897b      	ldrh	r3, [r7, #10]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	b29b      	uxth	r3, r3
 80016de:	81bb      	strh	r3, [r7, #12]
      err += ychg;
 80016e0:	8a3a      	ldrh	r2, [r7, #16]
 80016e2:	8a7b      	ldrh	r3, [r7, #18]
 80016e4:	4413      	add	r3, r2
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	823b      	strh	r3, [r7, #16]
      ychg += rxrx2;
 80016ea:	8a7a      	ldrh	r2, [r7, #18]
 80016ec:	897b      	ldrh	r3, [r7, #10]
 80016ee:	4413      	add	r3, r2
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	827b      	strh	r3, [r7, #18]
  while( stopx <= stopy )
 80016f4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80016f8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	ddc1      	ble.n	8001684 <u8g2_draw_filled_ellipse+0x1ba>
    }
  }
  
}
 8001700:	bf00      	nop
 8001702:	3718      	adds	r7, #24
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <u8g2_DrawFilledEllipse>:

void u8g2_DrawFilledEllipse(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rx, u8g2_uint_t ry, uint8_t option)
{
 8001708:	b590      	push	{r4, r7, lr}
 800170a:	b085      	sub	sp, #20
 800170c:	af02      	add	r7, sp, #8
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	4608      	mov	r0, r1
 8001712:	4611      	mov	r1, r2
 8001714:	461a      	mov	r2, r3
 8001716:	4603      	mov	r3, r0
 8001718:	70fb      	strb	r3, [r7, #3]
 800171a:	460b      	mov	r3, r1
 800171c:	70bb      	strb	r3, [r7, #2]
 800171e:	4613      	mov	r3, r2
 8001720:	707b      	strb	r3, [r7, #1]
  /* check for bounding box */
#ifdef U8G2_WITH_INTERSECTION
  {
    if ( u8g2_IsIntersection(u8g2, x0-rx, y0-ry, x0+rx+1, y0+ry+1) == 0 ) 
 8001722:	78fa      	ldrb	r2, [r7, #3]
 8001724:	787b      	ldrb	r3, [r7, #1]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	b2d9      	uxtb	r1, r3
 800172a:	78ba      	ldrb	r2, [r7, #2]
 800172c:	7e3b      	ldrb	r3, [r7, #24]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	b2d8      	uxtb	r0, r3
 8001732:	78fa      	ldrb	r2, [r7, #3]
 8001734:	787b      	ldrb	r3, [r7, #1]
 8001736:	4413      	add	r3, r2
 8001738:	b2db      	uxtb	r3, r3
 800173a:	3301      	adds	r3, #1
 800173c:	b2dc      	uxtb	r4, r3
 800173e:	78ba      	ldrb	r2, [r7, #2]
 8001740:	7e3b      	ldrb	r3, [r7, #24]
 8001742:	4413      	add	r3, r2
 8001744:	b2db      	uxtb	r3, r3
 8001746:	3301      	adds	r3, #1
 8001748:	b2db      	uxtb	r3, r3
 800174a:	9300      	str	r3, [sp, #0]
 800174c:	4623      	mov	r3, r4
 800174e:	4602      	mov	r2, r0
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f000 ff44 	bl	80025de <u8g2_IsIntersection>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d00b      	beq.n	8001774 <u8g2_DrawFilledEllipse+0x6c>
      return;
  }
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_draw_filled_ellipse(u8g2, x0, y0, rx, ry, option);
 800175c:	7878      	ldrb	r0, [r7, #1]
 800175e:	78ba      	ldrb	r2, [r7, #2]
 8001760:	78f9      	ldrb	r1, [r7, #3]
 8001762:	7f3b      	ldrb	r3, [r7, #28]
 8001764:	9301      	str	r3, [sp, #4]
 8001766:	7e3b      	ldrb	r3, [r7, #24]
 8001768:	9300      	str	r3, [sp, #0]
 800176a:	4603      	mov	r3, r0
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f7ff feac 	bl	80014ca <u8g2_draw_filled_ellipse>
 8001772:	e000      	b.n	8001776 <u8g2_DrawFilledEllipse+0x6e>
      return;
 8001774:	bf00      	nop
}
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	bd90      	pop	{r4, r7, pc}

0800177c <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2208      	movs	r2, #8
 8001788:	701a      	strb	r2, [r3, #0]
  return buf;
 800178a:	4b03      	ldr	r3, [pc, #12]	; (8001798 <u8g2_m_16_8_f+0x1c>)
  #endif
}
 800178c:	4618      	mov	r0, r3
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	bc80      	pop	{r7}
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	200000a4 	.word	0x200000a4

0800179c <u8g2_Setup_st7920_s_128x64_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_horizontal_right_lsb, rotation);
}
/* st7920 f */
void u8g2_Setup_st7920_s_128x64_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b088      	sub	sp, #32
 80017a0:	af02      	add	r7, sp, #8
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
 80017a8:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_st7920_128x64, u8x8_cad_st7920_spi, byte_cb, gpio_and_delay_cb);
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	9300      	str	r3, [sp, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a0b      	ldr	r2, [pc, #44]	; (80017e0 <u8g2_Setup_st7920_s_128x64_f+0x44>)
 80017b2:	490c      	ldr	r1, [pc, #48]	; (80017e4 <u8g2_Setup_st7920_s_128x64_f+0x48>)
 80017b4:	68f8      	ldr	r0, [r7, #12]
 80017b6:	f001 fce9 	bl	800318c <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 80017ba:	f107 0313 	add.w	r3, r7, #19
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff ffdc 	bl	800177c <u8g2_m_16_8_f>
 80017c4:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_horizontal_right_lsb, rotation);
 80017c6:	7cfa      	ldrb	r2, [r7, #19]
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	9300      	str	r3, [sp, #0]
 80017cc:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <u8g2_Setup_st7920_s_128x64_f+0x4c>)
 80017ce:	6979      	ldr	r1, [r7, #20]
 80017d0:	68f8      	ldr	r0, [r7, #12]
 80017d2:	f000 ffd5 	bl	8002780 <u8g2_SetupBuffer>
}
 80017d6:	bf00      	nop
 80017d8:	3718      	adds	r7, #24
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	08002cb5 	.word	0x08002cb5
 80017e4:	08002f45 	.word	0x08002f45
 80017e8:	08002635 	.word	0x08002635

080017ec <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	460b      	mov	r3, r1
 80017f6:	70fb      	strb	r3, [r7, #3]
  font += offset;
 80017f8:	78fb      	ldrb	r3, [r7, #3]
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	4413      	add	r3, r2
 80017fe:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	781b      	ldrb	r3, [r3, #0]
}
 8001804:	4618      	mov	r0, r3
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	bc80      	pop	{r7}
 800180c:	4770      	bx	lr

0800180e <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 800180e:	b480      	push	{r7}
 8001810:	b085      	sub	sp, #20
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
 8001816:	460b      	mov	r3, r1
 8001818:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 800181a:	78fb      	ldrb	r3, [r7, #3]
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	4413      	add	r3, r2
 8001820:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	81fb      	strh	r3, [r7, #14]
    font++;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3301      	adds	r3, #1
 800182c:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 800182e:	89fb      	ldrh	r3, [r7, #14]
 8001830:	021b      	lsls	r3, r3, #8
 8001832:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	b29a      	uxth	r2, r3
 800183a:	89fb      	ldrh	r3, [r7, #14]
 800183c:	4413      	add	r3, r2
 800183e:	81fb      	strh	r3, [r7, #14]
    return pos;
 8001840:	89fb      	ldrh	r3, [r7, #14]
}
 8001842:	4618      	mov	r0, r3
 8001844:	3714      	adds	r7, #20
 8001846:	46bd      	mov	sp, r7
 8001848:	bc80      	pop	{r7}
 800184a:	4770      	bx	lr

0800184c <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8001856:	2100      	movs	r1, #0
 8001858:	6838      	ldr	r0, [r7, #0]
 800185a:	f7ff ffc7 	bl	80017ec <u8g2_font_get_byte>
 800185e:	4603      	mov	r3, r0
 8001860:	461a      	mov	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8001866:	2101      	movs	r1, #1
 8001868:	6838      	ldr	r0, [r7, #0]
 800186a:	f7ff ffbf 	bl	80017ec <u8g2_font_get_byte>
 800186e:	4603      	mov	r3, r0
 8001870:	461a      	mov	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8001876:	2102      	movs	r1, #2
 8001878:	6838      	ldr	r0, [r7, #0]
 800187a:	f7ff ffb7 	bl	80017ec <u8g2_font_get_byte>
 800187e:	4603      	mov	r3, r0
 8001880:	461a      	mov	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8001886:	2103      	movs	r1, #3
 8001888:	6838      	ldr	r0, [r7, #0]
 800188a:	f7ff ffaf 	bl	80017ec <u8g2_font_get_byte>
 800188e:	4603      	mov	r3, r0
 8001890:	461a      	mov	r2, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8001896:	2104      	movs	r1, #4
 8001898:	6838      	ldr	r0, [r7, #0]
 800189a:	f7ff ffa7 	bl	80017ec <u8g2_font_get_byte>
 800189e:	4603      	mov	r3, r0
 80018a0:	461a      	mov	r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 80018a6:	2105      	movs	r1, #5
 80018a8:	6838      	ldr	r0, [r7, #0]
 80018aa:	f7ff ff9f 	bl	80017ec <u8g2_font_get_byte>
 80018ae:	4603      	mov	r3, r0
 80018b0:	461a      	mov	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 80018b6:	2106      	movs	r1, #6
 80018b8:	6838      	ldr	r0, [r7, #0]
 80018ba:	f7ff ff97 	bl	80017ec <u8g2_font_get_byte>
 80018be:	4603      	mov	r3, r0
 80018c0:	461a      	mov	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 80018c6:	2107      	movs	r1, #7
 80018c8:	6838      	ldr	r0, [r7, #0]
 80018ca:	f7ff ff8f 	bl	80017ec <u8g2_font_get_byte>
 80018ce:	4603      	mov	r3, r0
 80018d0:	461a      	mov	r2, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 80018d6:	2108      	movs	r1, #8
 80018d8:	6838      	ldr	r0, [r7, #0]
 80018da:	f7ff ff87 	bl	80017ec <u8g2_font_get_byte>
 80018de:	4603      	mov	r3, r0
 80018e0:	461a      	mov	r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 80018e6:	2109      	movs	r1, #9
 80018e8:	6838      	ldr	r0, [r7, #0]
 80018ea:	f7ff ff7f 	bl	80017ec <u8g2_font_get_byte>
 80018ee:	4603      	mov	r3, r0
 80018f0:	b25a      	sxtb	r2, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 80018f6:	210a      	movs	r1, #10
 80018f8:	6838      	ldr	r0, [r7, #0]
 80018fa:	f7ff ff77 	bl	80017ec <u8g2_font_get_byte>
 80018fe:	4603      	mov	r3, r0
 8001900:	b25a      	sxtb	r2, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8001906:	210b      	movs	r1, #11
 8001908:	6838      	ldr	r0, [r7, #0]
 800190a:	f7ff ff6f 	bl	80017ec <u8g2_font_get_byte>
 800190e:	4603      	mov	r3, r0
 8001910:	b25a      	sxtb	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8001916:	210c      	movs	r1, #12
 8001918:	6838      	ldr	r0, [r7, #0]
 800191a:	f7ff ff67 	bl	80017ec <u8g2_font_get_byte>
 800191e:	4603      	mov	r3, r0
 8001920:	b25a      	sxtb	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8001926:	210d      	movs	r1, #13
 8001928:	6838      	ldr	r0, [r7, #0]
 800192a:	f7ff ff5f 	bl	80017ec <u8g2_font_get_byte>
 800192e:	4603      	mov	r3, r0
 8001930:	b25a      	sxtb	r2, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8001936:	210e      	movs	r1, #14
 8001938:	6838      	ldr	r0, [r7, #0]
 800193a:	f7ff ff57 	bl	80017ec <u8g2_font_get_byte>
 800193e:	4603      	mov	r3, r0
 8001940:	b25a      	sxtb	r2, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8001946:	210f      	movs	r1, #15
 8001948:	6838      	ldr	r0, [r7, #0]
 800194a:	f7ff ff4f 	bl	80017ec <u8g2_font_get_byte>
 800194e:	4603      	mov	r3, r0
 8001950:	b25a      	sxtb	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8001956:	2110      	movs	r1, #16
 8001958:	6838      	ldr	r0, [r7, #0]
 800195a:	f7ff ff47 	bl	80017ec <u8g2_font_get_byte>
 800195e:	4603      	mov	r3, r0
 8001960:	b25a      	sxtb	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8001966:	2111      	movs	r1, #17
 8001968:	6838      	ldr	r0, [r7, #0]
 800196a:	f7ff ff50 	bl	800180e <u8g2_font_get_word>
 800196e:	4603      	mov	r3, r0
 8001970:	461a      	mov	r2, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8001976:	2113      	movs	r1, #19
 8001978:	6838      	ldr	r0, [r7, #0]
 800197a:	f7ff ff48 	bl	800180e <u8g2_font_get_word>
 800197e:	4603      	mov	r3, r0
 8001980:	461a      	mov	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8001986:	2115      	movs	r1, #21
 8001988:	6838      	ldr	r0, [r7, #0]
 800198a:	f7ff ff40 	bl	800180e <u8g2_font_get_word>
 800198e:	4603      	mov	r3, r0
 8001990:	461a      	mov	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	82da      	strh	r2, [r3, #22]
#endif
}
 8001996:	bf00      	nop
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 800199e:	b480      	push	{r7}
 80019a0:	b085      	sub	sp, #20
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
 80019a6:	460b      	mov	r3, r1
 80019a8:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	7a9b      	ldrb	r3, [r3, #10]
 80019ae:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 80019b8:	7bfa      	ldrb	r2, [r7, #15]
 80019ba:	7b7b      	ldrb	r3, [r7, #13]
 80019bc:	fa42 f303 	asr.w	r3, r2, r3
 80019c0:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 80019c2:	7b7b      	ldrb	r3, [r7, #13]
 80019c4:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 80019c6:	7bba      	ldrb	r2, [r7, #14]
 80019c8:	78fb      	ldrb	r3, [r7, #3]
 80019ca:	4413      	add	r3, r2
 80019cc:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 80019ce:	7bbb      	ldrb	r3, [r7, #14]
 80019d0:	2b07      	cmp	r3, #7
 80019d2:	d91a      	bls.n	8001a0a <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 80019d4:	2308      	movs	r3, #8
 80019d6:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 80019d8:	7b3a      	ldrb	r2, [r7, #12]
 80019da:	7b7b      	ldrb	r3, [r7, #13]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	1c5a      	adds	r2, r3, #1
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	461a      	mov	r2, r3
 80019f2:	7b3b      	ldrb	r3, [r7, #12]
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	b25a      	sxtb	r2, r3
 80019fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	b25b      	sxtb	r3, r3
 8001a02:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8001a04:	7bbb      	ldrb	r3, [r7, #14]
 8001a06:	3b08      	subs	r3, #8
 8001a08:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8001a0a:	78fb      	ldrb	r3, [r7, #3]
 8001a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	43db      	mvns	r3, r3
 8001a18:	b2da      	uxtb	r2, r3
 8001a1a:	7bfb      	ldrb	r3, [r7, #15]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	7bba      	ldrb	r2, [r7, #14]
 8001a24:	729a      	strb	r2, [r3, #10]
  return val;
 8001a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bc80      	pop	{r7}
 8001a30:	4770      	bx	lr

08001a32 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b084      	sub	sp, #16
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8001a3e:	78fb      	ldrb	r3, [r7, #3]
 8001a40:	4619      	mov	r1, r3
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f7ff ffab 	bl	800199e <u8g2_font_decode_get_unsigned_bits>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8001a50:	78fb      	ldrb	r3, [r7, #3]
 8001a52:	3b01      	subs	r3, #1
 8001a54:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8001a56:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001a5a:	78fb      	ldrb	r3, [r7, #3]
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8001a62:	7bfa      	ldrb	r2, [r7, #15]
 8001a64:	7bbb      	ldrb	r3, [r7, #14]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	73fb      	strb	r3, [r7, #15]
  return v;
 8001a6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3710      	adds	r7, #16
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8001a78:	b490      	push	{r4, r7}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4604      	mov	r4, r0
 8001a80:	4608      	mov	r0, r1
 8001a82:	4611      	mov	r1, r2
 8001a84:	461a      	mov	r2, r3
 8001a86:	4623      	mov	r3, r4
 8001a88:	71fb      	strb	r3, [r7, #7]
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	71bb      	strb	r3, [r7, #6]
 8001a8e:	460b      	mov	r3, r1
 8001a90:	717b      	strb	r3, [r7, #5]
 8001a92:	4613      	mov	r3, r2
 8001a94:	713b      	strb	r3, [r7, #4]
  switch(dir)
 8001a96:	793b      	ldrb	r3, [r7, #4]
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d008      	beq.n	8001aae <u8g2_add_vector_y+0x36>
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d00b      	beq.n	8001ab8 <u8g2_add_vector_y+0x40>
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d10e      	bne.n	8001ac2 <u8g2_add_vector_y+0x4a>
  {
    case 0:
      dy += y;
 8001aa4:	797a      	ldrb	r2, [r7, #5]
 8001aa6:	79fb      	ldrb	r3, [r7, #7]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	71fb      	strb	r3, [r7, #7]
      break;
 8001aac:	e00e      	b.n	8001acc <u8g2_add_vector_y+0x54>
    case 1:
      dy += x;
 8001aae:	79ba      	ldrb	r2, [r7, #6]
 8001ab0:	79fb      	ldrb	r3, [r7, #7]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	71fb      	strb	r3, [r7, #7]
      break;
 8001ab6:	e009      	b.n	8001acc <u8g2_add_vector_y+0x54>
    case 2:
      dy -= y;
 8001ab8:	797b      	ldrb	r3, [r7, #5]
 8001aba:	79fa      	ldrb	r2, [r7, #7]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	71fb      	strb	r3, [r7, #7]
      break;
 8001ac0:	e004      	b.n	8001acc <u8g2_add_vector_y+0x54>
    default:
      dy -= x;
 8001ac2:	79bb      	ldrb	r3, [r7, #6]
 8001ac4:	79fa      	ldrb	r2, [r7, #7]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	71fb      	strb	r3, [r7, #7]
      break;      
 8001aca:	bf00      	nop
  }
  return dy;
 8001acc:	79fb      	ldrb	r3, [r7, #7]
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bc90      	pop	{r4, r7}
 8001ad6:	4770      	bx	lr

08001ad8 <u8g2_add_vector_x>:

static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8001ad8:	b490      	push	{r4, r7}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4604      	mov	r4, r0
 8001ae0:	4608      	mov	r0, r1
 8001ae2:	4611      	mov	r1, r2
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	4623      	mov	r3, r4
 8001ae8:	71fb      	strb	r3, [r7, #7]
 8001aea:	4603      	mov	r3, r0
 8001aec:	71bb      	strb	r3, [r7, #6]
 8001aee:	460b      	mov	r3, r1
 8001af0:	717b      	strb	r3, [r7, #5]
 8001af2:	4613      	mov	r3, r2
 8001af4:	713b      	strb	r3, [r7, #4]
  switch(dir)
 8001af6:	793b      	ldrb	r3, [r7, #4]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d008      	beq.n	8001b0e <u8g2_add_vector_x+0x36>
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d00b      	beq.n	8001b18 <u8g2_add_vector_x+0x40>
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d10e      	bne.n	8001b22 <u8g2_add_vector_x+0x4a>
  {
    case 0:
      dx += x;
 8001b04:	79ba      	ldrb	r2, [r7, #6]
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	4413      	add	r3, r2
 8001b0a:	71fb      	strb	r3, [r7, #7]
      break;
 8001b0c:	e00e      	b.n	8001b2c <u8g2_add_vector_x+0x54>
    case 1:
      dx -= y;
 8001b0e:	797b      	ldrb	r3, [r7, #5]
 8001b10:	79fa      	ldrb	r2, [r7, #7]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	71fb      	strb	r3, [r7, #7]
      break;
 8001b16:	e009      	b.n	8001b2c <u8g2_add_vector_x+0x54>
    case 2:
      dx -= x;
 8001b18:	79bb      	ldrb	r3, [r7, #6]
 8001b1a:	79fa      	ldrb	r2, [r7, #7]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	71fb      	strb	r3, [r7, #7]
      break;
 8001b20:	e004      	b.n	8001b2c <u8g2_add_vector_x+0x54>
    default:
      dx += y;
 8001b22:	797a      	ldrb	r2, [r7, #5]
 8001b24:	79fb      	ldrb	r3, [r7, #7]
 8001b26:	4413      	add	r3, r2
 8001b28:	71fb      	strb	r3, [r7, #7]
      break;      
 8001b2a:	bf00      	nop
  }
  return dx;
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bc90      	pop	{r4, r7}
 8001b36:	4770      	bx	lr

08001b38 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b088      	sub	sp, #32
 8001b3c:	af02      	add	r7, sp, #8
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	460b      	mov	r3, r1
 8001b42:	70fb      	strb	r3, [r7, #3]
 8001b44:	4613      	mov	r3, r2
 8001b46:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3358      	adds	r3, #88	; 0x58
 8001b4c:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8001b4e:	78fb      	ldrb	r3, [r7, #3]
 8001b50:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001b58:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8001b60:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001b68:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8001b6a:	7bfa      	ldrb	r2, [r7, #15]
 8001b6c:	7d7b      	ldrb	r3, [r7, #21]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8001b72:	7bfb      	ldrb	r3, [r7, #15]
 8001b74:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8001b76:	7dfa      	ldrb	r2, [r7, #23]
 8001b78:	7bfb      	ldrb	r3, [r7, #15]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d201      	bcs.n	8001b82 <u8g2_font_decode_len+0x4a>
      current = cnt;
 8001b7e:	7dfb      	ldrb	r3, [r7, #23]
 8001b80:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	791b      	ldrb	r3, [r3, #4]
 8001b86:	73bb      	strb	r3, [r7, #14]
    y = decode->target_y;
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	795b      	ldrb	r3, [r3, #5]
 8001b8c:	737b      	strb	r3, [r7, #13]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8001b8e:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8001b92:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	7b9b      	ldrb	r3, [r3, #14]
 8001b9a:	7bb8      	ldrb	r0, [r7, #14]
 8001b9c:	f7ff ff9c 	bl	8001ad8 <u8g2_add_vector_x>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	73bb      	strb	r3, [r7, #14]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8001ba4:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8001ba8:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	7b9b      	ldrb	r3, [r3, #14]
 8001bb0:	7b78      	ldrb	r0, [r7, #13]
 8001bb2:	f7ff ff61 	bl	8001a78 <u8g2_add_vector_y>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	737b      	strb	r3, [r7, #13]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8001bba:	78bb      	ldrb	r3, [r7, #2]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d00f      	beq.n	8001be0 <u8g2_font_decode_len+0xa8>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	7b1a      	ldrb	r2, [r3, #12]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
      u8g2_DrawHVLine(u8g2, 
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	7b9b      	ldrb	r3, [r3, #14]
 8001bce:	7db8      	ldrb	r0, [r7, #22]
 8001bd0:	7b7a      	ldrb	r2, [r7, #13]
 8001bd2:	7bb9      	ldrb	r1, [r7, #14]
 8001bd4:	9300      	str	r3, [sp, #0]
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f000 fc00 	bl	80023de <u8g2_DrawHVLine>
 8001bde:	e012      	b.n	8001c06 <u8g2_font_decode_len+0xce>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	7adb      	ldrb	r3, [r3, #11]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d10e      	bne.n	8001c06 <u8g2_font_decode_len+0xce>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	7b5a      	ldrb	r2, [r3, #13]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
      u8g2_DrawHVLine(u8g2, 
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	7b9b      	ldrb	r3, [r3, #14]
 8001bf6:	7db8      	ldrb	r0, [r7, #22]
 8001bf8:	7b7a      	ldrb	r2, [r7, #13]
 8001bfa:	7bb9      	ldrb	r1, [r7, #14]
 8001bfc:	9300      	str	r3, [sp, #0]
 8001bfe:	4603      	mov	r3, r0
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f000 fbec 	bl	80023de <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8001c06:	7dfa      	ldrb	r2, [r7, #23]
 8001c08:	7bfb      	ldrb	r3, [r7, #15]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d309      	bcc.n	8001c22 <u8g2_font_decode_len+0xea>
      break;
    cnt -= rem;
 8001c0e:	7dfa      	ldrb	r2, [r7, #23]
 8001c10:	7bfb      	ldrb	r3, [r7, #15]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8001c16:	2300      	movs	r3, #0
 8001c18:	757b      	strb	r3, [r7, #21]
    ly++;
 8001c1a:	7d3b      	ldrb	r3, [r7, #20]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8001c20:	e79f      	b.n	8001b62 <u8g2_font_decode_len+0x2a>
      break;
 8001c22:	bf00      	nop
  }
  lx += cnt;
 8001c24:	7d7a      	ldrb	r2, [r7, #21]
 8001c26:	7dfb      	ldrb	r3, [r7, #23]
 8001c28:	4413      	add	r3, r2
 8001c2a:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8001c2c:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	719a      	strb	r2, [r3, #6]
  decode->y = ly;
 8001c34:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	71da      	strb	r2, [r3, #7]
  
}
 8001c3c:	bf00      	nop
 8001c3e:	3718      	adds	r7, #24
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	3358      	adds	r3, #88	; 0x58
 8001c52:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	683a      	ldr	r2, [r7, #0]
 8001c58:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	729a      	strb	r2, [r3, #10]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8001c66:	4619      	mov	r1, r3
 8001c68:	68f8      	ldr	r0, [r7, #12]
 8001c6a:	f7ff fe98 	bl	800199e <u8g2_font_decode_get_unsigned_bits>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	b25a      	sxtb	r2, r3
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	721a      	strb	r2, [r3, #8]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	68f8      	ldr	r0, [r7, #12]
 8001c80:	f7ff fe8d 	bl	800199e <u8g2_font_decode_get_unsigned_bits>
 8001c84:	4603      	mov	r3, r0
 8001c86:	b25a      	sxtb	r2, r3
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	725a      	strb	r2, [r3, #9]
  
  decode->fg_color = u8g2->draw_color;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	731a      	strb	r2, [r3, #12]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	7b1b      	ldrb	r3, [r3, #12]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	bf0c      	ite	eq
 8001c9e:	2301      	moveq	r3, #1
 8001ca0:	2300      	movne	r3, #0
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	735a      	strb	r2, [r3, #13]
}
 8001caa:	bf00      	nop
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
	...

08001cb4 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b088      	sub	sp, #32
 8001cb8:	af02      	add	r7, sp, #8
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	3358      	adds	r3, #88	; 0x58
 8001cc2:	613b      	str	r3, [r7, #16]
    
  u8g2_font_setup_decode(u8g2, glyph_data);
 8001cc4:	6839      	ldr	r1, [r7, #0]
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f7ff ffbc 	bl	8001c44 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001cd2:	73fb      	strb	r3, [r7, #15]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8001cda:	4619      	mov	r1, r3
 8001cdc:	6938      	ldr	r0, [r7, #16]
 8001cde:	f7ff fea8 	bl	8001a32 <u8g2_font_decode_get_signed_bits>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	73bb      	strb	r3, [r7, #14]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8001cec:	4619      	mov	r1, r3
 8001cee:	6938      	ldr	r0, [r7, #16]
 8001cf0:	f7ff fe9f 	bl	8001a32 <u8g2_font_decode_get_signed_bits>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	737b      	strb	r3, [r7, #13]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001cfe:	4619      	mov	r1, r3
 8001d00:	6938      	ldr	r0, [r7, #16]
 8001d02:	f7ff fe96 	bl	8001a32 <u8g2_font_decode_get_signed_bits>
 8001d06:	4603      	mov	r3, r0
 8001d08:	733b      	strb	r3, [r7, #12]
  
  if ( decode->glyph_width > 0 )
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	f340 80cf 	ble.w	8001eb4 <u8g2_font_decode_glyph+0x200>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	7918      	ldrb	r0, [r3, #4]
 8001d1a:	7bfa      	ldrb	r2, [r7, #15]
 8001d1c:	7b7b      	ldrb	r3, [r7, #13]
 8001d1e:	4413      	add	r3, r2
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	425b      	negs	r3, r3
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	b25a      	sxtb	r2, r3
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	7b9b      	ldrb	r3, [r3, #14]
 8001d2c:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8001d30:	f7ff fed2 	bl	8001ad8 <u8g2_add_vector_x>
 8001d34:	4603      	mov	r3, r0
 8001d36:	461a      	mov	r2, r3
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	711a      	strb	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	7958      	ldrb	r0, [r3, #5]
 8001d40:	7bfa      	ldrb	r2, [r7, #15]
 8001d42:	7b7b      	ldrb	r3, [r7, #13]
 8001d44:	4413      	add	r3, r2
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	425b      	negs	r3, r3
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	b25a      	sxtb	r2, r3
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	7b9b      	ldrb	r3, [r3, #14]
 8001d52:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8001d56:	f7ff fe8f 	bl	8001a78 <u8g2_add_vector_y>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	715a      	strb	r2, [r3, #5]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	791b      	ldrb	r3, [r3, #4]
 8001d66:	75fb      	strb	r3, [r7, #23]
      y0 = decode->target_y;
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	795b      	ldrb	r3, [r3, #5]
 8001d6c:	757b      	strb	r3, [r7, #21]
      x1 = x0;
 8001d6e:	7dfb      	ldrb	r3, [r7, #23]
 8001d70:	75bb      	strb	r3, [r7, #22]
      y1 = y0;
 8001d72:	7d7b      	ldrb	r3, [r7, #21]
 8001d74:	753b      	strb	r3, [r7, #20]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	7b9b      	ldrb	r3, [r3, #14]
 8001d7a:	2b03      	cmp	r3, #3
 8001d7c:	d852      	bhi.n	8001e24 <u8g2_font_decode_glyph+0x170>
 8001d7e:	a201      	add	r2, pc, #4	; (adr r2, 8001d84 <u8g2_font_decode_glyph+0xd0>)
 8001d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d84:	08001d95 	.word	0x08001d95
 8001d88:	08001dad 	.word	0x08001dad
 8001d8c:	08001dd1 	.word	0x08001dd1
 8001d90:	08001e01 	.word	0x08001e01
      {
	case 0:
	    x1 += decode->glyph_width;
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	7dbb      	ldrb	r3, [r7, #22]
 8001d9e:	4413      	add	r3, r2
 8001da0:	75bb      	strb	r3, [r7, #22]
	    y1 += h;
 8001da2:	7bfa      	ldrb	r2, [r7, #15]
 8001da4:	7d3b      	ldrb	r3, [r7, #20]
 8001da6:	4413      	add	r3, r2
 8001da8:	753b      	strb	r3, [r7, #20]
	    break;
 8001daa:	e03b      	b.n	8001e24 <u8g2_font_decode_glyph+0x170>
	case 1:
	    x0 -= h;
 8001dac:	7bfb      	ldrb	r3, [r7, #15]
 8001dae:	7dfa      	ldrb	r2, [r7, #23]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001db4:	7dfb      	ldrb	r3, [r7, #23]
 8001db6:	3301      	adds	r3, #1
 8001db8:	75fb      	strb	r3, [r7, #23]
	    x1++;
 8001dba:	7dbb      	ldrb	r3, [r7, #22]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	75bb      	strb	r3, [r7, #22]
	    y1 += decode->glyph_width;
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001dc6:	b2da      	uxtb	r2, r3
 8001dc8:	7d3b      	ldrb	r3, [r7, #20]
 8001dca:	4413      	add	r3, r2
 8001dcc:	753b      	strb	r3, [r7, #20]
	    break;
 8001dce:	e029      	b.n	8001e24 <u8g2_font_decode_glyph+0x170>
	case 2:
	    x0 -= decode->glyph_width;
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	7dfa      	ldrb	r2, [r7, #23]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001dde:	7dfb      	ldrb	r3, [r7, #23]
 8001de0:	3301      	adds	r3, #1
 8001de2:	75fb      	strb	r3, [r7, #23]
	    x1++;
 8001de4:	7dbb      	ldrb	r3, [r7, #22]
 8001de6:	3301      	adds	r3, #1
 8001de8:	75bb      	strb	r3, [r7, #22]
	    y0 -= h;
 8001dea:	7bfb      	ldrb	r3, [r7, #15]
 8001dec:	7d7a      	ldrb	r2, [r7, #21]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001df2:	7d7b      	ldrb	r3, [r7, #21]
 8001df4:	3301      	adds	r3, #1
 8001df6:	757b      	strb	r3, [r7, #21]
	    y1++;
 8001df8:	7d3b      	ldrb	r3, [r7, #20]
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	753b      	strb	r3, [r7, #20]
	    break;	  
 8001dfe:	e011      	b.n	8001e24 <u8g2_font_decode_glyph+0x170>
	case 3:
	    x1 += h;
 8001e00:	7bfa      	ldrb	r2, [r7, #15]
 8001e02:	7dbb      	ldrb	r3, [r7, #22]
 8001e04:	4413      	add	r3, r2
 8001e06:	75bb      	strb	r3, [r7, #22]
	    y0 -= decode->glyph_width;
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	7d7a      	ldrb	r2, [r7, #21]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001e16:	7d7b      	ldrb	r3, [r7, #21]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	757b      	strb	r3, [r7, #21]
	    y1++;
 8001e1c:	7d3b      	ldrb	r3, [r7, #20]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	753b      	strb	r3, [r7, #20]
	    break;	  
 8001e22:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8001e24:	7db8      	ldrb	r0, [r7, #22]
 8001e26:	7d7a      	ldrb	r2, [r7, #21]
 8001e28:	7df9      	ldrb	r1, [r7, #23]
 8001e2a:	7d3b      	ldrb	r3, [r7, #20]
 8001e2c:	9300      	str	r3, [sp, #0]
 8001e2e:	4603      	mov	r3, r0
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 fbd4 	bl	80025de <u8g2_IsIntersection>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d102      	bne.n	8001e42 <u8g2_font_decode_glyph+0x18e>
	return d;
 8001e3c:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001e40:	e03a      	b.n	8001eb8 <u8g2_font_decode_glyph+0x204>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	2200      	movs	r2, #0
 8001e46:	719a      	strb	r2, [r3, #6]
    decode->y = 0;
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	71da      	strb	r2, [r3, #7]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8001e54:	4619      	mov	r1, r3
 8001e56:	6938      	ldr	r0, [r7, #16]
 8001e58:	f7ff fda1 	bl	800199e <u8g2_font_decode_get_unsigned_bits>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	72fb      	strb	r3, [r7, #11]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8001e66:	4619      	mov	r1, r3
 8001e68:	6938      	ldr	r0, [r7, #16]
 8001e6a:	f7ff fd98 	bl	800199e <u8g2_font_decode_get_unsigned_bits>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	72bb      	strb	r3, [r7, #10]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8001e72:	7afb      	ldrb	r3, [r7, #11]
 8001e74:	2200      	movs	r2, #0
 8001e76:	4619      	mov	r1, r3
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f7ff fe5d 	bl	8001b38 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8001e7e:	7abb      	ldrb	r3, [r7, #10]
 8001e80:	2201      	movs	r2, #1
 8001e82:	4619      	mov	r1, r3
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f7ff fe57 	bl	8001b38 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8001e8a:	2101      	movs	r1, #1
 8001e8c:	6938      	ldr	r0, [r7, #16]
 8001e8e:	f7ff fd86 	bl	800199e <u8g2_font_decode_get_unsigned_bits>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d1ec      	bne.n	8001e72 <u8g2_font_decode_glyph+0x1be>

      if ( decode->y >= h )
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8001e9e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	dd00      	ble.n	8001ea8 <u8g2_font_decode_glyph+0x1f4>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8001ea6:	e7d2      	b.n	8001e4e <u8g2_font_decode_glyph+0x19a>
	break;
 8001ea8:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	7b1a      	ldrb	r2, [r3, #12]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
  }
  return d;
 8001eb4:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3718      	adds	r7, #24
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	460b      	mov	r3, r1
 8001eca:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ed0:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	3317      	adds	r3, #23
 8001ed6:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8001ed8:	887b      	ldrh	r3, [r7, #2]
 8001eda:	2bff      	cmp	r3, #255	; 0xff
 8001edc:	d82a      	bhi.n	8001f34 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8001ede:	887b      	ldrh	r3, [r7, #2]
 8001ee0:	2b60      	cmp	r3, #96	; 0x60
 8001ee2:	d907      	bls.n	8001ef4 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8001eea:	461a      	mov	r2, r3
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	4413      	add	r3, r2
 8001ef0:	617b      	str	r3, [r7, #20]
 8001ef2:	e009      	b.n	8001f08 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8001ef4:	887b      	ldrh	r3, [r7, #2]
 8001ef6:	2b40      	cmp	r3, #64	; 0x40
 8001ef8:	d906      	bls.n	8001f08 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8001f00:	461a      	mov	r2, r3
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	4413      	add	r3, r2
 8001f06:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d04e      	beq.n	8001fb0 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	887a      	ldrh	r2, [r7, #2]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d102      	bne.n	8001f24 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	3302      	adds	r3, #2
 8001f22:	e049      	b.n	8001fb8 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	3301      	adds	r3, #1
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	4413      	add	r3, r2
 8001f30:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001f32:	e7e9      	b.n	8001f08 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	4413      	add	r3, r2
 8001f40:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8001f46:	2100      	movs	r1, #0
 8001f48:	6938      	ldr	r0, [r7, #16]
 8001f4a:	f7ff fc60 	bl	800180e <u8g2_font_get_word>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	461a      	mov	r2, r3
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	4413      	add	r3, r2
 8001f56:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8001f58:	2102      	movs	r1, #2
 8001f5a:	6938      	ldr	r0, [r7, #16]
 8001f5c:	f7ff fc57 	bl	800180e <u8g2_font_get_word>
 8001f60:	4603      	mov	r3, r0
 8001f62:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	3304      	adds	r3, #4
 8001f68:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 8001f6a:	89fa      	ldrh	r2, [r7, #14]
 8001f6c:	887b      	ldrh	r3, [r7, #2]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d3e9      	bcc.n	8001f46 <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8001f78:	89fb      	ldrh	r3, [r7, #14]
 8001f7a:	021b      	lsls	r3, r3, #8
 8001f7c:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	3301      	adds	r3, #1
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	89fb      	ldrh	r3, [r7, #14]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8001f8c:	89fb      	ldrh	r3, [r7, #14]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d010      	beq.n	8001fb4 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8001f92:	89fa      	ldrh	r2, [r7, #14]
 8001f94:	887b      	ldrh	r3, [r7, #2]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d102      	bne.n	8001fa0 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	3303      	adds	r3, #3
 8001f9e:	e00b      	b.n	8001fb8 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	3302      	adds	r3, #2
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	4413      	add	r3, r2
 8001fac:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8001fae:	e7e0      	b.n	8001f72 <u8g2_font_get_glyph_data+0xb2>
	break;
 8001fb0:	bf00      	nop
 8001fb2:	e000      	b.n	8001fb6 <u8g2_font_get_glyph_data+0xf6>
	break;
 8001fb4:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8001fb6:	2300      	movs	r3, #0
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3718      	adds	r7, #24
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	4608      	mov	r0, r1
 8001fca:	4611      	mov	r1, r2
 8001fcc:	461a      	mov	r2, r3
 8001fce:	4603      	mov	r3, r0
 8001fd0:	70fb      	strb	r3, [r7, #3]
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	70bb      	strb	r3, [r7, #2]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	803b      	strh	r3, [r7, #0]
  u8g2_uint_t dx = 0;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	73fb      	strb	r3, [r7, #15]
  u8g2->font_decode.target_x = x;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	78fa      	ldrb	r2, [r7, #3]
 8001fe2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  u8g2->font_decode.target_y = y;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	78ba      	ldrb	r2, [r7, #2]
 8001fea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8001fee:	883b      	ldrh	r3, [r7, #0]
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f7ff ff64 	bl	8001ec0 <u8g2_font_get_glyph_data>
 8001ff8:	60b8      	str	r0, [r7, #8]
  if ( glyph_data != NULL )
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d005      	beq.n	800200c <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8002000:	68b9      	ldr	r1, [r7, #8]
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f7ff fe56 	bl	8001cb4 <u8g2_font_decode_glyph>
 8002008:	4603      	mov	r3, r0
 800200a:	73fb      	strb	r3, [r7, #15]
  }
  return dx;
 800200c:	7bfb      	ldrb	r3, [r7, #15]
}
 800200e:	4618      	mov	r0, r3
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
	...

08002018 <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	4608      	mov	r0, r1
 8002022:	4611      	mov	r1, r2
 8002024:	461a      	mov	r2, r3
 8002026:	4603      	mov	r3, r0
 8002028:	70fb      	strb	r3, [r7, #3]
 800202a:	460b      	mov	r3, r1
 800202c:	70bb      	strb	r3, [r7, #2]
 800202e:	4613      	mov	r3, r2
 8002030:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8002038:	2b03      	cmp	r3, #3
 800203a:	d833      	bhi.n	80020a4 <u8g2_DrawGlyph+0x8c>
 800203c:	a201      	add	r2, pc, #4	; (adr r2, 8002044 <u8g2_DrawGlyph+0x2c>)
 800203e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002042:	bf00      	nop
 8002044:	08002055 	.word	0x08002055
 8002048:	08002069 	.word	0x08002069
 800204c:	0800207d 	.word	0x0800207d
 8002050:	08002091 	.word	0x08002091
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	4798      	blx	r3
 800205c:	4603      	mov	r3, r0
 800205e:	461a      	mov	r2, r3
 8002060:	78bb      	ldrb	r3, [r7, #2]
 8002062:	4413      	add	r3, r2
 8002064:	70bb      	strb	r3, [r7, #2]
      break;
 8002066:	e01d      	b.n	80020a4 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	4798      	blx	r3
 8002070:	4603      	mov	r3, r0
 8002072:	461a      	mov	r2, r3
 8002074:	78fb      	ldrb	r3, [r7, #3]
 8002076:	1a9b      	subs	r3, r3, r2
 8002078:	70fb      	strb	r3, [r7, #3]
      break;
 800207a:	e013      	b.n	80020a4 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	4798      	blx	r3
 8002084:	4603      	mov	r3, r0
 8002086:	461a      	mov	r2, r3
 8002088:	78bb      	ldrb	r3, [r7, #2]
 800208a:	1a9b      	subs	r3, r3, r2
 800208c:	70bb      	strb	r3, [r7, #2]
      break;
 800208e:	e009      	b.n	80020a4 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	4798      	blx	r3
 8002098:	4603      	mov	r3, r0
 800209a:	461a      	mov	r2, r3
 800209c:	78fb      	ldrb	r3, [r7, #3]
 800209e:	4413      	add	r3, r2
 80020a0:	70fb      	strb	r3, [r7, #3]
      break;
 80020a2:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 80020a4:	883b      	ldrh	r3, [r7, #0]
 80020a6:	78ba      	ldrb	r2, [r7, #2]
 80020a8:	78f9      	ldrb	r1, [r7, #3]
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f7ff ff88 	bl	8001fc0 <u8g2_font_draw_glyph>
 80020b0:	4603      	mov	r3, r0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop

080020bc <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	607b      	str	r3, [r7, #4]
 80020c6:	460b      	mov	r3, r1
 80020c8:	72fb      	strb	r3, [r7, #11]
 80020ca:	4613      	mov	r3, r2
 80020cc:	72bb      	strb	r3, [r7, #10]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 80020ce:	68f8      	ldr	r0, [r7, #12]
 80020d0:	f000 fca9 	bl	8002a26 <u8x8_utf8_init>
  sum = 0;
 80020d4:	2300      	movs	r3, #0
 80020d6:	75fb      	strb	r3, [r7, #23]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	7812      	ldrb	r2, [r2, #0]
 80020e0:	4611      	mov	r1, r2
 80020e2:	68f8      	ldr	r0, [r7, #12]
 80020e4:	4798      	blx	r3
 80020e6:	4603      	mov	r3, r0
 80020e8:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 80020ea:	8abb      	ldrh	r3, [r7, #20]
 80020ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d038      	beq.n	8002166 <u8g2_draw_string+0xaa>
      break;
    str++;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	3301      	adds	r3, #1
 80020f8:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 80020fa:	8abb      	ldrh	r3, [r7, #20]
 80020fc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002100:	4293      	cmp	r3, r2
 8002102:	d0e9      	beq.n	80020d8 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8002104:	8abb      	ldrh	r3, [r7, #20]
 8002106:	7aba      	ldrb	r2, [r7, #10]
 8002108:	7af9      	ldrb	r1, [r7, #11]
 800210a:	68f8      	ldr	r0, [r7, #12]
 800210c:	f7ff ff84 	bl	8002018 <u8g2_DrawGlyph>
 8002110:	4603      	mov	r3, r0
 8002112:	74fb      	strb	r3, [r7, #19]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800211a:	2b03      	cmp	r3, #3
 800211c:	d81e      	bhi.n	800215c <u8g2_draw_string+0xa0>
 800211e:	a201      	add	r2, pc, #4	; (adr r2, 8002124 <u8g2_draw_string+0x68>)
 8002120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002124:	08002135 	.word	0x08002135
 8002128:	0800213f 	.word	0x0800213f
 800212c:	08002149 	.word	0x08002149
 8002130:	08002153 	.word	0x08002153
      {
	case 0:
	  x += delta;
 8002134:	7afa      	ldrb	r2, [r7, #11]
 8002136:	7cfb      	ldrb	r3, [r7, #19]
 8002138:	4413      	add	r3, r2
 800213a:	72fb      	strb	r3, [r7, #11]
	  break;
 800213c:	e00e      	b.n	800215c <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 800213e:	7aba      	ldrb	r2, [r7, #10]
 8002140:	7cfb      	ldrb	r3, [r7, #19]
 8002142:	4413      	add	r3, r2
 8002144:	72bb      	strb	r3, [r7, #10]
	  break;
 8002146:	e009      	b.n	800215c <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8002148:	7afa      	ldrb	r2, [r7, #11]
 800214a:	7cfb      	ldrb	r3, [r7, #19]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	72fb      	strb	r3, [r7, #11]
	  break;
 8002150:	e004      	b.n	800215c <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8002152:	7aba      	ldrb	r2, [r7, #10]
 8002154:	7cfb      	ldrb	r3, [r7, #19]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	72bb      	strb	r3, [r7, #10]
	  break;
 800215a:	bf00      	nop
      }
#else
      x += delta;
#endif

      sum += delta;    
 800215c:	7dfa      	ldrb	r2, [r7, #23]
 800215e:	7cfb      	ldrb	r3, [r7, #19]
 8002160:	4413      	add	r3, r2
 8002162:	75fb      	strb	r3, [r7, #23]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8002164:	e7b8      	b.n	80020d8 <u8g2_draw_string+0x1c>
      break;
 8002166:	bf00      	nop
    }
  }
  return sum;
 8002168:	7dfb      	ldrb	r3, [r7, #23]
}
 800216a:	4618      	mov	r0, r3
 800216c:	3718      	adds	r7, #24
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop

08002174 <u8g2_DrawUTF8>:
21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx  
*/
u8g2_uint_t u8g2_DrawUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	607b      	str	r3, [r7, #4]
 800217e:	460b      	mov	r3, r1
 8002180:	72fb      	strb	r3, [r7, #11]
 8002182:	4613      	mov	r3, r2
 8002184:	72bb      	strb	r3, [r7, #10]
  u8g2->u8x8.next_cb = u8x8_utf8_next;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	4a06      	ldr	r2, [pc, #24]	; (80021a4 <u8g2_DrawUTF8+0x30>)
 800218a:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 800218c:	7aba      	ldrb	r2, [r7, #10]
 800218e:	7af9      	ldrb	r1, [r7, #11]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	68f8      	ldr	r0, [r7, #12]
 8002194:	f7ff ff92 	bl	80020bc <u8g2_draw_string>
 8002198:	4603      	mov	r3, r0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	08002a41 	.word	0x08002a41

080021a8 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d05d      	beq.n	8002274 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f993 2075 	ldrsb.w	r2, [r3, #117]	; 0x75
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f993 2076 	ldrsb.w	r2, [r3, #118]	; 0x76
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d04d      	beq.n	8002276 <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d11c      	bne.n	800221e <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f993 3077 	ldrsb.w	r3, [r3, #119]	; 0x77
 80021f0:	429a      	cmp	r2, r3
 80021f2:	da05      	bge.n	8002200 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f993 2077 	ldrsb.w	r2, [r3, #119]	; 0x77
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f993 3078 	ldrsb.w	r3, [r3, #120]	; 0x78
 800220c:	429a      	cmp	r2, r3
 800220e:	dd32      	ble.n	8002276 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f993 2078 	ldrsb.w	r2, [r3, #120]	; 0x78
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 800221c:	e02b      	b.n	8002276 <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f993 3082 	ldrsb.w	r3, [r3, #130]	; 0x82
 8002224:	461a      	mov	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f993 3072 	ldrsb.w	r3, [r3, #114]	; 0x72
 800222c:	4619      	mov	r1, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 8002234:	440b      	add	r3, r1
 8002236:	429a      	cmp	r2, r3
 8002238:	da0d      	bge.n	8002256 <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f993 3072 	ldrsb.w	r3, [r3, #114]	; 0x72
 8002240:	b2da      	uxtb	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 8002248:	b2db      	uxtb	r3, r3
 800224a:	4413      	add	r3, r2
 800224c:	b2db      	uxtb	r3, r3
 800224e:	b25a      	sxtb	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 8002262:	429a      	cmp	r2, r3
 8002264:	dd07      	ble.n	8002276 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f993 2074 	ldrsb.w	r2, [r3, #116]	; 0x74
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 8002272:	e000      	b.n	8002276 <u8g2_UpdateRefHeight+0xce>
    return;
 8002274:	bf00      	nop
  }  
}
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	bc80      	pop	{r7}
 800227c:	4770      	bx	lr

0800227e <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 800227e:	b480      	push	{r7}
 8002280:	b083      	sub	sp, #12
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
  return 0;
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	bc80      	pop	{r7}
 8002290:	4770      	bx	lr
	...

08002294 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4a03      	ldr	r2, [pc, #12]	; (80022ac <u8g2_SetFontPosBaseline+0x18>)
 80022a0:	655a      	str	r2, [r3, #84]	; 0x54
}
 80022a2:	bf00      	nop
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bc80      	pop	{r7}
 80022aa:	4770      	bx	lr
 80022ac:	0800227f 	.word	0x0800227f

080022b0 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022be:	683a      	ldr	r2, [r7, #0]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d00b      	beq.n	80022dc <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	651a      	str	r2, [r3, #80]	; 0x50
    u8g2_read_font_info(&(u8g2->font_info), font);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	3368      	adds	r3, #104	; 0x68
 80022ce:	6839      	ldr	r1, [r7, #0]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff fabb 	bl	800184c <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f7ff ff66 	bl	80021a8 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 80022dc:	bf00      	nop
 80022de:	3708      	adds	r7, #8
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <u8g2_SetFontDirection>:
}



void u8g2_SetFontDirection(u8g2_t *u8g2, uint8_t dir)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	460b      	mov	r3, r1
 80022ee:	70fb      	strb	r3, [r7, #3]
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = dir;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	78fa      	ldrb	r2, [r7, #3]
 80022f4:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
#endif
}
 80022f8:	bf00      	nop
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bc80      	pop	{r7}
 8002300:	4770      	bx	lr

08002302 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8002302:	b480      	push	{r7}
 8002304:	b087      	sub	sp, #28
 8002306:	af00      	add	r7, sp, #0
 8002308:	60f8      	str	r0, [r7, #12]
 800230a:	60b9      	str	r1, [r7, #8]
 800230c:	4611      	mov	r1, r2
 800230e:	461a      	mov	r2, r3
 8002310:	460b      	mov	r3, r1
 8002312:	71fb      	strb	r3, [r7, #7]
 8002314:	4613      	mov	r3, r2
 8002316:	71bb      	strb	r3, [r7, #6]
  u8g2_uint_t a = *ap;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	75fb      	strb	r3, [r7, #23]
  u8g2_uint_t b;
  b  = a;
 800231e:	7dfb      	ldrb	r3, [r7, #23]
 8002320:	75bb      	strb	r3, [r7, #22]
  b += *len;
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	781a      	ldrb	r2, [r3, #0]
 8002326:	7dbb      	ldrb	r3, [r7, #22]
 8002328:	4413      	add	r3, r2
 800232a:	75bb      	strb	r3, [r7, #22]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 800232c:	7dfa      	ldrb	r2, [r7, #23]
 800232e:	7dbb      	ldrb	r3, [r7, #22]
 8002330:	429a      	cmp	r2, r3
 8002332:	d90b      	bls.n	800234c <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8002334:	7dfa      	ldrb	r2, [r7, #23]
 8002336:	79bb      	ldrb	r3, [r7, #6]
 8002338:	429a      	cmp	r2, r3
 800233a:	d205      	bcs.n	8002348 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 800233c:	79bb      	ldrb	r3, [r7, #6]
 800233e:	75bb      	strb	r3, [r7, #22]
      b--;
 8002340:	7dbb      	ldrb	r3, [r7, #22]
 8002342:	3b01      	subs	r3, #1
 8002344:	75bb      	strb	r3, [r7, #22]
 8002346:	e001      	b.n	800234c <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8002348:	79fb      	ldrb	r3, [r7, #7]
 800234a:	75fb      	strb	r3, [r7, #23]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 800234c:	7dfa      	ldrb	r2, [r7, #23]
 800234e:	79bb      	ldrb	r3, [r7, #6]
 8002350:	429a      	cmp	r2, r3
 8002352:	d301      	bcc.n	8002358 <u8g2_clip_intersection2+0x56>
    return 0;
 8002354:	2300      	movs	r3, #0
 8002356:	e01c      	b.n	8002392 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8002358:	7dba      	ldrb	r2, [r7, #22]
 800235a:	79fb      	ldrb	r3, [r7, #7]
 800235c:	429a      	cmp	r2, r3
 800235e:	d801      	bhi.n	8002364 <u8g2_clip_intersection2+0x62>
    return 0;
 8002360:	2300      	movs	r3, #0
 8002362:	e016      	b.n	8002392 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8002364:	7dfa      	ldrb	r2, [r7, #23]
 8002366:	79fb      	ldrb	r3, [r7, #7]
 8002368:	429a      	cmp	r2, r3
 800236a:	d201      	bcs.n	8002370 <u8g2_clip_intersection2+0x6e>
    a = c;
 800236c:	79fb      	ldrb	r3, [r7, #7]
 800236e:	75fb      	strb	r3, [r7, #23]
  if ( b > d )
 8002370:	7dba      	ldrb	r2, [r7, #22]
 8002372:	79bb      	ldrb	r3, [r7, #6]
 8002374:	429a      	cmp	r2, r3
 8002376:	d901      	bls.n	800237c <u8g2_clip_intersection2+0x7a>
    b = d;
 8002378:	79bb      	ldrb	r3, [r7, #6]
 800237a:	75bb      	strb	r3, [r7, #22]
  
  *ap = a;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	7dfa      	ldrb	r2, [r7, #23]
 8002380:	701a      	strb	r2, [r3, #0]
  b -= a;
 8002382:	7dba      	ldrb	r2, [r7, #22]
 8002384:	7dfb      	ldrb	r3, [r7, #23]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	75bb      	strb	r3, [r7, #22]
  *len = b;
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	7dba      	ldrb	r2, [r7, #22]
 800238e:	701a      	strb	r2, [r3, #0]
  return 1;
 8002390:	2301      	movs	r3, #1
}
 8002392:	4618      	mov	r0, r3
 8002394:	371c      	adds	r7, #28
 8002396:	46bd      	mov	sp, r7
 8002398:	bc80      	pop	{r7}
 800239a:	4770      	bx	lr

0800239c <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800239c:	b590      	push	{r4, r7, lr}
 800239e:	b085      	sub	sp, #20
 80023a0:	af02      	add	r7, sp, #8
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	4608      	mov	r0, r1
 80023a6:	4611      	mov	r1, r2
 80023a8:	461a      	mov	r2, r3
 80023aa:	4603      	mov	r3, r0
 80023ac:	70fb      	strb	r3, [r7, #3]
 80023ae:	460b      	mov	r3, r1
 80023b0:	70bb      	strb	r3, [r7, #2]
 80023b2:	4613      	mov	r3, r2
 80023b4:	707b      	strb	r3, [r7, #1]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023bc:	78ba      	ldrb	r2, [r7, #2]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	70bb      	strb	r3, [r7, #2]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80023c6:	7878      	ldrb	r0, [r7, #1]
 80023c8:	78ba      	ldrb	r2, [r7, #2]
 80023ca:	78f9      	ldrb	r1, [r7, #3]
 80023cc:	7e3b      	ldrb	r3, [r7, #24]
 80023ce:	9300      	str	r3, [sp, #0]
 80023d0:	4603      	mov	r3, r0
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	47a0      	blx	r4
}
 80023d6:	bf00      	nop
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd90      	pop	{r4, r7, pc}

080023de <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80023de:	b590      	push	{r4, r7, lr}
 80023e0:	b085      	sub	sp, #20
 80023e2:	af02      	add	r7, sp, #8
 80023e4:	6078      	str	r0, [r7, #4]
 80023e6:	4608      	mov	r0, r1
 80023e8:	4611      	mov	r1, r2
 80023ea:	461a      	mov	r2, r3
 80023ec:	4603      	mov	r3, r0
 80023ee:	70fb      	strb	r3, [r7, #3]
 80023f0:	460b      	mov	r3, r1
 80023f2:	70bb      	strb	r3, [r7, #2]
 80023f4:	4613      	mov	r3, r2
 80023f6:	707b      	strb	r3, [r7, #1]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d06d      	beq.n	80024de <u8g2_DrawHVLine+0x100>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8002402:	787b      	ldrb	r3, [r7, #1]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d06a      	beq.n	80024de <u8g2_DrawHVLine+0x100>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8002408:	787b      	ldrb	r3, [r7, #1]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d918      	bls.n	8002440 <u8g2_DrawHVLine+0x62>
      {
	if ( dir == 2 )
 800240e:	7e3b      	ldrb	r3, [r7, #24]
 8002410:	2b02      	cmp	r3, #2
 8002412:	d109      	bne.n	8002428 <u8g2_DrawHVLine+0x4a>
	{
	  x -= len;
 8002414:	78fa      	ldrb	r2, [r7, #3]
 8002416:	787b      	ldrb	r3, [r7, #1]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	b2db      	uxtb	r3, r3
 800241c:	70fb      	strb	r3, [r7, #3]
	  x++;
 800241e:	78fb      	ldrb	r3, [r7, #3]
 8002420:	3301      	adds	r3, #1
 8002422:	b2db      	uxtb	r3, r3
 8002424:	70fb      	strb	r3, [r7, #3]
 8002426:	e00b      	b.n	8002440 <u8g2_DrawHVLine+0x62>
	}
	else if ( dir == 3 )
 8002428:	7e3b      	ldrb	r3, [r7, #24]
 800242a:	2b03      	cmp	r3, #3
 800242c:	d108      	bne.n	8002440 <u8g2_DrawHVLine+0x62>
	{
	  y -= len;
 800242e:	78ba      	ldrb	r2, [r7, #2]
 8002430:	787b      	ldrb	r3, [r7, #1]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	b2db      	uxtb	r3, r3
 8002436:	70bb      	strb	r3, [r7, #2]
	  y++;
 8002438:	78bb      	ldrb	r3, [r7, #2]
 800243a:	3301      	adds	r3, #1
 800243c:	b2db      	uxtb	r3, r3
 800243e:	70bb      	strb	r3, [r7, #2]
	}
      }
      dir &= 1;  
 8002440:	7e3b      	ldrb	r3, [r7, #24]
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	763b      	strb	r3, [r7, #24]
      
      /* clip against the user window */
      if ( dir == 0 )
 8002448:	7e3b      	ldrb	r3, [r7, #24]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d119      	bne.n	8002482 <u8g2_DrawHVLine+0xa4>
      {
	if ( y < u8g2->user_y0 )
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8002454:	78bb      	ldrb	r3, [r7, #2]
 8002456:	429a      	cmp	r2, r3
 8002458:	d838      	bhi.n	80024cc <u8g2_DrawHVLine+0xee>
	  return;
	if ( y >= u8g2->user_y1 )
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8002460:	78bb      	ldrb	r3, [r7, #2]
 8002462:	429a      	cmp	r2, r3
 8002464:	d934      	bls.n	80024d0 <u8g2_DrawHVLine+0xf2>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002472:	1c79      	adds	r1, r7, #1
 8002474:	1cf8      	adds	r0, r7, #3
 8002476:	f7ff ff44 	bl	8002302 <u8g2_clip_intersection2>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d119      	bne.n	80024b4 <u8g2_DrawHVLine+0xd6>
	  return;
 8002480:	e02d      	b.n	80024de <u8g2_DrawHVLine+0x100>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8002488:	78fb      	ldrb	r3, [r7, #3]
 800248a:	429a      	cmp	r2, r3
 800248c:	d822      	bhi.n	80024d4 <u8g2_DrawHVLine+0xf6>
	  return;
	if ( x >= u8g2->user_x1 )
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8002494:	78fb      	ldrb	r3, [r7, #3]
 8002496:	429a      	cmp	r2, r3
 8002498:	d91e      	bls.n	80024d8 <u8g2_DrawHVLine+0xfa>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80024a6:	1c79      	adds	r1, r7, #1
 80024a8:	1cb8      	adds	r0, r7, #2
 80024aa:	f7ff ff2a 	bl	8002302 <u8g2_clip_intersection2>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d013      	beq.n	80024dc <u8g2_DrawHVLine+0xfe>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024b8:	689c      	ldr	r4, [r3, #8]
 80024ba:	78f9      	ldrb	r1, [r7, #3]
 80024bc:	78ba      	ldrb	r2, [r7, #2]
 80024be:	7878      	ldrb	r0, [r7, #1]
 80024c0:	7e3b      	ldrb	r3, [r7, #24]
 80024c2:	9300      	str	r3, [sp, #0]
 80024c4:	4603      	mov	r3, r0
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	47a0      	blx	r4
 80024ca:	e008      	b.n	80024de <u8g2_DrawHVLine+0x100>
	  return;
 80024cc:	bf00      	nop
 80024ce:	e006      	b.n	80024de <u8g2_DrawHVLine+0x100>
	  return;
 80024d0:	bf00      	nop
 80024d2:	e004      	b.n	80024de <u8g2_DrawHVLine+0x100>
	  return;
 80024d4:	bf00      	nop
 80024d6:	e002      	b.n	80024de <u8g2_DrawHVLine+0x100>
	  return;
 80024d8:	bf00      	nop
 80024da:	e000      	b.n	80024de <u8g2_DrawHVLine+0x100>
	  return;
 80024dc:	bf00      	nop
    }
}
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd90      	pop	{r4, r7, pc}

080024e4 <u8g2_DrawHLine>:

void u8g2_DrawHLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af02      	add	r7, sp, #8
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	4608      	mov	r0, r1
 80024ee:	4611      	mov	r1, r2
 80024f0:	461a      	mov	r2, r3
 80024f2:	4603      	mov	r3, r0
 80024f4:	70fb      	strb	r3, [r7, #3]
 80024f6:	460b      	mov	r3, r1
 80024f8:	70bb      	strb	r3, [r7, #2]
 80024fa:	4613      	mov	r3, r2
 80024fc:	707b      	strb	r3, [r7, #1]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 0);
 80024fe:	7878      	ldrb	r0, [r7, #1]
 8002500:	78ba      	ldrb	r2, [r7, #2]
 8002502:	78f9      	ldrb	r1, [r7, #3]
 8002504:	2300      	movs	r3, #0
 8002506:	9300      	str	r3, [sp, #0]
 8002508:	4603      	mov	r3, r0
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f7ff ff67 	bl	80023de <u8g2_DrawHVLine>
}
 8002510:	bf00      	nop
 8002512:	3708      	adds	r7, #8
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}

08002518 <u8g2_DrawVLine>:

void u8g2_DrawVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af02      	add	r7, sp, #8
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	4608      	mov	r0, r1
 8002522:	4611      	mov	r1, r2
 8002524:	461a      	mov	r2, r3
 8002526:	4603      	mov	r3, r0
 8002528:	70fb      	strb	r3, [r7, #3]
 800252a:	460b      	mov	r3, r1
 800252c:	70bb      	strb	r3, [r7, #2]
 800252e:	4613      	mov	r3, r2
 8002530:	707b      	strb	r3, [r7, #1]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+1, y+len) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
 8002532:	7878      	ldrb	r0, [r7, #1]
 8002534:	78ba      	ldrb	r2, [r7, #2]
 8002536:	78f9      	ldrb	r1, [r7, #3]
 8002538:	2301      	movs	r3, #1
 800253a:	9300      	str	r3, [sp, #0]
 800253c:	4603      	mov	r3, r0
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f7ff ff4d 	bl	80023de <u8g2_DrawHVLine>
}
 8002544:	bf00      	nop
 8002546:	3708      	adds	r7, #8
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	460b      	mov	r3, r1
 8002556:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	78fa      	ldrb	r2, [r7, #3]
 800255c:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
  if ( color >= 3 )
 8002560:	78fb      	ldrb	r3, [r7, #3]
 8002562:	2b02      	cmp	r3, #2
 8002564:	d903      	bls.n	800256e <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2201      	movs	r2, #1
 800256a:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
}
 800256e:	bf00      	nop
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	bc80      	pop	{r7}
 8002576:	4770      	bx	lr

08002578 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8002578:	b490      	push	{r4, r7}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	4604      	mov	r4, r0
 8002580:	4608      	mov	r0, r1
 8002582:	4611      	mov	r1, r2
 8002584:	461a      	mov	r2, r3
 8002586:	4623      	mov	r3, r4
 8002588:	71fb      	strb	r3, [r7, #7]
 800258a:	4603      	mov	r3, r0
 800258c:	71bb      	strb	r3, [r7, #6]
 800258e:	460b      	mov	r3, r1
 8002590:	717b      	strb	r3, [r7, #5]
 8002592:	4613      	mov	r3, r2
 8002594:	713b      	strb	r3, [r7, #4]
  if ( v0 < a1 )		// v0 <= a1
 8002596:	797a      	ldrb	r2, [r7, #5]
 8002598:	79bb      	ldrb	r3, [r7, #6]
 800259a:	429a      	cmp	r2, r3
 800259c:	d20d      	bcs.n	80025ba <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 800259e:	793a      	ldrb	r2, [r7, #4]
 80025a0:	79fb      	ldrb	r3, [r7, #7]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d901      	bls.n	80025aa <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e014      	b.n	80025d4 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 80025aa:	797a      	ldrb	r2, [r7, #5]
 80025ac:	793b      	ldrb	r3, [r7, #4]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d901      	bls.n	80025b6 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e00e      	b.n	80025d4 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 80025b6:	2300      	movs	r3, #0
 80025b8:	e00c      	b.n	80025d4 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 80025ba:	793a      	ldrb	r2, [r7, #4]
 80025bc:	79fb      	ldrb	r3, [r7, #7]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d907      	bls.n	80025d2 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 80025c2:	797a      	ldrb	r2, [r7, #5]
 80025c4:	793b      	ldrb	r3, [r7, #4]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d901      	bls.n	80025ce <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e002      	b.n	80025d4 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 80025ce:	2300      	movs	r3, #0
 80025d0:	e000      	b.n	80025d4 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 80025d2:	2300      	movs	r3, #0
    }
  }
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3708      	adds	r7, #8
 80025d8:	46bd      	mov	sp, r7
 80025da:	bc90      	pop	{r4, r7}
 80025dc:	4770      	bx	lr

080025de <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	b082      	sub	sp, #8
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
 80025e6:	4608      	mov	r0, r1
 80025e8:	4611      	mov	r1, r2
 80025ea:	461a      	mov	r2, r3
 80025ec:	4603      	mov	r3, r0
 80025ee:	70fb      	strb	r3, [r7, #3]
 80025f0:	460b      	mov	r3, r1
 80025f2:	70bb      	strb	r3, [r7, #2]
 80025f4:	4613      	mov	r3, r2
 80025f6:	707b      	strb	r3, [r7, #1]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f893 0047 	ldrb.w	r0, [r3, #71]	; 0x47
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
 8002604:	7c3b      	ldrb	r3, [r7, #16]
 8002606:	78ba      	ldrb	r2, [r7, #2]
 8002608:	f7ff ffb6 	bl	8002578 <u8g2_is_intersection_decision_tree>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <u8g2_IsIntersection+0x38>
    return 0; 
 8002612:	2300      	movs	r3, #0
 8002614:	e00a      	b.n	800262c <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 0045 	ldrb.w	r0, [r3, #69]	; 0x45
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
 8002622:	787b      	ldrb	r3, [r7, #1]
 8002624:	78fa      	ldrb	r2, [r7, #3]
 8002626:	f7ff ffa7 	bl	8002578 <u8g2_is_intersection_decision_tree>
 800262a:	4603      	mov	r3, r0
}
 800262c:	4618      	mov	r0, r3
 800262e:	3708      	adds	r7, #8
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <u8g2_ll_hvline_horizontal_right_lsb>:
    all clipping done
*/

/* SH1122, LD7032, ST7920, ST7986, LC7981, T6963, SED1330, RA8835, MAX7219, LS0 */ 
void u8g2_ll_hvline_horizontal_right_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002634:	b480      	push	{r7}
 8002636:	b087      	sub	sp, #28
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	4608      	mov	r0, r1
 800263e:	4611      	mov	r1, r2
 8002640:	461a      	mov	r2, r3
 8002642:	4603      	mov	r3, r0
 8002644:	70fb      	strb	r3, [r7, #3]
 8002646:	460b      	mov	r3, r1
 8002648:	70bb      	strb	r3, [r7, #2]
 800264a:	4613      	mov	r3, r2
 800264c:	707b      	strb	r3, [r7, #1]
  uint16_t offset;
  uint8_t *ptr;
  uint8_t bit_pos;
  uint8_t mask;
  uint8_t tile_width = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	7c1b      	ldrb	r3, [r3, #16]
 8002654:	74bb      	strb	r3, [r7, #18]

  bit_pos = x;		/* overflow truncate is ok here... */
 8002656:	78fb      	ldrb	r3, [r7, #3]
 8002658:	747b      	strb	r3, [r7, #17]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 800265a:	7c7b      	ldrb	r3, [r7, #17]
 800265c:	f003 0307 	and.w	r3, r3, #7
 8002660:	747b      	strb	r3, [r7, #17]
  mask = 128;
 8002662:	2380      	movs	r3, #128	; 0x80
 8002664:	74fb      	strb	r3, [r7, #19]
  mask >>= bit_pos;
 8002666:	7cfa      	ldrb	r2, [r7, #19]
 8002668:	7c7b      	ldrb	r3, [r7, #17]
 800266a:	fa42 f303 	asr.w	r3, r2, r3
 800266e:	74fb      	strb	r3, [r7, #19]

  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8002670:	78bb      	ldrb	r3, [r7, #2]
 8002672:	81fb      	strh	r3, [r7, #14]
  offset *= tile_width;
 8002674:	7cbb      	ldrb	r3, [r7, #18]
 8002676:	b29b      	uxth	r3, r3
 8002678:	89fa      	ldrh	r2, [r7, #14]
 800267a:	fb02 f303 	mul.w	r3, r2, r3
 800267e:	81fb      	strh	r3, [r7, #14]
  offset += x>>3;
 8002680:	78fb      	ldrb	r3, [r7, #3]
 8002682:	08db      	lsrs	r3, r3, #3
 8002684:	b2db      	uxtb	r3, r3
 8002686:	b29a      	uxth	r2, r3
 8002688:	89fb      	ldrh	r3, [r7, #14]
 800268a:	4413      	add	r3, r2
 800268c:	81fb      	strh	r3, [r7, #14]
  ptr = u8g2->tile_buf_ptr;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002692:	617b      	str	r3, [r7, #20]
  ptr += offset;
 8002694:	89fb      	ldrh	r3, [r7, #14]
 8002696:	697a      	ldr	r2, [r7, #20]
 8002698:	4413      	add	r3, r2
 800269a:	617b      	str	r3, [r7, #20]
  
  if ( dir == 0 )
 800269c:	f897 3020 	ldrb.w	r3, [r7, #32]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d129      	bne.n	80026f8 <u8g2_ll_hvline_horizontal_right_lsb+0xc4>
  {
      
    do
    {

      if ( u8g2->draw_color <= 1 )
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d806      	bhi.n	80026bc <u8g2_ll_hvline_horizontal_right_lsb+0x88>
	*ptr |= mask;
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	781a      	ldrb	r2, [r3, #0]
 80026b2:	7cfb      	ldrb	r3, [r7, #19]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	b2da      	uxtb	r2, r3
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	701a      	strb	r2, [r3, #0]
      if ( u8g2->draw_color != 1 )
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d006      	beq.n	80026d4 <u8g2_ll_hvline_horizontal_right_lsb+0xa0>
	*ptr ^= mask;
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	781a      	ldrb	r2, [r3, #0]
 80026ca:	7cfb      	ldrb	r3, [r7, #19]
 80026cc:	4053      	eors	r3, r2
 80026ce:	b2da      	uxtb	r2, r3
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	701a      	strb	r2, [r3, #0]
      
      mask >>= 1;
 80026d4:	7cfb      	ldrb	r3, [r7, #19]
 80026d6:	085b      	lsrs	r3, r3, #1
 80026d8:	74fb      	strb	r3, [r7, #19]
      if ( mask == 0 )
 80026da:	7cfb      	ldrb	r3, [r7, #19]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d104      	bne.n	80026ea <u8g2_ll_hvline_horizontal_right_lsb+0xb6>
      {
	mask = 128;
 80026e0:	2380      	movs	r3, #128	; 0x80
 80026e2:	74fb      	strb	r3, [r7, #19]
        ptr++;
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	3301      	adds	r3, #1
 80026e8:	617b      	str	r3, [r7, #20]
      }
      
      //x++;
      len--;
 80026ea:	787b      	ldrb	r3, [r7, #1]
 80026ec:	3b01      	subs	r3, #1
 80026ee:	707b      	strb	r3, [r7, #1]
    } while( len != 0 );
 80026f0:	787b      	ldrb	r3, [r7, #1]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1d6      	bne.n	80026a4 <u8g2_ll_hvline_horizontal_right_lsb+0x70>
      ptr += tile_width;
      //y++;
      len--;
    } while( len != 0 );
  }
}
 80026f6:	e021      	b.n	800273c <u8g2_ll_hvline_horizontal_right_lsb+0x108>
      if ( u8g2->draw_color <= 1 )
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d806      	bhi.n	8002710 <u8g2_ll_hvline_horizontal_right_lsb+0xdc>
	*ptr |= mask;
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	781a      	ldrb	r2, [r3, #0]
 8002706:	7cfb      	ldrb	r3, [r7, #19]
 8002708:	4313      	orrs	r3, r2
 800270a:	b2da      	uxtb	r2, r3
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	701a      	strb	r2, [r3, #0]
      if ( u8g2->draw_color != 1 )
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8002716:	2b01      	cmp	r3, #1
 8002718:	d006      	beq.n	8002728 <u8g2_ll_hvline_horizontal_right_lsb+0xf4>
	*ptr ^= mask;
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	781a      	ldrb	r2, [r3, #0]
 800271e:	7cfb      	ldrb	r3, [r7, #19]
 8002720:	4053      	eors	r3, r2
 8002722:	b2da      	uxtb	r2, r3
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	701a      	strb	r2, [r3, #0]
      ptr += tile_width;
 8002728:	7cbb      	ldrb	r3, [r7, #18]
 800272a:	697a      	ldr	r2, [r7, #20]
 800272c:	4413      	add	r3, r2
 800272e:	617b      	str	r3, [r7, #20]
      len--;
 8002730:	787b      	ldrb	r3, [r7, #1]
 8002732:	3b01      	subs	r3, #1
 8002734:	707b      	strb	r3, [r7, #1]
    } while( len != 0 );
 8002736:	787b      	ldrb	r3, [r7, #1]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d1dd      	bne.n	80026f8 <u8g2_ll_hvline_horizontal_right_lsb+0xc4>
}
 800273c:	bf00      	nop
 800273e:	371c      	adds	r7, #28
 8002740:	46bd      	mov	sp, r7
 8002742:	bc80      	pop	{r7}
 8002744:	4770      	bx	lr

08002746 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b082      	sub	sp, #8
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  u8g2->clip_y0 = 0;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	22ff      	movs	r2, #255	; 0xff
 8002762:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	22ff      	movs	r2, #255	; 0xff
 800276a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  
  u8g2->cb->update_page_win(u8g2);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	4798      	blx	r3
}
 8002778:	bf00      	nop
 800277a:	3708      	adds	r7, #8
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	603b      	str	r3, [r7, #0]
 800278c:	4613      	mov	r3, r2
 800278e:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2200      	movs	r2, #0
 8002794:	651a      	str	r2, [r3, #80]	; 0x50
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	631a      	str	r2, [r3, #48]	; 0x30
  
  u8g2->tile_buf_ptr = buf;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	68ba      	ldr	r2, [r7, #8]
 80027a0:	639a      	str	r2, [r3, #56]	; 0x38
  u8g2->tile_buf_height = tile_buf_height;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	79fa      	ldrb	r2, [r7, #7]
 80027a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  u8g2->tile_curr_row = 0;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
  u8g2->bitmap_transparency = 0;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
  
  u8g2->draw_color = 1;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2201      	movs	r2, #1
 80027c6:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
  u8g2->is_auto_page_clear = 1;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2201      	movs	r2, #1
 80027ce:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
  
  u8g2->cb = u8g2_cb;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->cb->update_dimension(u8g2);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68f8      	ldr	r0, [r7, #12]
 80027e0:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	f7ff ffaf 	bl	8002746 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 80027e8:	68f8      	ldr	r0, [r7, #12]
 80027ea:	f7ff fd53 	bl	8002294 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
#endif
}
 80027f6:	bf00      	nop
 80027f8:	3710      	adds	r7, #16
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 80027fe:	b480      	push	{r7}
 8002800:	b085      	sub	sp, #20
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002812:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8002814:	7bfb      	ldrb	r3, [r7, #15]
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_height = t;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	7bfa      	ldrb	r2, [r7, #15]
 800281e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  
  t = display_info->tile_width;
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	7c1b      	ldrb	r3, [r3, #16]
 8002826:	73fb      	strb	r3, [r7, #15]
#ifndef U8G2_16BIT
  if ( t >= 32 )
 8002828:	7bfb      	ldrb	r3, [r7, #15]
 800282a:	2b1f      	cmp	r3, #31
 800282c:	d901      	bls.n	8002832 <u8g2_update_dimension_common+0x34>
    t = 31;
 800282e:	231f      	movs	r3, #31
 8002830:	73fb      	strb	r3, [r7, #15]
#endif
  t *= 8;
 8002832:	7bfb      	ldrb	r3, [r7, #15]
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_width = t;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	7bfa      	ldrb	r2, [r7, #15]
 800283c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_curr_row;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002846:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8002848:	7bfb      	ldrb	r3, [r7, #15]
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_curr_row = t;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	7bfa      	ldrb	r2, [r7, #15]
 8002852:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  t = u8g2->tile_buf_height;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800285c:	73fb      	strb	r3, [r7, #15]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 800285e:	7bfb      	ldrb	r3, [r7, #15]
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	f892 203d 	ldrb.w	r2, [r2, #61]	; 0x3d
 8002866:	4413      	add	r3, r2
 8002868:	68ba      	ldr	r2, [r7, #8]
 800286a:	7c52      	ldrb	r2, [r2, #17]
 800286c:	4293      	cmp	r3, r2
 800286e:	dd06      	ble.n	800287e <u8g2_update_dimension_common+0x80>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	7c5a      	ldrb	r2, [r3, #17]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 800287e:	7bfb      	ldrb	r3, [r7, #15]
 8002880:	00db      	lsls	r3, r3, #3
 8002882:	73fb      	strb	r3, [r7, #15]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->buf_y1 = u8g2->buf_y0;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 80028a2:	7bfb      	ldrb	r3, [r7, #15]
 80028a4:	4413      	add	r3, r2
 80028a6:	b2da      	uxtb	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#else
  u8g2->width = 240;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	22f0      	movs	r2, #240	; 0xf0
 80028b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  if ( display_info->pixel_width <= 240 )
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	8a9b      	ldrh	r3, [r3, #20]
 80028ba:	2bf0      	cmp	r3, #240	; 0xf0
 80028bc:	d805      	bhi.n	80028ca <u8g2_update_dimension_common+0xcc>
    u8g2->width = display_info->pixel_width;
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	8a9b      	ldrh	r3, [r3, #20]
 80028c2:	b2da      	uxtb	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->height = display_info->pixel_height;
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	8adb      	ldrh	r3, [r3, #22]
 80028ce:	b2da      	uxtb	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
#endif

}
 80028d6:	bf00      	nop
 80028d8:	3714      	adds	r7, #20
 80028da:	46bd      	mov	sp, r7
 80028dc:	bc80      	pop	{r7}
 80028de:	4770      	bx	lr

080028e0 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af02      	add	r7, sp, #8
 80028e6:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f893 1049 	ldrb.w	r1, [r3, #73]	; 0x49
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f893 004a 	ldrb.w	r0, [r3, #74]	; 0x4a
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002900:	9300      	str	r3, [sp, #0]
 8002902:	4603      	mov	r3, r0
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f7ff fe6a 	bl	80025de <u8g2_IsIntersection>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d104      	bne.n	800291a <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8002918:	e03b      	b.n	8002992 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2201      	movs	r2, #1
 800291e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800292e:	429a      	cmp	r2, r3
 8002930:	d205      	bcs.n	800293e <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800294a:	429a      	cmp	r2, r3
 800294c:	d905      	bls.n	800295a <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8002966:	429a      	cmp	r2, r3
 8002968:	d205      	bcs.n	8002976 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002982:	429a      	cmp	r2, r3
 8002984:	d905      	bls.n	8002992 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
}
 8002992:	bf00      	nop
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	b082      	sub	sp, #8
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f7ff ff2b 	bl	80027fe <u8g2_update_dimension_common>
}
 80029a8:	bf00      	nop
 80029aa:	3708      	adds	r7, #8
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
  
  u8g2->user_y0 = u8g2->buf_y0;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  u8g2->user_y1 = u8g2->buf_y1;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f7ff ff7b 	bl	80028e0 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 80029ea:	bf00      	nop
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b084      	sub	sp, #16
 80029f6:	af02      	add	r7, sp, #8
 80029f8:	6078      	str	r0, [r7, #4]
 80029fa:	4608      	mov	r0, r1
 80029fc:	4611      	mov	r1, r2
 80029fe:	461a      	mov	r2, r3
 8002a00:	4603      	mov	r3, r0
 8002a02:	70fb      	strb	r3, [r7, #3]
 8002a04:	460b      	mov	r3, r1
 8002a06:	70bb      	strb	r3, [r7, #2]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	707b      	strb	r3, [r7, #1]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8002a0c:	7878      	ldrb	r0, [r7, #1]
 8002a0e:	78ba      	ldrb	r2, [r7, #2]
 8002a10:	78f9      	ldrb	r1, [r7, #3]
 8002a12:	7c3b      	ldrb	r3, [r7, #16]
 8002a14:	9300      	str	r3, [sp, #0]
 8002a16:	4603      	mov	r3, r0
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f7ff fcbf 	bl	800239c <u8g2_draw_hv_line_2dir>
}
 8002a1e:	bf00      	nop
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8002a26:	b480      	push	{r7}
 8002a28:	b083      	sub	sp, #12
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8002a36:	bf00      	nop
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bc80      	pop	{r7}
 8002a3e:	4770      	bx	lr

08002a40 <u8x8_utf8_next>:
    0x0fffe: no glyph, just continue
    0x0ffff: end of string
    anything else: The decoded encoding
*/
uint16_t u8x8_utf8_next(u8x8_t *u8x8, uint8_t b)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	460b      	mov	r3, r1
 8002a4a:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' )	/* '\n' terminates the string to support the string list procedures */
 8002a4c:	78fb      	ldrb	r3, [r7, #3]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d002      	beq.n	8002a58 <u8x8_utf8_next+0x18>
 8002a52:	78fb      	ldrb	r3, [r7, #3]
 8002a54:	2b0a      	cmp	r3, #10
 8002a56:	d102      	bne.n	8002a5e <u8x8_utf8_next+0x1e>
    return 0x0ffff;	/* end of string detected, pending UTF8 is discarded */
 8002a58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a5c:	e06e      	b.n	8002b3c <u8x8_utf8_next+0xfc>
  if ( u8x8->utf8_state == 0 )
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d145      	bne.n	8002af4 <u8x8_utf8_next+0xb4>
  {
    if ( b >= 0xfc )	/* 6 byte sequence */
 8002a68:	78fb      	ldrb	r3, [r7, #3]
 8002a6a:	2bfb      	cmp	r3, #251	; 0xfb
 8002a6c:	d908      	bls.n	8002a80 <u8x8_utf8_next+0x40>
    {
      u8x8->utf8_state = 5;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2205      	movs	r2, #5
 8002a72:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
      b &= 1;
 8002a76:	78fb      	ldrb	r3, [r7, #3]
 8002a78:	f003 0301 	and.w	r3, r3, #1
 8002a7c:	70fb      	strb	r3, [r7, #3]
 8002a7e:	e032      	b.n	8002ae6 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf8 )
 8002a80:	78fb      	ldrb	r3, [r7, #3]
 8002a82:	2bf7      	cmp	r3, #247	; 0xf7
 8002a84:	d908      	bls.n	8002a98 <u8x8_utf8_next+0x58>
    {
      u8x8->utf8_state = 4;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2204      	movs	r2, #4
 8002a8a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
      b &= 3;
 8002a8e:	78fb      	ldrb	r3, [r7, #3]
 8002a90:	f003 0303 	and.w	r3, r3, #3
 8002a94:	70fb      	strb	r3, [r7, #3]
 8002a96:	e026      	b.n	8002ae6 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf0 )
 8002a98:	78fb      	ldrb	r3, [r7, #3]
 8002a9a:	2bef      	cmp	r3, #239	; 0xef
 8002a9c:	d908      	bls.n	8002ab0 <u8x8_utf8_next+0x70>
    {
      u8x8->utf8_state = 3;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2203      	movs	r2, #3
 8002aa2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
      b &= 7;      
 8002aa6:	78fb      	ldrb	r3, [r7, #3]
 8002aa8:	f003 0307 	and.w	r3, r3, #7
 8002aac:	70fb      	strb	r3, [r7, #3]
 8002aae:	e01a      	b.n	8002ae6 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xe0 )
 8002ab0:	78fb      	ldrb	r3, [r7, #3]
 8002ab2:	2bdf      	cmp	r3, #223	; 0xdf
 8002ab4:	d908      	bls.n	8002ac8 <u8x8_utf8_next+0x88>
    {
      u8x8->utf8_state = 2;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2202      	movs	r2, #2
 8002aba:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
      b &= 15;
 8002abe:	78fb      	ldrb	r3, [r7, #3]
 8002ac0:	f003 030f 	and.w	r3, r3, #15
 8002ac4:	70fb      	strb	r3, [r7, #3]
 8002ac6:	e00e      	b.n	8002ae6 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xc0 )
 8002ac8:	78fb      	ldrb	r3, [r7, #3]
 8002aca:	2bbf      	cmp	r3, #191	; 0xbf
 8002acc:	d908      	bls.n	8002ae0 <u8x8_utf8_next+0xa0>
    {
      u8x8->utf8_state = 1;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
      b &= 0x01f;
 8002ad6:	78fb      	ldrb	r3, [r7, #3]
 8002ad8:	f003 031f 	and.w	r3, r3, #31
 8002adc:	70fb      	strb	r3, [r7, #3]
 8002ade:	e002      	b.n	8002ae6 <u8x8_utf8_next+0xa6>
    }
    else
    {
      /* do nothing, just use the value as encoding */
      return b;
 8002ae0:	78fb      	ldrb	r3, [r7, #3]
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	e02a      	b.n	8002b3c <u8x8_utf8_next+0xfc>
    }
    u8x8->encoding = b;
 8002ae6:	78fb      	ldrb	r3, [r7, #3]
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	841a      	strh	r2, [r3, #32]
    return 0x0fffe;
 8002aee:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8002af2:	e023      	b.n	8002b3c <u8x8_utf8_next+0xfc>
  }
  else
  {
    u8x8->utf8_state--;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002afa:	3b01      	subs	r3, #1
 8002afc:	b2da      	uxtb	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    /* The case b < 0x080 (an illegal UTF8 encoding) is not checked here. */
    u8x8->encoding<<=6;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	8c1b      	ldrh	r3, [r3, #32]
 8002b08:	019b      	lsls	r3, r3, #6
 8002b0a:	b29a      	uxth	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	841a      	strh	r2, [r3, #32]
    b &= 0x03f;
 8002b10:	78fb      	ldrb	r3, [r7, #3]
 8002b12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b16:	70fb      	strb	r3, [r7, #3]
    u8x8->encoding |= b;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	8c1a      	ldrh	r2, [r3, #32]
 8002b1c:	78fb      	ldrb	r3, [r7, #3]
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	4313      	orrs	r3, r2
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	841a      	strh	r2, [r3, #32]
    if ( u8x8->utf8_state != 0 )
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d002      	beq.n	8002b38 <u8x8_utf8_next+0xf8>
      return 0x0fffe;	/* nothing to do yet */
 8002b32:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8002b36:	e001      	b.n	8002b3c <u8x8_utf8_next+0xfc>
  }
  return u8x8->encoding;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	8c1b      	ldrh	r3, [r3, #32]
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bc80      	pop	{r7}
 8002b44:	4770      	bx	lr

08002b46 <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002b46:	b590      	push	{r4, r7, lr}
 8002b48:	b085      	sub	sp, #20
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	60f8      	str	r0, [r7, #12]
 8002b4e:	460b      	mov	r3, r1
 8002b50:	607a      	str	r2, [r7, #4]
 8002b52:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	691c      	ldr	r4, [r3, #16]
 8002b58:	7afa      	ldrb	r2, [r7, #11]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2117      	movs	r1, #23
 8002b5e:	68f8      	ldr	r0, [r7, #12]
 8002b60:	47a0      	blx	r4
 8002b62:	4603      	mov	r3, r0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3714      	adds	r7, #20
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd90      	pop	{r4, r7, pc}

08002b6c <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	460b      	mov	r3, r1
 8002b76:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8002b78:	1cfb      	adds	r3, r7, #3
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	2101      	movs	r1, #1
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f7ff ffe1 	bl	8002b46 <u8x8_byte_SendBytes>
 8002b84:	4603      	mov	r3, r0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3708      	adds	r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8002b8e:	b590      	push	{r4, r7, lr}
 8002b90:	b083      	sub	sp, #12
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
 8002b96:	460b      	mov	r3, r1
 8002b98:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	68dc      	ldr	r4, [r3, #12]
 8002b9e:	78fa      	ldrb	r2, [r7, #3]
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	2115      	movs	r1, #21
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	47a0      	blx	r4
 8002ba8:	4603      	mov	r3, r0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd90      	pop	{r4, r7, pc}

08002bb2 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002bb2:	b590      	push	{r4, r7, lr}
 8002bb4:	b085      	sub	sp, #20
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	60f8      	str	r0, [r7, #12]
 8002bba:	460b      	mov	r3, r1
 8002bbc:	607a      	str	r2, [r7, #4]
 8002bbe:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	68dc      	ldr	r4, [r3, #12]
 8002bc4:	7afa      	ldrb	r2, [r7, #11]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2117      	movs	r1, #23
 8002bca:	68f8      	ldr	r0, [r7, #12]
 8002bcc:	47a0      	blx	r4
 8002bce:	4603      	mov	r3, r0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3714      	adds	r7, #20
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd90      	pop	{r4, r7, pc}

08002bd8 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8002bd8:	b590      	push	{r4, r7, lr}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68dc      	ldr	r4, [r3, #12]
 8002be4:	2300      	movs	r3, #0
 8002be6:	2200      	movs	r2, #0
 8002be8:	2118      	movs	r1, #24
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	47a0      	blx	r4
 8002bee:	4603      	mov	r3, r0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd90      	pop	{r4, r7, pc}

08002bf8 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8002bf8:	b590      	push	{r4, r7, lr}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	68dc      	ldr	r4, [r3, #12]
 8002c04:	2300      	movs	r3, #0
 8002c06:	2200      	movs	r2, #0
 8002c08:	2119      	movs	r1, #25
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	47a0      	blx	r4
 8002c0e:	4603      	mov	r3, r0
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd90      	pop	{r4, r7, pc}

08002c18 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8002c18:	b590      	push	{r4, r7, lr}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	73fb      	strb	r3, [r7, #15]
    data++;
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8002c2e:	7bfb      	ldrb	r3, [r7, #15]
 8002c30:	2b17      	cmp	r3, #23
 8002c32:	d017      	beq.n	8002c64 <u8x8_cad_SendSequence+0x4c>
 8002c34:	2b17      	cmp	r3, #23
 8002c36:	dc02      	bgt.n	8002c3e <u8x8_cad_SendSequence+0x26>
 8002c38:	2b15      	cmp	r3, #21
 8002c3a:	db37      	blt.n	8002cac <u8x8_cad_SendSequence+0x94>
 8002c3c:	e004      	b.n	8002c48 <u8x8_cad_SendSequence+0x30>
 8002c3e:	2b19      	cmp	r3, #25
 8002c40:	dd1e      	ble.n	8002c80 <u8x8_cad_SendSequence+0x68>
 8002c42:	2bfe      	cmp	r3, #254	; 0xfe
 8002c44:	d024      	beq.n	8002c90 <u8x8_cad_SendSequence+0x78>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8002c46:	e031      	b.n	8002cac <u8x8_cad_SendSequence+0x94>
	  v = *data;
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	68dc      	ldr	r4, [r3, #12]
 8002c52:	7bba      	ldrb	r2, [r7, #14]
 8002c54:	7bf9      	ldrb	r1, [r7, #15]
 8002c56:	2300      	movs	r3, #0
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	47a0      	blx	r4
	  data++;
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	3301      	adds	r3, #1
 8002c60:	603b      	str	r3, [r7, #0]
	  break;
 8002c62:	e022      	b.n	8002caa <u8x8_cad_SendSequence+0x92>
	  v = *data;
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8002c6a:	f107 030e 	add.w	r3, r7, #14
 8002c6e:	461a      	mov	r2, r3
 8002c70:	2101      	movs	r1, #1
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f7ff ff9d 	bl	8002bb2 <u8x8_cad_SendData>
	  data++;
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	603b      	str	r3, [r7, #0]
	  break;
 8002c7e:	e014      	b.n	8002caa <u8x8_cad_SendSequence+0x92>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	68dc      	ldr	r4, [r3, #12]
 8002c84:	7bf9      	ldrb	r1, [r7, #15]
 8002c86:	2300      	movs	r3, #0
 8002c88:	2200      	movs	r2, #0
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	47a0      	blx	r4
	  break;
 8002c8e:	e00c      	b.n	8002caa <u8x8_cad_SendSequence+0x92>
	  v = *data;
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8002c96:	7bbb      	ldrb	r3, [r7, #14]
 8002c98:	461a      	mov	r2, r3
 8002c9a:	2129      	movs	r1, #41	; 0x29
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 fa21 	bl	80030e4 <u8x8_gpio_call>
	  data++;
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	603b      	str	r3, [r7, #0]
	  break;
 8002ca8:	bf00      	nop
    cmd = *data;
 8002caa:	e7ba      	b.n	8002c22 <u8x8_cad_SendSequence+0xa>
	return;
 8002cac:	bf00      	nop
    }
  }
}
 8002cae:	3714      	adds	r7, #20
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd90      	pop	{r4, r7, pc}

08002cb4 <u8x8_cad_st7920_spi>:
}

/* cad procedure for the ST7920 in SPI mode */
/* u8x8_byte_SetDC is not used */
uint8_t u8x8_cad_st7920_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002cb4:	b590      	push	{r4, r7, lr}
 8002cb6:	b089      	sub	sp, #36	; 0x24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	607b      	str	r3, [r7, #4]
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	72fb      	strb	r3, [r7, #11]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	72bb      	strb	r3, [r7, #10]
  uint8_t b;
  uint8_t i;
  static uint8_t buf[16];
  uint8_t *ptr;
  
  switch(msg)
 8002cc6:	7afb      	ldrb	r3, [r7, #11]
 8002cc8:	3b14      	subs	r3, #20
 8002cca:	2b05      	cmp	r3, #5
 8002ccc:	f200 80a8 	bhi.w	8002e20 <u8x8_cad_st7920_spi+0x16c>
 8002cd0:	a201      	add	r2, pc, #4	; (adr r2, 8002cd8 <u8x8_cad_st7920_spi+0x24>)
 8002cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cd6:	bf00      	nop
 8002cd8:	08002e0f 	.word	0x08002e0f
 8002cdc:	08002cf1 	.word	0x08002cf1
 8002ce0:	08002d37 	.word	0x08002d37
 8002ce4:	08002d5f 	.word	0x08002d5f
 8002ce8:	08002e0f 	.word	0x08002e0f
 8002cec:	08002e0f 	.word	0x08002e0f
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SendByte(u8x8, 0x0f8);
 8002cf0:	21f8      	movs	r1, #248	; 0xf8
 8002cf2:	68f8      	ldr	r0, [r7, #12]
 8002cf4:	f7ff ff3a 	bl	8002b6c <u8x8_byte_SendByte>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, 1);
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	212c      	movs	r1, #44	; 0x2c
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	f000 f9f1 	bl	80030e4 <u8x8_gpio_call>
      u8x8_byte_SendByte(u8x8, arg_int & 0x0f0);
 8002d02:	7abb      	ldrb	r3, [r7, #10]
 8002d04:	f023 030f 	bic.w	r3, r3, #15
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f7ff ff2d 	bl	8002b6c <u8x8_byte_SendByte>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, 1);
 8002d12:	2201      	movs	r2, #1
 8002d14:	212c      	movs	r1, #44	; 0x2c
 8002d16:	68f8      	ldr	r0, [r7, #12]
 8002d18:	f000 f9e4 	bl	80030e4 <u8x8_gpio_call>
      u8x8_byte_SendByte(u8x8, arg_int << 4);
 8002d1c:	7abb      	ldrb	r3, [r7, #10]
 8002d1e:	011b      	lsls	r3, r3, #4
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	4619      	mov	r1, r3
 8002d24:	68f8      	ldr	r0, [r7, #12]
 8002d26:	f7ff ff21 	bl	8002b6c <u8x8_byte_SendByte>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, 1);
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	212c      	movs	r1, #44	; 0x2c
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	f000 f9d8 	bl	80030e4 <u8x8_gpio_call>
      break;
 8002d34:	e076      	b.n	8002e24 <u8x8_cad_st7920_spi+0x170>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, 0x0f8);
 8002d36:	21f8      	movs	r1, #248	; 0xf8
 8002d38:	68f8      	ldr	r0, [r7, #12]
 8002d3a:	f7ff ff17 	bl	8002b6c <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int & 0x0f0);
 8002d3e:	7abb      	ldrb	r3, [r7, #10]
 8002d40:	f023 030f 	bic.w	r3, r3, #15
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	4619      	mov	r1, r3
 8002d48:	68f8      	ldr	r0, [r7, #12]
 8002d4a:	f7ff ff0f 	bl	8002b6c <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int << 4);
 8002d4e:	7abb      	ldrb	r3, [r7, #10]
 8002d50:	011b      	lsls	r3, r3, #4
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	4619      	mov	r1, r3
 8002d56:	68f8      	ldr	r0, [r7, #12]
 8002d58:	f7ff ff08 	bl	8002b6c <u8x8_byte_SendByte>
      break;
 8002d5c:	e062      	b.n	8002e24 <u8x8_cad_st7920_spi+0x170>
    case U8X8_MSG_CAD_SEND_DATA:
    
      u8x8_byte_SendByte(u8x8, 0x0fa);
 8002d5e:	21fa      	movs	r1, #250	; 0xfa
 8002d60:	68f8      	ldr	r0, [r7, #12]
 8002d62:	f7ff ff03 	bl	8002b6c <u8x8_byte_SendByte>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, 1);
 8002d66:	2201      	movs	r2, #1
 8002d68:	212c      	movs	r1, #44	; 0x2c
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f000 f9ba 	bl	80030e4 <u8x8_gpio_call>

      /* this loop should be optimized: multiple bytes should be sent */
      /* u8x8_byte_SendBytes(u8x8, arg_int, arg_ptr); */
      data = (uint8_t *)arg_ptr;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	61fb      	str	r3, [r7, #28]
    
      /* the following loop increases speed by 20% */
      while( arg_int >= 8 )
 8002d74:	e026      	b.n	8002dc4 <u8x8_cad_st7920_spi+0x110>
      {
	i = 8;
 8002d76:	2308      	movs	r3, #8
 8002d78:	76fb      	strb	r3, [r7, #27]
	ptr = buf;
 8002d7a:	4b2d      	ldr	r3, [pc, #180]	; (8002e30 <u8x8_cad_st7920_spi+0x17c>)
 8002d7c:	617b      	str	r3, [r7, #20]
	do
	{
	  b = *data++;
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	1c5a      	adds	r2, r3, #1
 8002d82:	61fa      	str	r2, [r7, #28]
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	74fb      	strb	r3, [r7, #19]
	  *ptr++= b & 0x0f0;
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	1c5a      	adds	r2, r3, #1
 8002d8c:	617a      	str	r2, [r7, #20]
 8002d8e:	7cfa      	ldrb	r2, [r7, #19]
 8002d90:	f022 020f 	bic.w	r2, r2, #15
 8002d94:	b2d2      	uxtb	r2, r2
 8002d96:	701a      	strb	r2, [r3, #0]
	  b <<= 4;
 8002d98:	7cfb      	ldrb	r3, [r7, #19]
 8002d9a:	011b      	lsls	r3, r3, #4
 8002d9c:	74fb      	strb	r3, [r7, #19]
	  *ptr++= b;
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	1c5a      	adds	r2, r3, #1
 8002da2:	617a      	str	r2, [r7, #20]
 8002da4:	7cfa      	ldrb	r2, [r7, #19]
 8002da6:	701a      	strb	r2, [r3, #0]
	  i--;
 8002da8:	7efb      	ldrb	r3, [r7, #27]
 8002daa:	3b01      	subs	r3, #1
 8002dac:	76fb      	strb	r3, [r7, #27]
	} while( i > 0 );
 8002dae:	7efb      	ldrb	r3, [r7, #27]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d1e4      	bne.n	8002d7e <u8x8_cad_st7920_spi+0xca>
	arg_int -= 8;
 8002db4:	7abb      	ldrb	r3, [r7, #10]
 8002db6:	3b08      	subs	r3, #8
 8002db8:	72bb      	strb	r3, [r7, #10]
	u8x8_byte_SendBytes(u8x8, 16, buf); 
 8002dba:	4a1d      	ldr	r2, [pc, #116]	; (8002e30 <u8x8_cad_st7920_spi+0x17c>)
 8002dbc:	2110      	movs	r1, #16
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f7ff fec1 	bl	8002b46 <u8x8_byte_SendBytes>
      while( arg_int >= 8 )
 8002dc4:	7abb      	ldrb	r3, [r7, #10]
 8002dc6:	2b07      	cmp	r3, #7
 8002dc8:	d8d5      	bhi.n	8002d76 <u8x8_cad_st7920_spi+0xc2>
      }
      
    
      while( arg_int > 0 )
 8002dca:	e017      	b.n	8002dfc <u8x8_cad_st7920_spi+0x148>
      {
	b = *data;
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	74fb      	strb	r3, [r7, #19]
	u8x8_byte_SendByte(u8x8, b & 0x0f0);
 8002dd2:	7cfb      	ldrb	r3, [r7, #19]
 8002dd4:	f023 030f 	bic.w	r3, r3, #15
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	4619      	mov	r1, r3
 8002ddc:	68f8      	ldr	r0, [r7, #12]
 8002dde:	f7ff fec5 	bl	8002b6c <u8x8_byte_SendByte>
	u8x8_byte_SendByte(u8x8, b << 4);
 8002de2:	7cfb      	ldrb	r3, [r7, #19]
 8002de4:	011b      	lsls	r3, r3, #4
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	4619      	mov	r1, r3
 8002dea:	68f8      	ldr	r0, [r7, #12]
 8002dec:	f7ff febe 	bl	8002b6c <u8x8_byte_SendByte>
	data++;
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	3301      	adds	r3, #1
 8002df4:	61fb      	str	r3, [r7, #28]
	arg_int--;
 8002df6:	7abb      	ldrb	r3, [r7, #10]
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	72bb      	strb	r3, [r7, #10]
      while( arg_int > 0 )
 8002dfc:	7abb      	ldrb	r3, [r7, #10]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1e4      	bne.n	8002dcc <u8x8_cad_st7920_spi+0x118>
      }
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, 1);
 8002e02:	2201      	movs	r2, #1
 8002e04:	212c      	movs	r1, #44	; 0x2c
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	f000 f96c 	bl	80030e4 <u8x8_gpio_call>
      break;
 8002e0c:	e00a      	b.n	8002e24 <u8x8_cad_st7920_spi+0x170>
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	691c      	ldr	r4, [r3, #16]
 8002e12:	7aba      	ldrb	r2, [r7, #10]
 8002e14:	7af9      	ldrb	r1, [r7, #11]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	47a0      	blx	r4
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	e002      	b.n	8002e26 <u8x8_cad_st7920_spi+0x172>
    default:
      return 0;
 8002e20:	2300      	movs	r3, #0
 8002e22:	e000      	b.n	8002e26 <u8x8_cad_st7920_spi+0x172>
  }
  return 1;
 8002e24:	2301      	movs	r3, #1
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3724      	adds	r7, #36	; 0x24
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd90      	pop	{r4, r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	200004a4 	.word	0x200004a4

08002e34 <u8x8_d_st7920_common>:
  U8X8_END()             			/* end of sequence */
};


uint8_t u8x8_d_st7920_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b088      	sub	sp, #32
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	607b      	str	r3, [r7, #4]
 8002e3e:	460b      	mov	r3, r1
 8002e40:	72fb      	strb	r3, [r7, #11]
 8002e42:	4613      	mov	r3, r2
 8002e44:	72bb      	strb	r3, [r7, #10]
  uint8_t x, y, c, i;
  uint8_t *ptr;
  switch(msg)
 8002e46:	7afb      	ldrb	r3, [r7, #11]
 8002e48:	2b0b      	cmp	r3, #11
 8002e4a:	d00b      	beq.n	8002e64 <u8x8_d_st7920_common+0x30>
 8002e4c:	2b0f      	cmp	r3, #15
 8002e4e:	d016      	beq.n	8002e7e <u8x8_d_st7920_common+0x4a>
 8002e50:	2b0a      	cmp	r3, #10
 8002e52:	d169      	bne.n	8002f28 <u8x8_d_st7920_common+0xf4>
    /*
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      break;
    */
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8002e54:	68f8      	ldr	r0, [r7, #12]
 8002e56:	f000 f8a8 	bl	8002faa <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_st7920_init_seq);
 8002e5a:	4937      	ldr	r1, [pc, #220]	; (8002f38 <u8x8_d_st7920_common+0x104>)
 8002e5c:	68f8      	ldr	r0, [r7, #12]
 8002e5e:	f7ff fedb 	bl	8002c18 <u8x8_cad_SendSequence>
      break;
 8002e62:	e063      	b.n	8002f2c <u8x8_d_st7920_common+0xf8>
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8002e64:	7abb      	ldrb	r3, [r7, #10]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d104      	bne.n	8002e74 <u8x8_d_st7920_common+0x40>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7920_powersave0_seq);
 8002e6a:	4934      	ldr	r1, [pc, #208]	; (8002f3c <u8x8_d_st7920_common+0x108>)
 8002e6c:	68f8      	ldr	r0, [r7, #12]
 8002e6e:	f7ff fed3 	bl	8002c18 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7920_powersave1_seq);
      break;
 8002e72:	e05b      	b.n	8002f2c <u8x8_d_st7920_common+0xf8>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7920_powersave1_seq);
 8002e74:	4932      	ldr	r1, [pc, #200]	; (8002f40 <u8x8_d_st7920_common+0x10c>)
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f7ff fece 	bl	8002c18 <u8x8_cad_SendSequence>
      break;
 8002e7c:	e056      	b.n	8002f2c <u8x8_d_st7920_common+0xf8>
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      y = (((u8x8_tile_t *)arg_ptr)->y_pos);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	799b      	ldrb	r3, [r3, #6]
 8002e82:	77bb      	strb	r3, [r7, #30]
      y*=8;
 8002e84:	7fbb      	ldrb	r3, [r7, #30]
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	77bb      	strb	r3, [r7, #30]
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	795b      	ldrb	r3, [r3, #5]
 8002e8e:	77fb      	strb	r3, [r7, #31]
      x /= 2;		/* not sure whether this is a clever idea, problem is, the ST7920 can address only every second tile */
 8002e90:	7ffb      	ldrb	r3, [r7, #31]
 8002e92:	085b      	lsrs	r3, r3, #1
 8002e94:	77fb      	strb	r3, [r7, #31]
    
      if ( y >= 32 )	/* this is the adjustment for 128x64 displays */
 8002e96:	7fbb      	ldrb	r3, [r7, #30]
 8002e98:	2b1f      	cmp	r3, #31
 8002e9a:	d905      	bls.n	8002ea8 <u8x8_d_st7920_common+0x74>
      {
	y-=32;
 8002e9c:	7fbb      	ldrb	r3, [r7, #30]
 8002e9e:	3b20      	subs	r3, #32
 8002ea0:	77bb      	strb	r3, [r7, #30]
	x+=8;
 8002ea2:	7ffb      	ldrb	r3, [r7, #31]
 8002ea4:	3308      	adds	r3, #8
 8002ea6:	77fb      	strb	r3, [r7, #31]
      }
    
      u8x8_cad_StartTransfer(u8x8);
 8002ea8:	68f8      	ldr	r0, [r7, #12]
 8002eaa:	f7ff fe95 	bl	8002bd8 <u8x8_cad_StartTransfer>
	"cnt" includes the number of horizontal bytes. width is equal to cnt*8
	Also important: Width must be a multiple of 16 (ST7920 requirement), so cnt must be even.
	
	TODO: Consider arg_int, however arg_int is not used by u8g2
      */
      c = ((u8x8_tile_t *)arg_ptr)->cnt;	/* number of tiles */
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	791b      	ldrb	r3, [r3, #4]
 8002eb2:	75fb      	strb	r3, [r7, #23]
      ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;	/* data ptr to the tiles */
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	61bb      	str	r3, [r7, #24]
      /* The following byte is sent to allow the ST7920 to sync up with the data */
      /* it solves some issues with garbage data */
      u8x8_cad_SendCmd(u8x8, 0x03e );	/* enable extended mode */
 8002eba:	213e      	movs	r1, #62	; 0x3e
 8002ebc:	68f8      	ldr	r0, [r7, #12]
 8002ebe:	f7ff fe66 	bl	8002b8e <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x03e );	/* enable extended mode, issue 487 */
 8002ec2:	213e      	movs	r1, #62	; 0x3e
 8002ec4:	68f8      	ldr	r0, [r7, #12]
 8002ec6:	f7ff fe62 	bl	8002b8e <u8x8_cad_SendCmd>
      for( i = 0; i < 8; i++ )
 8002eca:	2300      	movs	r3, #0
 8002ecc:	777b      	strb	r3, [r7, #29]
 8002ece:	e024      	b.n	8002f1a <u8x8_d_st7920_common+0xe6>
      {
	//u8x8_cad_SendCmd(u8x8, 0x03e );	/* enable extended mode */
	u8x8_cad_SendCmd(u8x8, 0x080 | (y+i) );      /* y pos  */
 8002ed0:	7fba      	ldrb	r2, [r7, #30]
 8002ed2:	7f7b      	ldrb	r3, [r7, #29]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	b25b      	sxtb	r3, r3
 8002eda:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002ede:	b25b      	sxtb	r3, r3
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	68f8      	ldr	r0, [r7, #12]
 8002ee6:	f7ff fe52 	bl	8002b8e <u8x8_cad_SendCmd>
	u8x8_cad_SendCmd(u8x8, 0x080 | x );      /* set x pos */
 8002eea:	7ffb      	ldrb	r3, [r7, #31]
 8002eec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	68f8      	ldr	r0, [r7, #12]
 8002ef6:	f7ff fe4a 	bl	8002b8e <u8x8_cad_SendCmd>
	c = ((u8x8_tile_t *)arg_ptr)->cnt;	/* number of tiles */
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	791b      	ldrb	r3, [r3, #4]
 8002efe:	75fb      	strb	r3, [r7, #23]

	//u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, 200, NULL);	/* extra dely required */
	u8x8_cad_SendData(u8x8, c, ptr);	/* note: SendData can not handle more than 255 bytes, send one line of data */
 8002f00:	7dfb      	ldrb	r3, [r7, #23]
 8002f02:	69ba      	ldr	r2, [r7, #24]
 8002f04:	4619      	mov	r1, r3
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	f7ff fe53 	bl	8002bb2 <u8x8_cad_SendData>
	ptr += c;
 8002f0c:	7dfb      	ldrb	r3, [r7, #23]
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	4413      	add	r3, r2
 8002f12:	61bb      	str	r3, [r7, #24]
      for( i = 0; i < 8; i++ )
 8002f14:	7f7b      	ldrb	r3, [r7, #29]
 8002f16:	3301      	adds	r3, #1
 8002f18:	777b      	strb	r3, [r7, #29]
 8002f1a:	7f7b      	ldrb	r3, [r7, #29]
 8002f1c:	2b07      	cmp	r3, #7
 8002f1e:	d9d7      	bls.n	8002ed0 <u8x8_d_st7920_common+0x9c>
	//u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, 200, NULL);	/* extra dely required */
      }

      u8x8_cad_EndTransfer(u8x8);
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f7ff fe69 	bl	8002bf8 <u8x8_cad_EndTransfer>

      break;
 8002f26:	e001      	b.n	8002f2c <u8x8_d_st7920_common+0xf8>
    default:
      return 0;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	e000      	b.n	8002f2e <u8x8_d_st7920_common+0xfa>
  }
  return 1;
 8002f2c:	2301      	movs	r3, #1
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3720      	adds	r7, #32
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	08007de4 	.word	0x08007de4
 8002f3c:	08007df8 	.word	0x08007df8
 8002f40:	08007e00 	.word	0x08007e00

08002f44 <u8x8_d_st7920_128x64>:
  }
  return 1;
}

uint8_t u8x8_d_st7920_128x64(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	607b      	str	r3, [r7, #4]
 8002f4e:	460b      	mov	r3, r1
 8002f50:	72fb      	strb	r3, [r7, #11]
 8002f52:	4613      	mov	r3, r2
 8002f54:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8002f56:	7afb      	ldrb	r3, [r7, #11]
 8002f58:	2b09      	cmp	r3, #9
 8002f5a:	d106      	bne.n	8002f6a <u8x8_d_st7920_128x64+0x26>
  {
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_st7920_128x64_display_info);
 8002f5c:	4908      	ldr	r1, [pc, #32]	; (8002f80 <u8x8_d_st7920_128x64+0x3c>)
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f000 f810 	bl	8002f84 <u8x8_d_helper_display_setup_memory>
      break;
 8002f64:	bf00      	nop
    default:
      return u8x8_d_st7920_common(u8x8, msg, arg_int, arg_ptr);
  }
  return 1;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e006      	b.n	8002f78 <u8x8_d_st7920_128x64+0x34>
      return u8x8_d_st7920_common(u8x8, msg, arg_int, arg_ptr);
 8002f6a:	7aba      	ldrb	r2, [r7, #10]
 8002f6c:	7af9      	ldrb	r1, [r7, #11]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	68f8      	ldr	r0, [r7, #12]
 8002f72:	f7ff ff5f 	bl	8002e34 <u8x8_d_st7920_common>
 8002f76:	4603      	mov	r3, r0
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3710      	adds	r7, #16
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	08007e0c 	.word	0x08007e0c

08002f84 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	7c9a      	ldrb	r2, [r3, #18]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bc80      	pop	{r7}
 8002fa8:	4770      	bx	lr

08002faa <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8002faa:	b590      	push	{r4, r7, lr}
 8002fac:	b083      	sub	sp, #12
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	695c      	ldr	r4, [r3, #20]
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	2200      	movs	r2, #0
 8002fba:	2128      	movs	r1, #40	; 0x28
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68dc      	ldr	r4, [r3, #12]
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	2114      	movs	r1, #20
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8002fce:	2201      	movs	r2, #1
 8002fd0:	214b      	movs	r1, #75	; 0x4b
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 f886 	bl	80030e4 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	791b      	ldrb	r3, [r3, #4]
 8002fde:	461a      	mov	r2, r3
 8002fe0:	2129      	movs	r1, #41	; 0x29
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 f87e 	bl	80030e4 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8002fe8:	2200      	movs	r2, #0
 8002fea:	214b      	movs	r1, #75	; 0x4b
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f000 f879 	bl	80030e4 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	791b      	ldrb	r3, [r3, #4]
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	2129      	movs	r1, #41	; 0x29
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f000 f871 	bl	80030e4 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8003002:	2201      	movs	r2, #1
 8003004:	214b      	movs	r1, #75	; 0x4b
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 f86c 	bl	80030e4 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	795b      	ldrb	r3, [r3, #5]
 8003012:	461a      	mov	r2, r3
 8003014:	2129      	movs	r1, #41	; 0x29
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 f864 	bl	80030e4 <u8x8_gpio_call>
}    
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	bd90      	pop	{r4, r7, pc}

08003024 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8003024:	b590      	push	{r4, r7, lr}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	4608      	mov	r0, r1
 800302e:	4611      	mov	r1, r2
 8003030:	461a      	mov	r2, r3
 8003032:	4603      	mov	r3, r0
 8003034:	70fb      	strb	r3, [r7, #3]
 8003036:	460b      	mov	r3, r1
 8003038:	70bb      	strb	r3, [r7, #2]
 800303a:	4613      	mov	r3, r2
 800303c:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 800303e:	78fb      	ldrb	r3, [r7, #3]
 8003040:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8003042:	78bb      	ldrb	r3, [r7, #2]
 8003044:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8003046:	787b      	ldrb	r3, [r7, #1]
 8003048:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 800304a:	6a3b      	ldr	r3, [r7, #32]
 800304c:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	689c      	ldr	r4, [r3, #8]
 8003052:	f107 0308 	add.w	r3, r7, #8
 8003056:	2201      	movs	r2, #1
 8003058:	210f      	movs	r1, #15
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	47a0      	blx	r4
 800305e:	4603      	mov	r3, r0
}
 8003060:	4618      	mov	r0, r3
 8003062:	3714      	adds	r7, #20
 8003064:	46bd      	mov	sp, r7
 8003066:	bd90      	pop	{r4, r7, pc}

08003068 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8003068:	b590      	push	{r4, r7, lr}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	689c      	ldr	r4, [r3, #8]
 8003074:	2300      	movs	r3, #0
 8003076:	2200      	movs	r2, #0
 8003078:	2109      	movs	r1, #9
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	47a0      	blx	r4
}
 800307e:	bf00      	nop
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	bd90      	pop	{r4, r7, pc}

08003086 <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8003086:	b590      	push	{r4, r7, lr}
 8003088:	b083      	sub	sp, #12
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	689c      	ldr	r4, [r3, #8]
 8003092:	2300      	movs	r3, #0
 8003094:	2200      	movs	r2, #0
 8003096:	210a      	movs	r1, #10
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	47a0      	blx	r4
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd90      	pop	{r4, r7, pc}

080030a4 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 80030a4:	b590      	push	{r4, r7, lr}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	460b      	mov	r3, r1
 80030ae:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	689c      	ldr	r4, [r3, #8]
 80030b4:	78fa      	ldrb	r2, [r7, #3]
 80030b6:	2300      	movs	r3, #0
 80030b8:	210b      	movs	r1, #11
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	47a0      	blx	r4
}
 80030be:	bf00      	nop
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd90      	pop	{r4, r7, pc}

080030c6 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 80030c6:	b590      	push	{r4, r7, lr}
 80030c8:	b083      	sub	sp, #12
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	689c      	ldr	r4, [r3, #8]
 80030d2:	2300      	movs	r3, #0
 80030d4:	2200      	movs	r2, #0
 80030d6:	2110      	movs	r1, #16
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	47a0      	blx	r4
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd90      	pop	{r4, r7, pc}

080030e4 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 80030e4:	b590      	push	{r4, r7, lr}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	460b      	mov	r3, r1
 80030ee:	70fb      	strb	r3, [r7, #3]
 80030f0:	4613      	mov	r3, r2
 80030f2:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	695c      	ldr	r4, [r3, #20]
 80030f8:	78ba      	ldrb	r2, [r7, #2]
 80030fa:	78f9      	ldrb	r1, [r7, #3]
 80030fc:	2300      	movs	r3, #0
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	47a0      	blx	r4
}
 8003102:	bf00      	nop
 8003104:	370c      	adds	r7, #12
 8003106:	46bd      	mov	sp, r7
 8003108:	bd90      	pop	{r4, r7, pc}

0800310a <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 800310a:	b480      	push	{r7}
 800310c:	b085      	sub	sp, #20
 800310e:	af00      	add	r7, sp, #0
 8003110:	60f8      	str	r0, [r7, #12]
 8003112:	607b      	str	r3, [r7, #4]
 8003114:	460b      	mov	r3, r1
 8003116:	72fb      	strb	r3, [r7, #11]
 8003118:	4613      	mov	r3, r2
 800311a:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3714      	adds	r7, #20
 8003122:	46bd      	mov	sp, r7
 8003124:	bc80      	pop	{r7}
 8003126:	4770      	bx	lr

08003128 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a13      	ldr	r2, [pc, #76]	; (8003188 <u8x8_SetupDefaults+0x60>)
 800313a:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a12      	ldr	r2, [pc, #72]	; (8003188 <u8x8_SetupDefaults+0x60>)
 8003140:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a10      	ldr	r2, [pc, #64]	; (8003188 <u8x8_SetupDefaults+0x60>)
 8003146:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a0f      	ldr	r2, [pc, #60]	; (8003188 <u8x8_SetupDefaults+0x60>)
 800314c:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    u8x8->device_address = 0;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    u8x8->bus_clock = 0;		/* issue 769 */
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	22ff      	movs	r2, #255	; 0xff
 8003170:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	22ff      	movs	r2, #255	; 0xff
 8003178:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	bc80      	pop	{r7}
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	0800310b 	.word	0x0800310b

0800318c <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
 8003198:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 800319a:	68f8      	ldr	r0, [r7, #12]
 800319c:	f7ff ffc4 	bl	8003128 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	68ba      	ldr	r2, [r7, #8]
 80031a4:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	683a      	ldr	r2, [r7, #0]
 80031b0:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 80031b8:	68f8      	ldr	r0, [r7, #12]
 80031ba:	f7ff ff55 	bl	8003068 <u8x8_SetupMemory>
}
 80031be:	bf00      	nop
 80031c0:	3710      	adds	r7, #16
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
	...

080031c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80031c8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80031ca:	e003      	b.n	80031d4 <LoopCopyDataInit>

080031cc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80031cc:	4b0b      	ldr	r3, [pc, #44]	; (80031fc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80031ce:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80031d0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80031d2:	3104      	adds	r1, #4

080031d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80031d4:	480a      	ldr	r0, [pc, #40]	; (8003200 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80031d6:	4b0b      	ldr	r3, [pc, #44]	; (8003204 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80031d8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80031da:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80031dc:	d3f6      	bcc.n	80031cc <CopyDataInit>
  ldr r2, =_sbss
 80031de:	4a0a      	ldr	r2, [pc, #40]	; (8003208 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80031e0:	e002      	b.n	80031e8 <LoopFillZerobss>

080031e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80031e2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80031e4:	f842 3b04 	str.w	r3, [r2], #4

080031e8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80031e8:	4b08      	ldr	r3, [pc, #32]	; (800320c <LoopFillZerobss+0x24>)
  cmp r2, r3
 80031ea:	429a      	cmp	r2, r3
  bcc FillZerobss
 80031ec:	d3f9      	bcc.n	80031e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80031ee:	f7fd ffb3 	bl	8001158 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031f2:	f003 f82d 	bl	8006250 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80031f6:	f7fc ffc7 	bl	8000188 <main>
  bx lr
 80031fa:	4770      	bx	lr
  ldr r3, =_sidata
 80031fc:	08007ec0 	.word	0x08007ec0
  ldr r0, =_sdata
 8003200:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003204:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8003208:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 800320c:	20000600 	.word	0x20000600

08003210 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003210:	e7fe      	b.n	8003210 <ADC1_2_IRQHandler>
	...

08003214 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003218:	4b08      	ldr	r3, [pc, #32]	; (800323c <HAL_Init+0x28>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a07      	ldr	r2, [pc, #28]	; (800323c <HAL_Init+0x28>)
 800321e:	f043 0310 	orr.w	r3, r3, #16
 8003222:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003224:	2003      	movs	r0, #3
 8003226:	f000 f967 	bl	80034f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800322a:	2000      	movs	r0, #0
 800322c:	f000 f808 	bl	8003240 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003230:	f7fd fdae 	bl	8000d90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	40022000 	.word	0x40022000

08003240 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003248:	4b12      	ldr	r3, [pc, #72]	; (8003294 <HAL_InitTick+0x54>)
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	4b12      	ldr	r3, [pc, #72]	; (8003298 <HAL_InitTick+0x58>)
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	4619      	mov	r1, r3
 8003252:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003256:	fbb3 f3f1 	udiv	r3, r3, r1
 800325a:	fbb2 f3f3 	udiv	r3, r2, r3
 800325e:	4618      	mov	r0, r3
 8003260:	f000 f98d 	bl	800357e <HAL_SYSTICK_Config>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e00e      	b.n	800328c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2b0f      	cmp	r3, #15
 8003272:	d80a      	bhi.n	800328a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003274:	2200      	movs	r2, #0
 8003276:	6879      	ldr	r1, [r7, #4]
 8003278:	f04f 30ff 	mov.w	r0, #4294967295
 800327c:	f000 f947 	bl	800350e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003280:	4a06      	ldr	r2, [pc, #24]	; (800329c <HAL_InitTick+0x5c>)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003286:	2300      	movs	r3, #0
 8003288:	e000      	b.n	800328c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
}
 800328c:	4618      	mov	r0, r3
 800328e:	3708      	adds	r7, #8
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	20000004 	.word	0x20000004
 8003298:	2000000c 	.word	0x2000000c
 800329c:	20000008 	.word	0x20000008

080032a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032a0:	b480      	push	{r7}
 80032a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032a4:	4b05      	ldr	r3, [pc, #20]	; (80032bc <HAL_IncTick+0x1c>)
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	461a      	mov	r2, r3
 80032aa:	4b05      	ldr	r3, [pc, #20]	; (80032c0 <HAL_IncTick+0x20>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4413      	add	r3, r2
 80032b0:	4a03      	ldr	r2, [pc, #12]	; (80032c0 <HAL_IncTick+0x20>)
 80032b2:	6013      	str	r3, [r2, #0]
}
 80032b4:	bf00      	nop
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bc80      	pop	{r7}
 80032ba:	4770      	bx	lr
 80032bc:	2000000c 	.word	0x2000000c
 80032c0:	200005f8 	.word	0x200005f8

080032c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
  return uwTick;
 80032c8:	4b02      	ldr	r3, [pc, #8]	; (80032d4 <HAL_GetTick+0x10>)
 80032ca:	681b      	ldr	r3, [r3, #0]
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bc80      	pop	{r7}
 80032d2:	4770      	bx	lr
 80032d4:	200005f8 	.word	0x200005f8

080032d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032e0:	f7ff fff0 	bl	80032c4 <HAL_GetTick>
 80032e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f0:	d005      	beq.n	80032fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032f2:	4b09      	ldr	r3, [pc, #36]	; (8003318 <HAL_Delay+0x40>)
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	461a      	mov	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	4413      	add	r3, r2
 80032fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80032fe:	bf00      	nop
 8003300:	f7ff ffe0 	bl	80032c4 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	429a      	cmp	r2, r3
 800330e:	d8f7      	bhi.n	8003300 <HAL_Delay+0x28>
  {
  }
}
 8003310:	bf00      	nop
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	2000000c 	.word	0x2000000c

0800331c <__NVIC_SetPriorityGrouping>:
{
 800331c:	b480      	push	{r7}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f003 0307 	and.w	r3, r3, #7
 800332a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800332c:	4b0c      	ldr	r3, [pc, #48]	; (8003360 <__NVIC_SetPriorityGrouping+0x44>)
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003332:	68ba      	ldr	r2, [r7, #8]
 8003334:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003338:	4013      	ands	r3, r2
 800333a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003344:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003348:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800334c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800334e:	4a04      	ldr	r2, [pc, #16]	; (8003360 <__NVIC_SetPriorityGrouping+0x44>)
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	60d3      	str	r3, [r2, #12]
}
 8003354:	bf00      	nop
 8003356:	3714      	adds	r7, #20
 8003358:	46bd      	mov	sp, r7
 800335a:	bc80      	pop	{r7}
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	e000ed00 	.word	0xe000ed00

08003364 <__NVIC_GetPriorityGrouping>:
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003368:	4b04      	ldr	r3, [pc, #16]	; (800337c <__NVIC_GetPriorityGrouping+0x18>)
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	0a1b      	lsrs	r3, r3, #8
 800336e:	f003 0307 	and.w	r3, r3, #7
}
 8003372:	4618      	mov	r0, r3
 8003374:	46bd      	mov	sp, r7
 8003376:	bc80      	pop	{r7}
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	e000ed00 	.word	0xe000ed00

08003380 <__NVIC_EnableIRQ>:
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	4603      	mov	r3, r0
 8003388:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800338a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800338e:	2b00      	cmp	r3, #0
 8003390:	db0b      	blt.n	80033aa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003392:	79fb      	ldrb	r3, [r7, #7]
 8003394:	f003 021f 	and.w	r2, r3, #31
 8003398:	4906      	ldr	r1, [pc, #24]	; (80033b4 <__NVIC_EnableIRQ+0x34>)
 800339a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800339e:	095b      	lsrs	r3, r3, #5
 80033a0:	2001      	movs	r0, #1
 80033a2:	fa00 f202 	lsl.w	r2, r0, r2
 80033a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80033aa:	bf00      	nop
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bc80      	pop	{r7}
 80033b2:	4770      	bx	lr
 80033b4:	e000e100 	.word	0xe000e100

080033b8 <__NVIC_DisableIRQ>:
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	4603      	mov	r3, r0
 80033c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	db10      	blt.n	80033ec <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033ca:	79fb      	ldrb	r3, [r7, #7]
 80033cc:	f003 021f 	and.w	r2, r3, #31
 80033d0:	4909      	ldr	r1, [pc, #36]	; (80033f8 <__NVIC_DisableIRQ+0x40>)
 80033d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d6:	095b      	lsrs	r3, r3, #5
 80033d8:	2001      	movs	r0, #1
 80033da:	fa00 f202 	lsl.w	r2, r0, r2
 80033de:	3320      	adds	r3, #32
 80033e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80033e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80033e8:	f3bf 8f6f 	isb	sy
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bc80      	pop	{r7}
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	e000e100 	.word	0xe000e100

080033fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	4603      	mov	r3, r0
 8003404:	6039      	str	r1, [r7, #0]
 8003406:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800340c:	2b00      	cmp	r3, #0
 800340e:	db0a      	blt.n	8003426 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	b2da      	uxtb	r2, r3
 8003414:	490c      	ldr	r1, [pc, #48]	; (8003448 <__NVIC_SetPriority+0x4c>)
 8003416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800341a:	0112      	lsls	r2, r2, #4
 800341c:	b2d2      	uxtb	r2, r2
 800341e:	440b      	add	r3, r1
 8003420:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003424:	e00a      	b.n	800343c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	b2da      	uxtb	r2, r3
 800342a:	4908      	ldr	r1, [pc, #32]	; (800344c <__NVIC_SetPriority+0x50>)
 800342c:	79fb      	ldrb	r3, [r7, #7]
 800342e:	f003 030f 	and.w	r3, r3, #15
 8003432:	3b04      	subs	r3, #4
 8003434:	0112      	lsls	r2, r2, #4
 8003436:	b2d2      	uxtb	r2, r2
 8003438:	440b      	add	r3, r1
 800343a:	761a      	strb	r2, [r3, #24]
}
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	bc80      	pop	{r7}
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	e000e100 	.word	0xe000e100
 800344c:	e000ed00 	.word	0xe000ed00

08003450 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003450:	b480      	push	{r7}
 8003452:	b089      	sub	sp, #36	; 0x24
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f003 0307 	and.w	r3, r3, #7
 8003462:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	f1c3 0307 	rsb	r3, r3, #7
 800346a:	2b04      	cmp	r3, #4
 800346c:	bf28      	it	cs
 800346e:	2304      	movcs	r3, #4
 8003470:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	3304      	adds	r3, #4
 8003476:	2b06      	cmp	r3, #6
 8003478:	d902      	bls.n	8003480 <NVIC_EncodePriority+0x30>
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	3b03      	subs	r3, #3
 800347e:	e000      	b.n	8003482 <NVIC_EncodePriority+0x32>
 8003480:	2300      	movs	r3, #0
 8003482:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003484:	f04f 32ff 	mov.w	r2, #4294967295
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	fa02 f303 	lsl.w	r3, r2, r3
 800348e:	43da      	mvns	r2, r3
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	401a      	ands	r2, r3
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003498:	f04f 31ff 	mov.w	r1, #4294967295
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	fa01 f303 	lsl.w	r3, r1, r3
 80034a2:	43d9      	mvns	r1, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034a8:	4313      	orrs	r3, r2
         );
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3724      	adds	r7, #36	; 0x24
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bc80      	pop	{r7}
 80034b2:	4770      	bx	lr

080034b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	3b01      	subs	r3, #1
 80034c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034c4:	d301      	bcc.n	80034ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034c6:	2301      	movs	r3, #1
 80034c8:	e00f      	b.n	80034ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034ca:	4a0a      	ldr	r2, [pc, #40]	; (80034f4 <SysTick_Config+0x40>)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	3b01      	subs	r3, #1
 80034d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034d2:	210f      	movs	r1, #15
 80034d4:	f04f 30ff 	mov.w	r0, #4294967295
 80034d8:	f7ff ff90 	bl	80033fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034dc:	4b05      	ldr	r3, [pc, #20]	; (80034f4 <SysTick_Config+0x40>)
 80034de:	2200      	movs	r2, #0
 80034e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034e2:	4b04      	ldr	r3, [pc, #16]	; (80034f4 <SysTick_Config+0x40>)
 80034e4:	2207      	movs	r2, #7
 80034e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	e000e010 	.word	0xe000e010

080034f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f7ff ff0b 	bl	800331c <__NVIC_SetPriorityGrouping>
}
 8003506:	bf00      	nop
 8003508:	3708      	adds	r7, #8
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800350e:	b580      	push	{r7, lr}
 8003510:	b086      	sub	sp, #24
 8003512:	af00      	add	r7, sp, #0
 8003514:	4603      	mov	r3, r0
 8003516:	60b9      	str	r1, [r7, #8]
 8003518:	607a      	str	r2, [r7, #4]
 800351a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800351c:	2300      	movs	r3, #0
 800351e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003520:	f7ff ff20 	bl	8003364 <__NVIC_GetPriorityGrouping>
 8003524:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	68b9      	ldr	r1, [r7, #8]
 800352a:	6978      	ldr	r0, [r7, #20]
 800352c:	f7ff ff90 	bl	8003450 <NVIC_EncodePriority>
 8003530:	4602      	mov	r2, r0
 8003532:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003536:	4611      	mov	r1, r2
 8003538:	4618      	mov	r0, r3
 800353a:	f7ff ff5f 	bl	80033fc <__NVIC_SetPriority>
}
 800353e:	bf00      	nop
 8003540:	3718      	adds	r7, #24
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003546:	b580      	push	{r7, lr}
 8003548:	b082      	sub	sp, #8
 800354a:	af00      	add	r7, sp, #0
 800354c:	4603      	mov	r3, r0
 800354e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003554:	4618      	mov	r0, r3
 8003556:	f7ff ff13 	bl	8003380 <__NVIC_EnableIRQ>
}
 800355a:	bf00      	nop
 800355c:	3708      	adds	r7, #8
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b082      	sub	sp, #8
 8003566:	af00      	add	r7, sp, #0
 8003568:	4603      	mov	r3, r0
 800356a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800356c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003570:	4618      	mov	r0, r3
 8003572:	f7ff ff21 	bl	80033b8 <__NVIC_DisableIRQ>
}
 8003576:	bf00      	nop
 8003578:	3708      	adds	r7, #8
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800357e:	b580      	push	{r7, lr}
 8003580:	b082      	sub	sp, #8
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f7ff ff94 	bl	80034b4 <SysTick_Config>
 800358c:	4603      	mov	r3, r0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
	...

08003598 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003598:	b480      	push	{r7}
 800359a:	b08b      	sub	sp, #44	; 0x2c
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035a2:	2300      	movs	r3, #0
 80035a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80035a6:	2300      	movs	r3, #0
 80035a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035aa:	e127      	b.n	80037fc <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80035ac:	2201      	movs	r2, #1
 80035ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b0:	fa02 f303 	lsl.w	r3, r2, r3
 80035b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	69fa      	ldr	r2, [r7, #28]
 80035bc:	4013      	ands	r3, r2
 80035be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	f040 8116 	bne.w	80037f6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	2b12      	cmp	r3, #18
 80035d0:	d034      	beq.n	800363c <HAL_GPIO_Init+0xa4>
 80035d2:	2b12      	cmp	r3, #18
 80035d4:	d80d      	bhi.n	80035f2 <HAL_GPIO_Init+0x5a>
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d02b      	beq.n	8003632 <HAL_GPIO_Init+0x9a>
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d804      	bhi.n	80035e8 <HAL_GPIO_Init+0x50>
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d031      	beq.n	8003646 <HAL_GPIO_Init+0xae>
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d01c      	beq.n	8003620 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80035e6:	e048      	b.n	800367a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80035e8:	2b03      	cmp	r3, #3
 80035ea:	d043      	beq.n	8003674 <HAL_GPIO_Init+0xdc>
 80035ec:	2b11      	cmp	r3, #17
 80035ee:	d01b      	beq.n	8003628 <HAL_GPIO_Init+0x90>
          break;
 80035f0:	e043      	b.n	800367a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80035f2:	4a89      	ldr	r2, [pc, #548]	; (8003818 <HAL_GPIO_Init+0x280>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d026      	beq.n	8003646 <HAL_GPIO_Init+0xae>
 80035f8:	4a87      	ldr	r2, [pc, #540]	; (8003818 <HAL_GPIO_Init+0x280>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d806      	bhi.n	800360c <HAL_GPIO_Init+0x74>
 80035fe:	4a87      	ldr	r2, [pc, #540]	; (800381c <HAL_GPIO_Init+0x284>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d020      	beq.n	8003646 <HAL_GPIO_Init+0xae>
 8003604:	4a86      	ldr	r2, [pc, #536]	; (8003820 <HAL_GPIO_Init+0x288>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d01d      	beq.n	8003646 <HAL_GPIO_Init+0xae>
          break;
 800360a:	e036      	b.n	800367a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800360c:	4a85      	ldr	r2, [pc, #532]	; (8003824 <HAL_GPIO_Init+0x28c>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d019      	beq.n	8003646 <HAL_GPIO_Init+0xae>
 8003612:	4a85      	ldr	r2, [pc, #532]	; (8003828 <HAL_GPIO_Init+0x290>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d016      	beq.n	8003646 <HAL_GPIO_Init+0xae>
 8003618:	4a84      	ldr	r2, [pc, #528]	; (800382c <HAL_GPIO_Init+0x294>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d013      	beq.n	8003646 <HAL_GPIO_Init+0xae>
          break;
 800361e:	e02c      	b.n	800367a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	623b      	str	r3, [r7, #32]
          break;
 8003626:	e028      	b.n	800367a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	3304      	adds	r3, #4
 800362e:	623b      	str	r3, [r7, #32]
          break;
 8003630:	e023      	b.n	800367a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	3308      	adds	r3, #8
 8003638:	623b      	str	r3, [r7, #32]
          break;
 800363a:	e01e      	b.n	800367a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	330c      	adds	r3, #12
 8003642:	623b      	str	r3, [r7, #32]
          break;
 8003644:	e019      	b.n	800367a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d102      	bne.n	8003654 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800364e:	2304      	movs	r3, #4
 8003650:	623b      	str	r3, [r7, #32]
          break;
 8003652:	e012      	b.n	800367a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d105      	bne.n	8003668 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800365c:	2308      	movs	r3, #8
 800365e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	69fa      	ldr	r2, [r7, #28]
 8003664:	611a      	str	r2, [r3, #16]
          break;
 8003666:	e008      	b.n	800367a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003668:	2308      	movs	r3, #8
 800366a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	69fa      	ldr	r2, [r7, #28]
 8003670:	615a      	str	r2, [r3, #20]
          break;
 8003672:	e002      	b.n	800367a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003674:	2300      	movs	r3, #0
 8003676:	623b      	str	r3, [r7, #32]
          break;
 8003678:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	2bff      	cmp	r3, #255	; 0xff
 800367e:	d801      	bhi.n	8003684 <HAL_GPIO_Init+0xec>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	e001      	b.n	8003688 <HAL_GPIO_Init+0xf0>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	3304      	adds	r3, #4
 8003688:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	2bff      	cmp	r3, #255	; 0xff
 800368e:	d802      	bhi.n	8003696 <HAL_GPIO_Init+0xfe>
 8003690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	e002      	b.n	800369c <HAL_GPIO_Init+0x104>
 8003696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003698:	3b08      	subs	r3, #8
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	210f      	movs	r1, #15
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	fa01 f303 	lsl.w	r3, r1, r3
 80036aa:	43db      	mvns	r3, r3
 80036ac:	401a      	ands	r2, r3
 80036ae:	6a39      	ldr	r1, [r7, #32]
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	fa01 f303 	lsl.w	r3, r1, r3
 80036b6:	431a      	orrs	r2, r3
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	f000 8096 	beq.w	80037f6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80036ca:	4b59      	ldr	r3, [pc, #356]	; (8003830 <HAL_GPIO_Init+0x298>)
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	4a58      	ldr	r2, [pc, #352]	; (8003830 <HAL_GPIO_Init+0x298>)
 80036d0:	f043 0301 	orr.w	r3, r3, #1
 80036d4:	6193      	str	r3, [r2, #24]
 80036d6:	4b56      	ldr	r3, [pc, #344]	; (8003830 <HAL_GPIO_Init+0x298>)
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	f003 0301 	and.w	r3, r3, #1
 80036de:	60bb      	str	r3, [r7, #8]
 80036e0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80036e2:	4a54      	ldr	r2, [pc, #336]	; (8003834 <HAL_GPIO_Init+0x29c>)
 80036e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e6:	089b      	lsrs	r3, r3, #2
 80036e8:	3302      	adds	r3, #2
 80036ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036ee:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80036f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f2:	f003 0303 	and.w	r3, r3, #3
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	220f      	movs	r2, #15
 80036fa:	fa02 f303 	lsl.w	r3, r2, r3
 80036fe:	43db      	mvns	r3, r3
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	4013      	ands	r3, r2
 8003704:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a4b      	ldr	r2, [pc, #300]	; (8003838 <HAL_GPIO_Init+0x2a0>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d013      	beq.n	8003736 <HAL_GPIO_Init+0x19e>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a4a      	ldr	r2, [pc, #296]	; (800383c <HAL_GPIO_Init+0x2a4>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d00d      	beq.n	8003732 <HAL_GPIO_Init+0x19a>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a49      	ldr	r2, [pc, #292]	; (8003840 <HAL_GPIO_Init+0x2a8>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d007      	beq.n	800372e <HAL_GPIO_Init+0x196>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a48      	ldr	r2, [pc, #288]	; (8003844 <HAL_GPIO_Init+0x2ac>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d101      	bne.n	800372a <HAL_GPIO_Init+0x192>
 8003726:	2303      	movs	r3, #3
 8003728:	e006      	b.n	8003738 <HAL_GPIO_Init+0x1a0>
 800372a:	2304      	movs	r3, #4
 800372c:	e004      	b.n	8003738 <HAL_GPIO_Init+0x1a0>
 800372e:	2302      	movs	r3, #2
 8003730:	e002      	b.n	8003738 <HAL_GPIO_Init+0x1a0>
 8003732:	2301      	movs	r3, #1
 8003734:	e000      	b.n	8003738 <HAL_GPIO_Init+0x1a0>
 8003736:	2300      	movs	r3, #0
 8003738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800373a:	f002 0203 	and.w	r2, r2, #3
 800373e:	0092      	lsls	r2, r2, #2
 8003740:	4093      	lsls	r3, r2
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	4313      	orrs	r3, r2
 8003746:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003748:	493a      	ldr	r1, [pc, #232]	; (8003834 <HAL_GPIO_Init+0x29c>)
 800374a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374c:	089b      	lsrs	r3, r3, #2
 800374e:	3302      	adds	r3, #2
 8003750:	68fa      	ldr	r2, [r7, #12]
 8003752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d006      	beq.n	8003770 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003762:	4b39      	ldr	r3, [pc, #228]	; (8003848 <HAL_GPIO_Init+0x2b0>)
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	4938      	ldr	r1, [pc, #224]	; (8003848 <HAL_GPIO_Init+0x2b0>)
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	4313      	orrs	r3, r2
 800376c:	600b      	str	r3, [r1, #0]
 800376e:	e006      	b.n	800377e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003770:	4b35      	ldr	r3, [pc, #212]	; (8003848 <HAL_GPIO_Init+0x2b0>)
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	43db      	mvns	r3, r3
 8003778:	4933      	ldr	r1, [pc, #204]	; (8003848 <HAL_GPIO_Init+0x2b0>)
 800377a:	4013      	ands	r3, r2
 800377c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d006      	beq.n	8003798 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800378a:	4b2f      	ldr	r3, [pc, #188]	; (8003848 <HAL_GPIO_Init+0x2b0>)
 800378c:	685a      	ldr	r2, [r3, #4]
 800378e:	492e      	ldr	r1, [pc, #184]	; (8003848 <HAL_GPIO_Init+0x2b0>)
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	4313      	orrs	r3, r2
 8003794:	604b      	str	r3, [r1, #4]
 8003796:	e006      	b.n	80037a6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003798:	4b2b      	ldr	r3, [pc, #172]	; (8003848 <HAL_GPIO_Init+0x2b0>)
 800379a:	685a      	ldr	r2, [r3, #4]
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	43db      	mvns	r3, r3
 80037a0:	4929      	ldr	r1, [pc, #164]	; (8003848 <HAL_GPIO_Init+0x2b0>)
 80037a2:	4013      	ands	r3, r2
 80037a4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d006      	beq.n	80037c0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80037b2:	4b25      	ldr	r3, [pc, #148]	; (8003848 <HAL_GPIO_Init+0x2b0>)
 80037b4:	689a      	ldr	r2, [r3, #8]
 80037b6:	4924      	ldr	r1, [pc, #144]	; (8003848 <HAL_GPIO_Init+0x2b0>)
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	608b      	str	r3, [r1, #8]
 80037be:	e006      	b.n	80037ce <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80037c0:	4b21      	ldr	r3, [pc, #132]	; (8003848 <HAL_GPIO_Init+0x2b0>)
 80037c2:	689a      	ldr	r2, [r3, #8]
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	43db      	mvns	r3, r3
 80037c8:	491f      	ldr	r1, [pc, #124]	; (8003848 <HAL_GPIO_Init+0x2b0>)
 80037ca:	4013      	ands	r3, r2
 80037cc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d006      	beq.n	80037e8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80037da:	4b1b      	ldr	r3, [pc, #108]	; (8003848 <HAL_GPIO_Init+0x2b0>)
 80037dc:	68da      	ldr	r2, [r3, #12]
 80037de:	491a      	ldr	r1, [pc, #104]	; (8003848 <HAL_GPIO_Init+0x2b0>)
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	60cb      	str	r3, [r1, #12]
 80037e6:	e006      	b.n	80037f6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80037e8:	4b17      	ldr	r3, [pc, #92]	; (8003848 <HAL_GPIO_Init+0x2b0>)
 80037ea:	68da      	ldr	r2, [r3, #12]
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	43db      	mvns	r3, r3
 80037f0:	4915      	ldr	r1, [pc, #84]	; (8003848 <HAL_GPIO_Init+0x2b0>)
 80037f2:	4013      	ands	r3, r2
 80037f4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80037f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f8:	3301      	adds	r3, #1
 80037fa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003802:	fa22 f303 	lsr.w	r3, r2, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	f47f aed0 	bne.w	80035ac <HAL_GPIO_Init+0x14>
  }
}
 800380c:	bf00      	nop
 800380e:	372c      	adds	r7, #44	; 0x2c
 8003810:	46bd      	mov	sp, r7
 8003812:	bc80      	pop	{r7}
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	10210000 	.word	0x10210000
 800381c:	10110000 	.word	0x10110000
 8003820:	10120000 	.word	0x10120000
 8003824:	10310000 	.word	0x10310000
 8003828:	10320000 	.word	0x10320000
 800382c:	10220000 	.word	0x10220000
 8003830:	40021000 	.word	0x40021000
 8003834:	40010000 	.word	0x40010000
 8003838:	40010800 	.word	0x40010800
 800383c:	40010c00 	.word	0x40010c00
 8003840:	40011000 	.word	0x40011000
 8003844:	40011400 	.word	0x40011400
 8003848:	40010400 	.word	0x40010400

0800384c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800384c:	b480      	push	{r7}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	460b      	mov	r3, r1
 8003856:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	689a      	ldr	r2, [r3, #8]
 800385c:	887b      	ldrh	r3, [r7, #2]
 800385e:	4013      	ands	r3, r2
 8003860:	2b00      	cmp	r3, #0
 8003862:	d002      	beq.n	800386a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003864:	2301      	movs	r3, #1
 8003866:	73fb      	strb	r3, [r7, #15]
 8003868:	e001      	b.n	800386e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800386a:	2300      	movs	r3, #0
 800386c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800386e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003870:	4618      	mov	r0, r3
 8003872:	3714      	adds	r7, #20
 8003874:	46bd      	mov	sp, r7
 8003876:	bc80      	pop	{r7}
 8003878:	4770      	bx	lr

0800387a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800387a:	b480      	push	{r7}
 800387c:	b083      	sub	sp, #12
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
 8003882:	460b      	mov	r3, r1
 8003884:	807b      	strh	r3, [r7, #2]
 8003886:	4613      	mov	r3, r2
 8003888:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800388a:	787b      	ldrb	r3, [r7, #1]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d003      	beq.n	8003898 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003890:	887a      	ldrh	r2, [r7, #2]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003896:	e003      	b.n	80038a0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003898:	887b      	ldrh	r3, [r7, #2]
 800389a:	041a      	lsls	r2, r3, #16
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	611a      	str	r2, [r3, #16]
}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bc80      	pop	{r7}
 80038a8:	4770      	bx	lr
	...

080038ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	4603      	mov	r3, r0
 80038b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80038b6:	4b08      	ldr	r3, [pc, #32]	; (80038d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038b8:	695a      	ldr	r2, [r3, #20]
 80038ba:	88fb      	ldrh	r3, [r7, #6]
 80038bc:	4013      	ands	r3, r2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d006      	beq.n	80038d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80038c2:	4a05      	ldr	r2, [pc, #20]	; (80038d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038c4:	88fb      	ldrh	r3, [r7, #6]
 80038c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80038c8:	88fb      	ldrh	r3, [r7, #6]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7fd f816 	bl	80008fc <HAL_GPIO_EXTI_Callback>
  }
}
 80038d0:	bf00      	nop
 80038d2:	3708      	adds	r7, #8
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	40010400 	.word	0x40010400

080038dc <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80038e0:	4b03      	ldr	r3, [pc, #12]	; (80038f0 <HAL_PWR_EnableBkUpAccess+0x14>)
 80038e2:	2201      	movs	r2, #1
 80038e4:	601a      	str	r2, [r3, #0]
}
 80038e6:	bf00      	nop
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bc80      	pop	{r7}
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	420e0020 	.word	0x420e0020

080038f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b086      	sub	sp, #24
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d101      	bne.n	8003906 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e26c      	b.n	8003de0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	2b00      	cmp	r3, #0
 8003910:	f000 8087 	beq.w	8003a22 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003914:	4b92      	ldr	r3, [pc, #584]	; (8003b60 <HAL_RCC_OscConfig+0x26c>)
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f003 030c 	and.w	r3, r3, #12
 800391c:	2b04      	cmp	r3, #4
 800391e:	d00c      	beq.n	800393a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003920:	4b8f      	ldr	r3, [pc, #572]	; (8003b60 <HAL_RCC_OscConfig+0x26c>)
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f003 030c 	and.w	r3, r3, #12
 8003928:	2b08      	cmp	r3, #8
 800392a:	d112      	bne.n	8003952 <HAL_RCC_OscConfig+0x5e>
 800392c:	4b8c      	ldr	r3, [pc, #560]	; (8003b60 <HAL_RCC_OscConfig+0x26c>)
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003934:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003938:	d10b      	bne.n	8003952 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800393a:	4b89      	ldr	r3, [pc, #548]	; (8003b60 <HAL_RCC_OscConfig+0x26c>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d06c      	beq.n	8003a20 <HAL_RCC_OscConfig+0x12c>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d168      	bne.n	8003a20 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e246      	b.n	8003de0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800395a:	d106      	bne.n	800396a <HAL_RCC_OscConfig+0x76>
 800395c:	4b80      	ldr	r3, [pc, #512]	; (8003b60 <HAL_RCC_OscConfig+0x26c>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a7f      	ldr	r2, [pc, #508]	; (8003b60 <HAL_RCC_OscConfig+0x26c>)
 8003962:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003966:	6013      	str	r3, [r2, #0]
 8003968:	e02e      	b.n	80039c8 <HAL_RCC_OscConfig+0xd4>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d10c      	bne.n	800398c <HAL_RCC_OscConfig+0x98>
 8003972:	4b7b      	ldr	r3, [pc, #492]	; (8003b60 <HAL_RCC_OscConfig+0x26c>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a7a      	ldr	r2, [pc, #488]	; (8003b60 <HAL_RCC_OscConfig+0x26c>)
 8003978:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800397c:	6013      	str	r3, [r2, #0]
 800397e:	4b78      	ldr	r3, [pc, #480]	; (8003b60 <HAL_RCC_OscConfig+0x26c>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a77      	ldr	r2, [pc, #476]	; (8003b60 <HAL_RCC_OscConfig+0x26c>)
 8003984:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003988:	6013      	str	r3, [r2, #0]
 800398a:	e01d      	b.n	80039c8 <HAL_RCC_OscConfig+0xd4>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003994:	d10c      	bne.n	80039b0 <HAL_RCC_OscConfig+0xbc>
 8003996:	4b72      	ldr	r3, [pc, #456]	; (8003b60 <HAL_RCC_OscConfig+0x26c>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a71      	ldr	r2, [pc, #452]	; (8003b60 <HAL_RCC_OscConfig+0x26c>)
 800399c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039a0:	6013      	str	r3, [r2, #0]
 80039a2:	4b6f      	ldr	r3, [pc, #444]	; (8003b60 <HAL_RCC_OscConfig+0x26c>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a6e      	ldr	r2, [pc, #440]	; (8003b60 <HAL_RCC_OscConfig+0x26c>)
 80039a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039ac:	6013      	str	r3, [r2, #0]
 80039ae:	e00b      	b.n	80039c8 <HAL_RCC_OscConfig+0xd4>
 80039b0:	4b6b      	ldr	r3, [pc, #428]	; (8003b60 <HAL_RCC_OscConfig+0x26c>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a6a      	ldr	r2, [pc, #424]	; (8003b60 <HAL_RCC_OscConfig+0x26c>)
 80039b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039ba:	6013      	str	r3, [r2, #0]
 80039bc:	4b68      	ldr	r3, [pc, #416]	; (8003b60 <HAL_RCC_OscConfig+0x26c>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a67      	ldr	r2, [pc, #412]	; (8003b60 <HAL_RCC_OscConfig+0x26c>)
 80039c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039c6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d013      	beq.n	80039f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d0:	f7ff fc78 	bl	80032c4 <HAL_GetTick>
 80039d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039d6:	e008      	b.n	80039ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039d8:	f7ff fc74 	bl	80032c4 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b64      	cmp	r3, #100	; 0x64
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e1fa      	b.n	8003de0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ea:	4b5d      	ldr	r3, [pc, #372]	; (8003b60 <HAL_RCC_OscConfig+0x26c>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d0f0      	beq.n	80039d8 <HAL_RCC_OscConfig+0xe4>
 80039f6:	e014      	b.n	8003a22 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f8:	f7ff fc64 	bl	80032c4 <HAL_GetTick>
 80039fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039fe:	e008      	b.n	8003a12 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a00:	f7ff fc60 	bl	80032c4 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b64      	cmp	r3, #100	; 0x64
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e1e6      	b.n	8003de0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a12:	4b53      	ldr	r3, [pc, #332]	; (8003b60 <HAL_RCC_OscConfig+0x26c>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1f0      	bne.n	8003a00 <HAL_RCC_OscConfig+0x10c>
 8003a1e:	e000      	b.n	8003a22 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0302 	and.w	r3, r3, #2
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d063      	beq.n	8003af6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a2e:	4b4c      	ldr	r3, [pc, #304]	; (8003b60 <HAL_RCC_OscConfig+0x26c>)
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f003 030c 	and.w	r3, r3, #12
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00b      	beq.n	8003a52 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003a3a:	4b49      	ldr	r3, [pc, #292]	; (8003b60 <HAL_RCC_OscConfig+0x26c>)
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f003 030c 	and.w	r3, r3, #12
 8003a42:	2b08      	cmp	r3, #8
 8003a44:	d11c      	bne.n	8003a80 <HAL_RCC_OscConfig+0x18c>
 8003a46:	4b46      	ldr	r3, [pc, #280]	; (8003b60 <HAL_RCC_OscConfig+0x26c>)
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d116      	bne.n	8003a80 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a52:	4b43      	ldr	r3, [pc, #268]	; (8003b60 <HAL_RCC_OscConfig+0x26c>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d005      	beq.n	8003a6a <HAL_RCC_OscConfig+0x176>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d001      	beq.n	8003a6a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e1ba      	b.n	8003de0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a6a:	4b3d      	ldr	r3, [pc, #244]	; (8003b60 <HAL_RCC_OscConfig+0x26c>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	00db      	lsls	r3, r3, #3
 8003a78:	4939      	ldr	r1, [pc, #228]	; (8003b60 <HAL_RCC_OscConfig+0x26c>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a7e:	e03a      	b.n	8003af6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	691b      	ldr	r3, [r3, #16]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d020      	beq.n	8003aca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a88:	4b36      	ldr	r3, [pc, #216]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a8e:	f7ff fc19 	bl	80032c4 <HAL_GetTick>
 8003a92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a94:	e008      	b.n	8003aa8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a96:	f7ff fc15 	bl	80032c4 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d901      	bls.n	8003aa8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e19b      	b.n	8003de0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aa8:	4b2d      	ldr	r3, [pc, #180]	; (8003b60 <HAL_RCC_OscConfig+0x26c>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0302 	and.w	r3, r3, #2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d0f0      	beq.n	8003a96 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ab4:	4b2a      	ldr	r3, [pc, #168]	; (8003b60 <HAL_RCC_OscConfig+0x26c>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	695b      	ldr	r3, [r3, #20]
 8003ac0:	00db      	lsls	r3, r3, #3
 8003ac2:	4927      	ldr	r1, [pc, #156]	; (8003b60 <HAL_RCC_OscConfig+0x26c>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	600b      	str	r3, [r1, #0]
 8003ac8:	e015      	b.n	8003af6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003aca:	4b26      	ldr	r3, [pc, #152]	; (8003b64 <HAL_RCC_OscConfig+0x270>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad0:	f7ff fbf8 	bl	80032c4 <HAL_GetTick>
 8003ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ad6:	e008      	b.n	8003aea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ad8:	f7ff fbf4 	bl	80032c4 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e17a      	b.n	8003de0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aea:	4b1d      	ldr	r3, [pc, #116]	; (8003b60 <HAL_RCC_OscConfig+0x26c>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1f0      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0308 	and.w	r3, r3, #8
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d03a      	beq.n	8003b78 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d019      	beq.n	8003b3e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b0a:	4b17      	ldr	r3, [pc, #92]	; (8003b68 <HAL_RCC_OscConfig+0x274>)
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b10:	f7ff fbd8 	bl	80032c4 <HAL_GetTick>
 8003b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b16:	e008      	b.n	8003b2a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b18:	f7ff fbd4 	bl	80032c4 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d901      	bls.n	8003b2a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e15a      	b.n	8003de0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b2a:	4b0d      	ldr	r3, [pc, #52]	; (8003b60 <HAL_RCC_OscConfig+0x26c>)
 8003b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2e:	f003 0302 	and.w	r3, r3, #2
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d0f0      	beq.n	8003b18 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003b36:	2001      	movs	r0, #1
 8003b38:	f000 fac6 	bl	80040c8 <RCC_Delay>
 8003b3c:	e01c      	b.n	8003b78 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b3e:	4b0a      	ldr	r3, [pc, #40]	; (8003b68 <HAL_RCC_OscConfig+0x274>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b44:	f7ff fbbe 	bl	80032c4 <HAL_GetTick>
 8003b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b4a:	e00f      	b.n	8003b6c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b4c:	f7ff fbba 	bl	80032c4 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d908      	bls.n	8003b6c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e140      	b.n	8003de0 <HAL_RCC_OscConfig+0x4ec>
 8003b5e:	bf00      	nop
 8003b60:	40021000 	.word	0x40021000
 8003b64:	42420000 	.word	0x42420000
 8003b68:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b6c:	4b9e      	ldr	r3, [pc, #632]	; (8003de8 <HAL_RCC_OscConfig+0x4f4>)
 8003b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b70:	f003 0302 	and.w	r3, r3, #2
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d1e9      	bne.n	8003b4c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0304 	and.w	r3, r3, #4
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	f000 80a6 	beq.w	8003cd2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b86:	2300      	movs	r3, #0
 8003b88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b8a:	4b97      	ldr	r3, [pc, #604]	; (8003de8 <HAL_RCC_OscConfig+0x4f4>)
 8003b8c:	69db      	ldr	r3, [r3, #28]
 8003b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d10d      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b96:	4b94      	ldr	r3, [pc, #592]	; (8003de8 <HAL_RCC_OscConfig+0x4f4>)
 8003b98:	69db      	ldr	r3, [r3, #28]
 8003b9a:	4a93      	ldr	r2, [pc, #588]	; (8003de8 <HAL_RCC_OscConfig+0x4f4>)
 8003b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ba0:	61d3      	str	r3, [r2, #28]
 8003ba2:	4b91      	ldr	r3, [pc, #580]	; (8003de8 <HAL_RCC_OscConfig+0x4f4>)
 8003ba4:	69db      	ldr	r3, [r3, #28]
 8003ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003baa:	60bb      	str	r3, [r7, #8]
 8003bac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bb2:	4b8e      	ldr	r3, [pc, #568]	; (8003dec <HAL_RCC_OscConfig+0x4f8>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d118      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bbe:	4b8b      	ldr	r3, [pc, #556]	; (8003dec <HAL_RCC_OscConfig+0x4f8>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a8a      	ldr	r2, [pc, #552]	; (8003dec <HAL_RCC_OscConfig+0x4f8>)
 8003bc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bca:	f7ff fb7b 	bl	80032c4 <HAL_GetTick>
 8003bce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bd0:	e008      	b.n	8003be4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bd2:	f7ff fb77 	bl	80032c4 <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	2b64      	cmp	r3, #100	; 0x64
 8003bde:	d901      	bls.n	8003be4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e0fd      	b.n	8003de0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003be4:	4b81      	ldr	r3, [pc, #516]	; (8003dec <HAL_RCC_OscConfig+0x4f8>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d0f0      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d106      	bne.n	8003c06 <HAL_RCC_OscConfig+0x312>
 8003bf8:	4b7b      	ldr	r3, [pc, #492]	; (8003de8 <HAL_RCC_OscConfig+0x4f4>)
 8003bfa:	6a1b      	ldr	r3, [r3, #32]
 8003bfc:	4a7a      	ldr	r2, [pc, #488]	; (8003de8 <HAL_RCC_OscConfig+0x4f4>)
 8003bfe:	f043 0301 	orr.w	r3, r3, #1
 8003c02:	6213      	str	r3, [r2, #32]
 8003c04:	e02d      	b.n	8003c62 <HAL_RCC_OscConfig+0x36e>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d10c      	bne.n	8003c28 <HAL_RCC_OscConfig+0x334>
 8003c0e:	4b76      	ldr	r3, [pc, #472]	; (8003de8 <HAL_RCC_OscConfig+0x4f4>)
 8003c10:	6a1b      	ldr	r3, [r3, #32]
 8003c12:	4a75      	ldr	r2, [pc, #468]	; (8003de8 <HAL_RCC_OscConfig+0x4f4>)
 8003c14:	f023 0301 	bic.w	r3, r3, #1
 8003c18:	6213      	str	r3, [r2, #32]
 8003c1a:	4b73      	ldr	r3, [pc, #460]	; (8003de8 <HAL_RCC_OscConfig+0x4f4>)
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
 8003c1e:	4a72      	ldr	r2, [pc, #456]	; (8003de8 <HAL_RCC_OscConfig+0x4f4>)
 8003c20:	f023 0304 	bic.w	r3, r3, #4
 8003c24:	6213      	str	r3, [r2, #32]
 8003c26:	e01c      	b.n	8003c62 <HAL_RCC_OscConfig+0x36e>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	2b05      	cmp	r3, #5
 8003c2e:	d10c      	bne.n	8003c4a <HAL_RCC_OscConfig+0x356>
 8003c30:	4b6d      	ldr	r3, [pc, #436]	; (8003de8 <HAL_RCC_OscConfig+0x4f4>)
 8003c32:	6a1b      	ldr	r3, [r3, #32]
 8003c34:	4a6c      	ldr	r2, [pc, #432]	; (8003de8 <HAL_RCC_OscConfig+0x4f4>)
 8003c36:	f043 0304 	orr.w	r3, r3, #4
 8003c3a:	6213      	str	r3, [r2, #32]
 8003c3c:	4b6a      	ldr	r3, [pc, #424]	; (8003de8 <HAL_RCC_OscConfig+0x4f4>)
 8003c3e:	6a1b      	ldr	r3, [r3, #32]
 8003c40:	4a69      	ldr	r2, [pc, #420]	; (8003de8 <HAL_RCC_OscConfig+0x4f4>)
 8003c42:	f043 0301 	orr.w	r3, r3, #1
 8003c46:	6213      	str	r3, [r2, #32]
 8003c48:	e00b      	b.n	8003c62 <HAL_RCC_OscConfig+0x36e>
 8003c4a:	4b67      	ldr	r3, [pc, #412]	; (8003de8 <HAL_RCC_OscConfig+0x4f4>)
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	4a66      	ldr	r2, [pc, #408]	; (8003de8 <HAL_RCC_OscConfig+0x4f4>)
 8003c50:	f023 0301 	bic.w	r3, r3, #1
 8003c54:	6213      	str	r3, [r2, #32]
 8003c56:	4b64      	ldr	r3, [pc, #400]	; (8003de8 <HAL_RCC_OscConfig+0x4f4>)
 8003c58:	6a1b      	ldr	r3, [r3, #32]
 8003c5a:	4a63      	ldr	r2, [pc, #396]	; (8003de8 <HAL_RCC_OscConfig+0x4f4>)
 8003c5c:	f023 0304 	bic.w	r3, r3, #4
 8003c60:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d015      	beq.n	8003c96 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c6a:	f7ff fb2b 	bl	80032c4 <HAL_GetTick>
 8003c6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c70:	e00a      	b.n	8003c88 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c72:	f7ff fb27 	bl	80032c4 <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d901      	bls.n	8003c88 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e0ab      	b.n	8003de0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c88:	4b57      	ldr	r3, [pc, #348]	; (8003de8 <HAL_RCC_OscConfig+0x4f4>)
 8003c8a:	6a1b      	ldr	r3, [r3, #32]
 8003c8c:	f003 0302 	and.w	r3, r3, #2
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d0ee      	beq.n	8003c72 <HAL_RCC_OscConfig+0x37e>
 8003c94:	e014      	b.n	8003cc0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c96:	f7ff fb15 	bl	80032c4 <HAL_GetTick>
 8003c9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c9c:	e00a      	b.n	8003cb4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c9e:	f7ff fb11 	bl	80032c4 <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d901      	bls.n	8003cb4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e095      	b.n	8003de0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cb4:	4b4c      	ldr	r3, [pc, #304]	; (8003de8 <HAL_RCC_OscConfig+0x4f4>)
 8003cb6:	6a1b      	ldr	r3, [r3, #32]
 8003cb8:	f003 0302 	and.w	r3, r3, #2
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d1ee      	bne.n	8003c9e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003cc0:	7dfb      	ldrb	r3, [r7, #23]
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d105      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cc6:	4b48      	ldr	r3, [pc, #288]	; (8003de8 <HAL_RCC_OscConfig+0x4f4>)
 8003cc8:	69db      	ldr	r3, [r3, #28]
 8003cca:	4a47      	ldr	r2, [pc, #284]	; (8003de8 <HAL_RCC_OscConfig+0x4f4>)
 8003ccc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cd0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	69db      	ldr	r3, [r3, #28]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	f000 8081 	beq.w	8003dde <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cdc:	4b42      	ldr	r3, [pc, #264]	; (8003de8 <HAL_RCC_OscConfig+0x4f4>)
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f003 030c 	and.w	r3, r3, #12
 8003ce4:	2b08      	cmp	r3, #8
 8003ce6:	d061      	beq.n	8003dac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	69db      	ldr	r3, [r3, #28]
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d146      	bne.n	8003d7e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cf0:	4b3f      	ldr	r3, [pc, #252]	; (8003df0 <HAL_RCC_OscConfig+0x4fc>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf6:	f7ff fae5 	bl	80032c4 <HAL_GetTick>
 8003cfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cfc:	e008      	b.n	8003d10 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cfe:	f7ff fae1 	bl	80032c4 <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d901      	bls.n	8003d10 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e067      	b.n	8003de0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d10:	4b35      	ldr	r3, [pc, #212]	; (8003de8 <HAL_RCC_OscConfig+0x4f4>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d1f0      	bne.n	8003cfe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6a1b      	ldr	r3, [r3, #32]
 8003d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d24:	d108      	bne.n	8003d38 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003d26:	4b30      	ldr	r3, [pc, #192]	; (8003de8 <HAL_RCC_OscConfig+0x4f4>)
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	492d      	ldr	r1, [pc, #180]	; (8003de8 <HAL_RCC_OscConfig+0x4f4>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d38:	4b2b      	ldr	r3, [pc, #172]	; (8003de8 <HAL_RCC_OscConfig+0x4f4>)
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a19      	ldr	r1, [r3, #32]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d48:	430b      	orrs	r3, r1
 8003d4a:	4927      	ldr	r1, [pc, #156]	; (8003de8 <HAL_RCC_OscConfig+0x4f4>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d50:	4b27      	ldr	r3, [pc, #156]	; (8003df0 <HAL_RCC_OscConfig+0x4fc>)
 8003d52:	2201      	movs	r2, #1
 8003d54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d56:	f7ff fab5 	bl	80032c4 <HAL_GetTick>
 8003d5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d5c:	e008      	b.n	8003d70 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d5e:	f7ff fab1 	bl	80032c4 <HAL_GetTick>
 8003d62:	4602      	mov	r2, r0
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d901      	bls.n	8003d70 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e037      	b.n	8003de0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d70:	4b1d      	ldr	r3, [pc, #116]	; (8003de8 <HAL_RCC_OscConfig+0x4f4>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d0f0      	beq.n	8003d5e <HAL_RCC_OscConfig+0x46a>
 8003d7c:	e02f      	b.n	8003dde <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d7e:	4b1c      	ldr	r3, [pc, #112]	; (8003df0 <HAL_RCC_OscConfig+0x4fc>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d84:	f7ff fa9e 	bl	80032c4 <HAL_GetTick>
 8003d88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d8a:	e008      	b.n	8003d9e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d8c:	f7ff fa9a 	bl	80032c4 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d901      	bls.n	8003d9e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e020      	b.n	8003de0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d9e:	4b12      	ldr	r3, [pc, #72]	; (8003de8 <HAL_RCC_OscConfig+0x4f4>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1f0      	bne.n	8003d8c <HAL_RCC_OscConfig+0x498>
 8003daa:	e018      	b.n	8003dde <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	69db      	ldr	r3, [r3, #28]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d101      	bne.n	8003db8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e013      	b.n	8003de0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003db8:	4b0b      	ldr	r3, [pc, #44]	; (8003de8 <HAL_RCC_OscConfig+0x4f4>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a1b      	ldr	r3, [r3, #32]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d106      	bne.n	8003dda <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d001      	beq.n	8003dde <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e000      	b.n	8003de0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3718      	adds	r7, #24
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	40021000 	.word	0x40021000
 8003dec:	40007000 	.word	0x40007000
 8003df0:	42420060 	.word	0x42420060

08003df4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d101      	bne.n	8003e08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e0d0      	b.n	8003faa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e08:	4b6a      	ldr	r3, [pc, #424]	; (8003fb4 <HAL_RCC_ClockConfig+0x1c0>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0307 	and.w	r3, r3, #7
 8003e10:	683a      	ldr	r2, [r7, #0]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d910      	bls.n	8003e38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e16:	4b67      	ldr	r3, [pc, #412]	; (8003fb4 <HAL_RCC_ClockConfig+0x1c0>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f023 0207 	bic.w	r2, r3, #7
 8003e1e:	4965      	ldr	r1, [pc, #404]	; (8003fb4 <HAL_RCC_ClockConfig+0x1c0>)
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e26:	4b63      	ldr	r3, [pc, #396]	; (8003fb4 <HAL_RCC_ClockConfig+0x1c0>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0307 	and.w	r3, r3, #7
 8003e2e:	683a      	ldr	r2, [r7, #0]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d001      	beq.n	8003e38 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e0b8      	b.n	8003faa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0302 	and.w	r3, r3, #2
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d020      	beq.n	8003e86 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0304 	and.w	r3, r3, #4
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d005      	beq.n	8003e5c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e50:	4b59      	ldr	r3, [pc, #356]	; (8003fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	4a58      	ldr	r2, [pc, #352]	; (8003fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e56:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003e5a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0308 	and.w	r3, r3, #8
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d005      	beq.n	8003e74 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e68:	4b53      	ldr	r3, [pc, #332]	; (8003fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	4a52      	ldr	r2, [pc, #328]	; (8003fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e6e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003e72:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e74:	4b50      	ldr	r3, [pc, #320]	; (8003fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	494d      	ldr	r1, [pc, #308]	; (8003fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0301 	and.w	r3, r3, #1
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d040      	beq.n	8003f14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d107      	bne.n	8003eaa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e9a:	4b47      	ldr	r3, [pc, #284]	; (8003fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d115      	bne.n	8003ed2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e07f      	b.n	8003faa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d107      	bne.n	8003ec2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eb2:	4b41      	ldr	r3, [pc, #260]	; (8003fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d109      	bne.n	8003ed2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e073      	b.n	8003faa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ec2:	4b3d      	ldr	r3, [pc, #244]	; (8003fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d101      	bne.n	8003ed2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e06b      	b.n	8003faa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ed2:	4b39      	ldr	r3, [pc, #228]	; (8003fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f023 0203 	bic.w	r2, r3, #3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	4936      	ldr	r1, [pc, #216]	; (8003fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ee4:	f7ff f9ee 	bl	80032c4 <HAL_GetTick>
 8003ee8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eea:	e00a      	b.n	8003f02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eec:	f7ff f9ea 	bl	80032c4 <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e053      	b.n	8003faa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f02:	4b2d      	ldr	r3, [pc, #180]	; (8003fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f003 020c 	and.w	r2, r3, #12
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d1eb      	bne.n	8003eec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f14:	4b27      	ldr	r3, [pc, #156]	; (8003fb4 <HAL_RCC_ClockConfig+0x1c0>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0307 	and.w	r3, r3, #7
 8003f1c:	683a      	ldr	r2, [r7, #0]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d210      	bcs.n	8003f44 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f22:	4b24      	ldr	r3, [pc, #144]	; (8003fb4 <HAL_RCC_ClockConfig+0x1c0>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f023 0207 	bic.w	r2, r3, #7
 8003f2a:	4922      	ldr	r1, [pc, #136]	; (8003fb4 <HAL_RCC_ClockConfig+0x1c0>)
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f32:	4b20      	ldr	r3, [pc, #128]	; (8003fb4 <HAL_RCC_ClockConfig+0x1c0>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0307 	and.w	r3, r3, #7
 8003f3a:	683a      	ldr	r2, [r7, #0]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d001      	beq.n	8003f44 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e032      	b.n	8003faa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0304 	and.w	r3, r3, #4
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d008      	beq.n	8003f62 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f50:	4b19      	ldr	r3, [pc, #100]	; (8003fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	4916      	ldr	r1, [pc, #88]	; (8003fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0308 	and.w	r3, r3, #8
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d009      	beq.n	8003f82 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f6e:	4b12      	ldr	r3, [pc, #72]	; (8003fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	00db      	lsls	r3, r3, #3
 8003f7c:	490e      	ldr	r1, [pc, #56]	; (8003fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f82:	f000 f821 	bl	8003fc8 <HAL_RCC_GetSysClockFreq>
 8003f86:	4601      	mov	r1, r0
 8003f88:	4b0b      	ldr	r3, [pc, #44]	; (8003fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	091b      	lsrs	r3, r3, #4
 8003f8e:	f003 030f 	and.w	r3, r3, #15
 8003f92:	4a0a      	ldr	r2, [pc, #40]	; (8003fbc <HAL_RCC_ClockConfig+0x1c8>)
 8003f94:	5cd3      	ldrb	r3, [r2, r3]
 8003f96:	fa21 f303 	lsr.w	r3, r1, r3
 8003f9a:	4a09      	ldr	r2, [pc, #36]	; (8003fc0 <HAL_RCC_ClockConfig+0x1cc>)
 8003f9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f9e:	4b09      	ldr	r3, [pc, #36]	; (8003fc4 <HAL_RCC_ClockConfig+0x1d0>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7ff f94c 	bl	8003240 <HAL_InitTick>

  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3710      	adds	r7, #16
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	40022000 	.word	0x40022000
 8003fb8:	40021000 	.word	0x40021000
 8003fbc:	08006b3c 	.word	0x08006b3c
 8003fc0:	20000004 	.word	0x20000004
 8003fc4:	20000008 	.word	0x20000008

08003fc8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fc8:	b490      	push	{r4, r7}
 8003fca:	b08a      	sub	sp, #40	; 0x28
 8003fcc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003fce:	4b2a      	ldr	r3, [pc, #168]	; (8004078 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003fd0:	1d3c      	adds	r4, r7, #4
 8003fd2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003fd4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003fd8:	4b28      	ldr	r3, [pc, #160]	; (800407c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003fda:	881b      	ldrh	r3, [r3, #0]
 8003fdc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	61fb      	str	r3, [r7, #28]
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	61bb      	str	r3, [r7, #24]
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	627b      	str	r3, [r7, #36]	; 0x24
 8003fea:	2300      	movs	r3, #0
 8003fec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003ff2:	4b23      	ldr	r3, [pc, #140]	; (8004080 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	f003 030c 	and.w	r3, r3, #12
 8003ffe:	2b04      	cmp	r3, #4
 8004000:	d002      	beq.n	8004008 <HAL_RCC_GetSysClockFreq+0x40>
 8004002:	2b08      	cmp	r3, #8
 8004004:	d003      	beq.n	800400e <HAL_RCC_GetSysClockFreq+0x46>
 8004006:	e02d      	b.n	8004064 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004008:	4b1e      	ldr	r3, [pc, #120]	; (8004084 <HAL_RCC_GetSysClockFreq+0xbc>)
 800400a:	623b      	str	r3, [r7, #32]
      break;
 800400c:	e02d      	b.n	800406a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	0c9b      	lsrs	r3, r3, #18
 8004012:	f003 030f 	and.w	r3, r3, #15
 8004016:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800401a:	4413      	add	r3, r2
 800401c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004020:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d013      	beq.n	8004054 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800402c:	4b14      	ldr	r3, [pc, #80]	; (8004080 <HAL_RCC_GetSysClockFreq+0xb8>)
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	0c5b      	lsrs	r3, r3, #17
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800403a:	4413      	add	r3, r2
 800403c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004040:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	4a0f      	ldr	r2, [pc, #60]	; (8004084 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004046:	fb02 f203 	mul.w	r2, r2, r3
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004050:	627b      	str	r3, [r7, #36]	; 0x24
 8004052:	e004      	b.n	800405e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	4a0c      	ldr	r2, [pc, #48]	; (8004088 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004058:	fb02 f303 	mul.w	r3, r2, r3
 800405c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800405e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004060:	623b      	str	r3, [r7, #32]
      break;
 8004062:	e002      	b.n	800406a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004064:	4b07      	ldr	r3, [pc, #28]	; (8004084 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004066:	623b      	str	r3, [r7, #32]
      break;
 8004068:	bf00      	nop
    }
  }
  return sysclockfreq;
 800406a:	6a3b      	ldr	r3, [r7, #32]
}
 800406c:	4618      	mov	r0, r3
 800406e:	3728      	adds	r7, #40	; 0x28
 8004070:	46bd      	mov	sp, r7
 8004072:	bc90      	pop	{r4, r7}
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	08006b14 	.word	0x08006b14
 800407c:	08006b24 	.word	0x08006b24
 8004080:	40021000 	.word	0x40021000
 8004084:	007a1200 	.word	0x007a1200
 8004088:	003d0900 	.word	0x003d0900

0800408c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800408c:	b480      	push	{r7}
 800408e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004090:	4b02      	ldr	r3, [pc, #8]	; (800409c <HAL_RCC_GetHCLKFreq+0x10>)
 8004092:	681b      	ldr	r3, [r3, #0]
}
 8004094:	4618      	mov	r0, r3
 8004096:	46bd      	mov	sp, r7
 8004098:	bc80      	pop	{r7}
 800409a:	4770      	bx	lr
 800409c:	20000004 	.word	0x20000004

080040a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80040a4:	f7ff fff2 	bl	800408c <HAL_RCC_GetHCLKFreq>
 80040a8:	4601      	mov	r1, r0
 80040aa:	4b05      	ldr	r3, [pc, #20]	; (80040c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	0adb      	lsrs	r3, r3, #11
 80040b0:	f003 0307 	and.w	r3, r3, #7
 80040b4:	4a03      	ldr	r2, [pc, #12]	; (80040c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040b6:	5cd3      	ldrb	r3, [r2, r3]
 80040b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80040bc:	4618      	mov	r0, r3
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	40021000 	.word	0x40021000
 80040c4:	08006b4c 	.word	0x08006b4c

080040c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b085      	sub	sp, #20
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80040d0:	4b0a      	ldr	r3, [pc, #40]	; (80040fc <RCC_Delay+0x34>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a0a      	ldr	r2, [pc, #40]	; (8004100 <RCC_Delay+0x38>)
 80040d6:	fba2 2303 	umull	r2, r3, r2, r3
 80040da:	0a5b      	lsrs	r3, r3, #9
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	fb02 f303 	mul.w	r3, r2, r3
 80040e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80040e4:	bf00      	nop
  }
  while (Delay --);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	1e5a      	subs	r2, r3, #1
 80040ea:	60fa      	str	r2, [r7, #12]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d1f9      	bne.n	80040e4 <RCC_Delay+0x1c>
}
 80040f0:	bf00      	nop
 80040f2:	3714      	adds	r7, #20
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bc80      	pop	{r7}
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	20000004 	.word	0x20000004
 8004100:	10624dd3 	.word	0x10624dd3

08004104 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b086      	sub	sp, #24
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800410c:	2300      	movs	r3, #0
 800410e:	613b      	str	r3, [r7, #16]
 8004110:	2300      	movs	r3, #0
 8004112:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0301 	and.w	r3, r3, #1
 800411c:	2b00      	cmp	r3, #0
 800411e:	d07d      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004120:	2300      	movs	r3, #0
 8004122:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004124:	4b4f      	ldr	r3, [pc, #316]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004126:	69db      	ldr	r3, [r3, #28]
 8004128:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d10d      	bne.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004130:	4b4c      	ldr	r3, [pc, #304]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004132:	69db      	ldr	r3, [r3, #28]
 8004134:	4a4b      	ldr	r2, [pc, #300]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004136:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800413a:	61d3      	str	r3, [r2, #28]
 800413c:	4b49      	ldr	r3, [pc, #292]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800413e:	69db      	ldr	r3, [r3, #28]
 8004140:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004144:	60bb      	str	r3, [r7, #8]
 8004146:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004148:	2301      	movs	r3, #1
 800414a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800414c:	4b46      	ldr	r3, [pc, #280]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004154:	2b00      	cmp	r3, #0
 8004156:	d118      	bne.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004158:	4b43      	ldr	r3, [pc, #268]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a42      	ldr	r2, [pc, #264]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800415e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004162:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004164:	f7ff f8ae 	bl	80032c4 <HAL_GetTick>
 8004168:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800416a:	e008      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800416c:	f7ff f8aa 	bl	80032c4 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	2b64      	cmp	r3, #100	; 0x64
 8004178:	d901      	bls.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e06d      	b.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800417e:	4b3a      	ldr	r3, [pc, #232]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004186:	2b00      	cmp	r3, #0
 8004188:	d0f0      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800418a:	4b36      	ldr	r3, [pc, #216]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800418c:	6a1b      	ldr	r3, [r3, #32]
 800418e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004192:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d02e      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d027      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041a8:	4b2e      	ldr	r3, [pc, #184]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041aa:	6a1b      	ldr	r3, [r3, #32]
 80041ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041b0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80041b2:	4b2e      	ldr	r3, [pc, #184]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80041b4:	2201      	movs	r2, #1
 80041b6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80041b8:	4b2c      	ldr	r3, [pc, #176]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80041ba:	2200      	movs	r2, #0
 80041bc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80041be:	4a29      	ldr	r2, [pc, #164]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f003 0301 	and.w	r3, r3, #1
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d014      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ce:	f7ff f879 	bl	80032c4 <HAL_GetTick>
 80041d2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041d4:	e00a      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041d6:	f7ff f875 	bl	80032c4 <HAL_GetTick>
 80041da:	4602      	mov	r2, r0
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d901      	bls.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e036      	b.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041ec:	4b1d      	ldr	r3, [pc, #116]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041ee:	6a1b      	ldr	r3, [r3, #32]
 80041f0:	f003 0302 	and.w	r3, r3, #2
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d0ee      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041f8:	4b1a      	ldr	r3, [pc, #104]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041fa:	6a1b      	ldr	r3, [r3, #32]
 80041fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	4917      	ldr	r1, [pc, #92]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004206:	4313      	orrs	r3, r2
 8004208:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800420a:	7dfb      	ldrb	r3, [r7, #23]
 800420c:	2b01      	cmp	r3, #1
 800420e:	d105      	bne.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004210:	4b14      	ldr	r3, [pc, #80]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004212:	69db      	ldr	r3, [r3, #28]
 8004214:	4a13      	ldr	r2, [pc, #76]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004216:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800421a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0302 	and.w	r3, r3, #2
 8004224:	2b00      	cmp	r3, #0
 8004226:	d008      	beq.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004228:	4b0e      	ldr	r3, [pc, #56]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	490b      	ldr	r1, [pc, #44]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004236:	4313      	orrs	r3, r2
 8004238:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0310 	and.w	r3, r3, #16
 8004242:	2b00      	cmp	r3, #0
 8004244:	d008      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004246:	4b07      	ldr	r3, [pc, #28]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	4904      	ldr	r1, [pc, #16]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004254:	4313      	orrs	r3, r2
 8004256:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3718      	adds	r7, #24
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	40021000 	.word	0x40021000
 8004268:	40007000 	.word	0x40007000
 800426c:	42420440 	.word	0x42420440

08004270 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004270:	b590      	push	{r4, r7, lr}
 8004272:	b08d      	sub	sp, #52	; 0x34
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004278:	4b55      	ldr	r3, [pc, #340]	; (80043d0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800427a:	f107 040c 	add.w	r4, r7, #12
 800427e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004280:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004284:	4b53      	ldr	r3, [pc, #332]	; (80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004286:	881b      	ldrh	r3, [r3, #0]
 8004288:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800428a:	2300      	movs	r3, #0
 800428c:	627b      	str	r3, [r7, #36]	; 0x24
 800428e:	2300      	movs	r3, #0
 8004290:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004292:	2300      	movs	r3, #0
 8004294:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004296:	2300      	movs	r3, #0
 8004298:	61fb      	str	r3, [r7, #28]
 800429a:	2300      	movs	r3, #0
 800429c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	d07f      	beq.n	80043a4 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80042a4:	2b10      	cmp	r3, #16
 80042a6:	d002      	beq.n	80042ae <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d048      	beq.n	800433e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80042ac:	e08b      	b.n	80043c6 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 80042ae:	4b4a      	ldr	r3, [pc, #296]	; (80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80042b4:	4b48      	ldr	r3, [pc, #288]	; (80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d07f      	beq.n	80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	0c9b      	lsrs	r3, r3, #18
 80042c4:	f003 030f 	and.w	r3, r3, #15
 80042c8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80042cc:	4413      	add	r3, r2
 80042ce:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80042d2:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d018      	beq.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80042de:	4b3e      	ldr	r3, [pc, #248]	; (80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	0c5b      	lsrs	r3, r3, #17
 80042e4:	f003 0301 	and.w	r3, r3, #1
 80042e8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80042ec:	4413      	add	r3, r2
 80042ee:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80042f2:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00d      	beq.n	800431a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80042fe:	4a37      	ldr	r2, [pc, #220]	; (80043dc <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8004300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004302:	fbb2 f2f3 	udiv	r2, r2, r3
 8004306:	6a3b      	ldr	r3, [r7, #32]
 8004308:	fb02 f303 	mul.w	r3, r2, r3
 800430c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800430e:	e004      	b.n	800431a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004310:	6a3b      	ldr	r3, [r7, #32]
 8004312:	4a33      	ldr	r2, [pc, #204]	; (80043e0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004314:	fb02 f303 	mul.w	r3, r2, r3
 8004318:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800431a:	4b2f      	ldr	r3, [pc, #188]	; (80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004322:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004326:	d102      	bne.n	800432e <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8004328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800432a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800432c:	e048      	b.n	80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 800432e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004330:	005b      	lsls	r3, r3, #1
 8004332:	4a2c      	ldr	r2, [pc, #176]	; (80043e4 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8004334:	fba2 2303 	umull	r2, r3, r2, r3
 8004338:	085b      	lsrs	r3, r3, #1
 800433a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800433c:	e040      	b.n	80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 800433e:	4b26      	ldr	r3, [pc, #152]	; (80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004340:	6a1b      	ldr	r3, [r3, #32]
 8004342:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800434a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800434e:	d108      	bne.n	8004362 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	f003 0302 	and.w	r3, r3, #2
 8004356:	2b00      	cmp	r3, #0
 8004358:	d003      	beq.n	8004362 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 800435a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800435e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004360:	e01f      	b.n	80043a2 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004368:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800436c:	d109      	bne.n	8004382 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800436e:	4b1a      	ldr	r3, [pc, #104]	; (80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b00      	cmp	r3, #0
 8004378:	d003      	beq.n	8004382 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 800437a:	f649 4340 	movw	r3, #40000	; 0x9c40
 800437e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004380:	e00f      	b.n	80043a2 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004388:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800438c:	d11a      	bne.n	80043c4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800438e:	4b12      	ldr	r3, [pc, #72]	; (80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d014      	beq.n	80043c4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 800439a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800439e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80043a0:	e010      	b.n	80043c4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80043a2:	e00f      	b.n	80043c4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80043a4:	f7ff fe7c 	bl	80040a0 <HAL_RCC_GetPCLK2Freq>
 80043a8:	4602      	mov	r2, r0
 80043aa:	4b0b      	ldr	r3, [pc, #44]	; (80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	0b9b      	lsrs	r3, r3, #14
 80043b0:	f003 0303 	and.w	r3, r3, #3
 80043b4:	3301      	adds	r3, #1
 80043b6:	005b      	lsls	r3, r3, #1
 80043b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043bc:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80043be:	e002      	b.n	80043c6 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80043c0:	bf00      	nop
 80043c2:	e000      	b.n	80043c6 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80043c4:	bf00      	nop
    }
  }
  return (frequency);
 80043c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3734      	adds	r7, #52	; 0x34
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd90      	pop	{r4, r7, pc}
 80043d0:	08006b28 	.word	0x08006b28
 80043d4:	08006b38 	.word	0x08006b38
 80043d8:	40021000 	.word	0x40021000
 80043dc:	007a1200 	.word	0x007a1200
 80043e0:	003d0900 	.word	0x003d0900
 80043e4:	aaaaaaab 	.word	0xaaaaaaab

080043e8 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80043f0:	2300      	movs	r3, #0
 80043f2:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e084      	b.n	8004508 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	7c5b      	ldrb	r3, [r3, #17]
 8004402:	b2db      	uxtb	r3, r3
 8004404:	2b00      	cmp	r3, #0
 8004406:	d105      	bne.n	8004414 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f7fc fcf0 	bl	8000df4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2202      	movs	r2, #2
 8004418:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 fbd0 	bl	8004bc0 <HAL_RTC_WaitForSynchro>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d004      	beq.n	8004430 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2204      	movs	r2, #4
 800442a:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e06b      	b.n	8004508 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 fc89 	bl	8004d48 <RTC_EnterInitMode>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d004      	beq.n	8004446 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2204      	movs	r2, #4
 8004440:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e060      	b.n	8004508 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	685a      	ldr	r2, [r3, #4]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f022 0207 	bic.w	r2, r2, #7
 8004454:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d005      	beq.n	800446a <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800445e:	4b2c      	ldr	r3, [pc, #176]	; (8004510 <HAL_RTC_Init+0x128>)
 8004460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004462:	4a2b      	ldr	r2, [pc, #172]	; (8004510 <HAL_RTC_Init+0x128>)
 8004464:	f023 0301 	bic.w	r3, r3, #1
 8004468:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800446a:	4b29      	ldr	r3, [pc, #164]	; (8004510 <HAL_RTC_Init+0x128>)
 800446c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800446e:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	4926      	ldr	r1, [pc, #152]	; (8004510 <HAL_RTC_Init+0x128>)
 8004478:	4313      	orrs	r3, r2
 800447a:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004484:	d003      	beq.n	800448e <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	60fb      	str	r3, [r7, #12]
 800448c:	e00e      	b.n	80044ac <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800448e:	2001      	movs	r0, #1
 8004490:	f7ff feee 	bl	8004270 <HAL_RCCEx_GetPeriphCLKFreq>
 8004494:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d104      	bne.n	80044a6 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2204      	movs	r2, #4
 80044a0:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e030      	b.n	8004508 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	3b01      	subs	r3, #1
 80044aa:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f023 010f 	bic.w	r1, r3, #15
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	0c1a      	lsrs	r2, r3, #16
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	430a      	orrs	r2, r1
 80044c0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	0c1b      	lsrs	r3, r3, #16
 80044ca:	041b      	lsls	r3, r3, #16
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	b291      	uxth	r1, r2
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	6812      	ldr	r2, [r2, #0]
 80044d4:	430b      	orrs	r3, r1
 80044d6:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f000 fc5d 	bl	8004d98 <RTC_ExitInitMode>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d004      	beq.n	80044ee <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2204      	movs	r2, #4
 80044e8:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e00c      	b.n	8004508 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2201      	movs	r2, #1
 80044fe:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8004506:	2300      	movs	r3, #0
  }
}
 8004508:	4618      	mov	r0, r3
 800450a:	3710      	adds	r7, #16
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	40006c00 	.word	0x40006c00

08004514 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004514:	b590      	push	{r4, r7, lr}
 8004516:	b087      	sub	sp, #28
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8004520:	2300      	movs	r3, #0
 8004522:	617b      	str	r3, [r7, #20]
 8004524:	2300      	movs	r3, #0
 8004526:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d002      	beq.n	8004534 <HAL_RTC_SetTime+0x20>
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d101      	bne.n	8004538 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e080      	b.n	800463a <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	7c1b      	ldrb	r3, [r3, #16]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d101      	bne.n	8004544 <HAL_RTC_SetTime+0x30>
 8004540:	2302      	movs	r3, #2
 8004542:	e07a      	b.n	800463a <HAL_RTC_SetTime+0x126>
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2201      	movs	r2, #1
 8004548:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2202      	movs	r2, #2
 800454e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d113      	bne.n	800457e <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	461a      	mov	r2, r3
 800455c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004560:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	785b      	ldrb	r3, [r3, #1]
 8004568:	4619      	mov	r1, r3
 800456a:	460b      	mov	r3, r1
 800456c:	011b      	lsls	r3, r3, #4
 800456e:	1a5b      	subs	r3, r3, r1
 8004570:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004572:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8004574:	68ba      	ldr	r2, [r7, #8]
 8004576:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004578:	4413      	add	r3, r2
 800457a:	617b      	str	r3, [r7, #20]
 800457c:	e01e      	b.n	80045bc <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	4618      	mov	r0, r3
 8004584:	f000 fc4d 	bl	8004e22 <RTC_Bcd2ToByte>
 8004588:	4603      	mov	r3, r0
 800458a:	461a      	mov	r2, r3
 800458c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004590:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	785b      	ldrb	r3, [r3, #1]
 8004598:	4618      	mov	r0, r3
 800459a:	f000 fc42 	bl	8004e22 <RTC_Bcd2ToByte>
 800459e:	4603      	mov	r3, r0
 80045a0:	461a      	mov	r2, r3
 80045a2:	4613      	mov	r3, r2
 80045a4:	011b      	lsls	r3, r3, #4
 80045a6:	1a9b      	subs	r3, r3, r2
 80045a8:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80045aa:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	789b      	ldrb	r3, [r3, #2]
 80045b0:	4618      	mov	r0, r3
 80045b2:	f000 fc36 	bl	8004e22 <RTC_Bcd2ToByte>
 80045b6:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80045b8:	4423      	add	r3, r4
 80045ba:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80045bc:	6979      	ldr	r1, [r7, #20]
 80045be:	68f8      	ldr	r0, [r7, #12]
 80045c0:	f000 fb5b 	bl	8004c7a <RTC_WriteTimeCounter>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d007      	beq.n	80045da <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2204      	movs	r2, #4
 80045ce:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2200      	movs	r2, #0
 80045d4:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e02f      	b.n	800463a <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	685a      	ldr	r2, [r3, #4]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f022 0205 	bic.w	r2, r2, #5
 80045e8:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80045ea:	68f8      	ldr	r0, [r7, #12]
 80045ec:	f000 fb6c 	bl	8004cc8 <RTC_ReadAlarmCounter>
 80045f0:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f8:	d018      	beq.n	800462c <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 80045fa:	693a      	ldr	r2, [r7, #16]
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d214      	bcs.n	800462c <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8004608:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800460c:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800460e:	6939      	ldr	r1, [r7, #16]
 8004610:	68f8      	ldr	r0, [r7, #12]
 8004612:	f000 fb72 	bl	8004cfa <RTC_WriteAlarmCounter>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d007      	beq.n	800462c <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2204      	movs	r2, #4
 8004620:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2200      	movs	r2, #0
 8004626:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e006      	b.n	800463a <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2201      	movs	r2, #1
 8004630:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8004638:	2300      	movs	r3, #0
  }
}
 800463a:	4618      	mov	r0, r3
 800463c:	371c      	adds	r7, #28
 800463e:	46bd      	mov	sp, r7
 8004640:	bd90      	pop	{r4, r7, pc}
	...

08004644 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b088      	sub	sp, #32
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8004650:	2300      	movs	r3, #0
 8004652:	61bb      	str	r3, [r7, #24]
 8004654:	2300      	movs	r3, #0
 8004656:	61fb      	str	r3, [r7, #28]
 8004658:	2300      	movs	r3, #0
 800465a:	617b      	str	r3, [r7, #20]
 800465c:	2300      	movs	r3, #0
 800465e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d002      	beq.n	800466c <HAL_RTC_GetTime+0x28>
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d101      	bne.n	8004670 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e0b5      	b.n	80047dc <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	f003 0304 	and.w	r3, r3, #4
 800467a:	2b00      	cmp	r3, #0
 800467c:	d001      	beq.n	8004682 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e0ac      	b.n	80047dc <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8004682:	68f8      	ldr	r0, [r7, #12]
 8004684:	f000 fac9 	bl	8004c1a <RTC_ReadTimeCounter>
 8004688:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	4a55      	ldr	r2, [pc, #340]	; (80047e4 <HAL_RTC_GetTime+0x1a0>)
 800468e:	fba2 2303 	umull	r2, r3, r2, r3
 8004692:	0adb      	lsrs	r3, r3, #11
 8004694:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8004696:	69ba      	ldr	r2, [r7, #24]
 8004698:	4b52      	ldr	r3, [pc, #328]	; (80047e4 <HAL_RTC_GetTime+0x1a0>)
 800469a:	fba3 1302 	umull	r1, r3, r3, r2
 800469e:	0adb      	lsrs	r3, r3, #11
 80046a0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80046a4:	fb01 f303 	mul.w	r3, r1, r3
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	4a4f      	ldr	r2, [pc, #316]	; (80047e8 <HAL_RTC_GetTime+0x1a4>)
 80046ac:	fba2 2303 	umull	r2, r3, r2, r3
 80046b0:	095b      	lsrs	r3, r3, #5
 80046b2:	b2da      	uxtb	r2, r3
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	4a4a      	ldr	r2, [pc, #296]	; (80047e4 <HAL_RTC_GetTime+0x1a0>)
 80046bc:	fba2 1203 	umull	r1, r2, r2, r3
 80046c0:	0ad2      	lsrs	r2, r2, #11
 80046c2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80046c6:	fb01 f202 	mul.w	r2, r1, r2
 80046ca:	1a9a      	subs	r2, r3, r2
 80046cc:	4b46      	ldr	r3, [pc, #280]	; (80047e8 <HAL_RTC_GetTime+0x1a4>)
 80046ce:	fba3 1302 	umull	r1, r3, r3, r2
 80046d2:	0959      	lsrs	r1, r3, #5
 80046d4:	460b      	mov	r3, r1
 80046d6:	011b      	lsls	r3, r3, #4
 80046d8:	1a5b      	subs	r3, r3, r1
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	1ad1      	subs	r1, r2, r3
 80046de:	b2ca      	uxtb	r2, r1
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	2b17      	cmp	r3, #23
 80046e8:	d955      	bls.n	8004796 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	4a3f      	ldr	r2, [pc, #252]	; (80047ec <HAL_RTC_GetTime+0x1a8>)
 80046ee:	fba2 2303 	umull	r2, r3, r2, r3
 80046f2:	091b      	lsrs	r3, r3, #4
 80046f4:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 80046f6:	6939      	ldr	r1, [r7, #16]
 80046f8:	4b3c      	ldr	r3, [pc, #240]	; (80047ec <HAL_RTC_GetTime+0x1a8>)
 80046fa:	fba3 2301 	umull	r2, r3, r3, r1
 80046fe:	091a      	lsrs	r2, r3, #4
 8004700:	4613      	mov	r3, r2
 8004702:	005b      	lsls	r3, r3, #1
 8004704:	4413      	add	r3, r2
 8004706:	00db      	lsls	r3, r3, #3
 8004708:	1aca      	subs	r2, r1, r3
 800470a:	b2d2      	uxtb	r2, r2
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004710:	68f8      	ldr	r0, [r7, #12]
 8004712:	f000 fad9 	bl	8004cc8 <RTC_ReadAlarmCounter>
 8004716:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800471e:	d008      	beq.n	8004732 <HAL_RTC_GetTime+0xee>
 8004720:	69fa      	ldr	r2, [r7, #28]
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	429a      	cmp	r2, r3
 8004726:	d904      	bls.n	8004732 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8004728:	69fa      	ldr	r2, [r7, #28]
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	61fb      	str	r3, [r7, #28]
 8004730:	e002      	b.n	8004738 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8004732:	f04f 33ff 	mov.w	r3, #4294967295
 8004736:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	4a2d      	ldr	r2, [pc, #180]	; (80047f0 <HAL_RTC_GetTime+0x1ac>)
 800473c:	fb02 f303 	mul.w	r3, r2, r3
 8004740:	69ba      	ldr	r2, [r7, #24]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004746:	69b9      	ldr	r1, [r7, #24]
 8004748:	68f8      	ldr	r0, [r7, #12]
 800474a:	f000 fa96 	bl	8004c7a <RTC_WriteTimeCounter>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d001      	beq.n	8004758 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e041      	b.n	80047dc <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800475e:	d00c      	beq.n	800477a <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8004760:	69fa      	ldr	r2, [r7, #28]
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	4413      	add	r3, r2
 8004766:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004768:	69f9      	ldr	r1, [r7, #28]
 800476a:	68f8      	ldr	r0, [r7, #12]
 800476c:	f000 fac5 	bl	8004cfa <RTC_WriteAlarmCounter>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00a      	beq.n	800478c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e030      	b.n	80047dc <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800477a:	69f9      	ldr	r1, [r7, #28]
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	f000 fabc 	bl	8004cfa <RTC_WriteAlarmCounter>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d001      	beq.n	800478c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e027      	b.n	80047dc <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 800478c:	6979      	ldr	r1, [r7, #20]
 800478e:	68f8      	ldr	r0, [r7, #12]
 8004790:	f000 fb64 	bl	8004e5c <RTC_DateUpdate>
 8004794:	e003      	b.n	800479e <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	b2da      	uxtb	r2, r3
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d01a      	beq.n	80047da <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	4618      	mov	r0, r3
 80047aa:	f000 fb1d 	bl	8004de8 <RTC_ByteToBcd2>
 80047ae:	4603      	mov	r3, r0
 80047b0:	461a      	mov	r2, r3
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	785b      	ldrb	r3, [r3, #1]
 80047ba:	4618      	mov	r0, r3
 80047bc:	f000 fb14 	bl	8004de8 <RTC_ByteToBcd2>
 80047c0:	4603      	mov	r3, r0
 80047c2:	461a      	mov	r2, r3
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	789b      	ldrb	r3, [r3, #2]
 80047cc:	4618      	mov	r0, r3
 80047ce:	f000 fb0b 	bl	8004de8 <RTC_ByteToBcd2>
 80047d2:	4603      	mov	r3, r0
 80047d4:	461a      	mov	r2, r3
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80047da:	2300      	movs	r3, #0
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3720      	adds	r7, #32
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	91a2b3c5 	.word	0x91a2b3c5
 80047e8:	88888889 	.word	0x88888889
 80047ec:	aaaaaaab 	.word	0xaaaaaaab
 80047f0:	00015180 	.word	0x00015180

080047f4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b088      	sub	sp, #32
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	60b9      	str	r1, [r7, #8]
 80047fe:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8004800:	2300      	movs	r3, #0
 8004802:	61fb      	str	r3, [r7, #28]
 8004804:	2300      	movs	r3, #0
 8004806:	61bb      	str	r3, [r7, #24]
 8004808:	2300      	movs	r3, #0
 800480a:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d002      	beq.n	8004818 <HAL_RTC_SetDate+0x24>
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d101      	bne.n	800481c <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e097      	b.n	800494c <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	7c1b      	ldrb	r3, [r3, #16]
 8004820:	2b01      	cmp	r3, #1
 8004822:	d101      	bne.n	8004828 <HAL_RTC_SetDate+0x34>
 8004824:	2302      	movs	r3, #2
 8004826:	e091      	b.n	800494c <HAL_RTC_SetDate+0x158>
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2201      	movs	r2, #1
 800482c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2202      	movs	r2, #2
 8004832:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d10c      	bne.n	8004854 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	78da      	ldrb	r2, [r3, #3]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	785a      	ldrb	r2, [r3, #1]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	789a      	ldrb	r2, [r3, #2]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	739a      	strb	r2, [r3, #14]
 8004852:	e01a      	b.n	800488a <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	78db      	ldrb	r3, [r3, #3]
 8004858:	4618      	mov	r0, r3
 800485a:	f000 fae2 	bl	8004e22 <RTC_Bcd2ToByte>
 800485e:	4603      	mov	r3, r0
 8004860:	461a      	mov	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	785b      	ldrb	r3, [r3, #1]
 800486a:	4618      	mov	r0, r3
 800486c:	f000 fad9 	bl	8004e22 <RTC_Bcd2ToByte>
 8004870:	4603      	mov	r3, r0
 8004872:	461a      	mov	r2, r3
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	789b      	ldrb	r3, [r3, #2]
 800487c:	4618      	mov	r0, r3
 800487e:	f000 fad0 	bl	8004e22 <RTC_Bcd2ToByte>
 8004882:	4603      	mov	r3, r0
 8004884:	461a      	mov	r2, r3
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	7bdb      	ldrb	r3, [r3, #15]
 800488e:	4618      	mov	r0, r3
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	7b59      	ldrb	r1, [r3, #13]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	7b9b      	ldrb	r3, [r3, #14]
 8004898:	461a      	mov	r2, r3
 800489a:	f000 fbbb 	bl	8005014 <RTC_WeekDayNum>
 800489e:	4603      	mov	r3, r0
 80048a0:	461a      	mov	r2, r3
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	7b1a      	ldrb	r2, [r3, #12]
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80048ae:	68f8      	ldr	r0, [r7, #12]
 80048b0:	f000 f9b3 	bl	8004c1a <RTC_ReadTimeCounter>
 80048b4:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	4a26      	ldr	r2, [pc, #152]	; (8004954 <HAL_RTC_SetDate+0x160>)
 80048ba:	fba2 2303 	umull	r2, r3, r2, r3
 80048be:	0adb      	lsrs	r3, r3, #11
 80048c0:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	2b18      	cmp	r3, #24
 80048c6:	d93a      	bls.n	800493e <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	4a23      	ldr	r2, [pc, #140]	; (8004958 <HAL_RTC_SetDate+0x164>)
 80048cc:	fba2 2303 	umull	r2, r3, r2, r3
 80048d0:	091b      	lsrs	r3, r3, #4
 80048d2:	4a22      	ldr	r2, [pc, #136]	; (800495c <HAL_RTC_SetDate+0x168>)
 80048d4:	fb02 f303 	mul.w	r3, r2, r3
 80048d8:	69fa      	ldr	r2, [r7, #28]
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80048de:	69f9      	ldr	r1, [r7, #28]
 80048e0:	68f8      	ldr	r0, [r7, #12]
 80048e2:	f000 f9ca 	bl	8004c7a <RTC_WriteTimeCounter>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d007      	beq.n	80048fc <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2204      	movs	r2, #4
 80048f0:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2200      	movs	r2, #0
 80048f6:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e027      	b.n	800494c <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80048fc:	68f8      	ldr	r0, [r7, #12]
 80048fe:	f000 f9e3 	bl	8004cc8 <RTC_ReadAlarmCounter>
 8004902:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800490a:	d018      	beq.n	800493e <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 800490c:	69ba      	ldr	r2, [r7, #24]
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	429a      	cmp	r2, r3
 8004912:	d214      	bcs.n	800493e <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800491a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800491e:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004920:	69b9      	ldr	r1, [r7, #24]
 8004922:	68f8      	ldr	r0, [r7, #12]
 8004924:	f000 f9e9 	bl	8004cfa <RTC_WriteAlarmCounter>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d007      	beq.n	800493e <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2204      	movs	r2, #4
 8004932:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2200      	movs	r2, #0
 8004938:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e006      	b.n	800494c <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2201      	movs	r2, #1
 8004942:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2200      	movs	r2, #0
 8004948:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800494a:	2300      	movs	r3, #0
}
 800494c:	4618      	mov	r0, r3
 800494e:	3720      	adds	r7, #32
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}
 8004954:	91a2b3c5 	.word	0x91a2b3c5
 8004958:	aaaaaaab 	.word	0xaaaaaaab
 800495c:	00015180 	.word	0x00015180

08004960 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b086      	sub	sp, #24
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 800496c:	f107 0314 	add.w	r3, r7, #20
 8004970:	2100      	movs	r1, #0
 8004972:	460a      	mov	r2, r1
 8004974:	801a      	strh	r2, [r3, #0]
 8004976:	460a      	mov	r2, r1
 8004978:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d002      	beq.n	8004986 <HAL_RTC_GetDate+0x26>
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d101      	bne.n	800498a <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e03a      	b.n	8004a00 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 800498a:	f107 0314 	add.w	r3, r7, #20
 800498e:	2200      	movs	r2, #0
 8004990:	4619      	mov	r1, r3
 8004992:	68f8      	ldr	r0, [r7, #12]
 8004994:	f7ff fe56 	bl	8004644 <HAL_RTC_GetTime>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d001      	beq.n	80049a2 <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e02e      	b.n	8004a00 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	7b1a      	ldrb	r2, [r3, #12]
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	7bda      	ldrb	r2, [r3, #15]
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	7b5a      	ldrb	r2, [r3, #13]
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	7b9a      	ldrb	r2, [r3, #14]
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d01a      	beq.n	80049fe <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	78db      	ldrb	r3, [r3, #3]
 80049cc:	4618      	mov	r0, r3
 80049ce:	f000 fa0b 	bl	8004de8 <RTC_ByteToBcd2>
 80049d2:	4603      	mov	r3, r0
 80049d4:	461a      	mov	r2, r3
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	785b      	ldrb	r3, [r3, #1]
 80049de:	4618      	mov	r0, r3
 80049e0:	f000 fa02 	bl	8004de8 <RTC_ByteToBcd2>
 80049e4:	4603      	mov	r3, r0
 80049e6:	461a      	mov	r2, r3
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	789b      	ldrb	r3, [r3, #2]
 80049f0:	4618      	mov	r0, r3
 80049f2:	f000 f9f9 	bl	8004de8 <RTC_ByteToBcd2>
 80049f6:	4603      	mov	r3, r0
 80049f8:	461a      	mov	r2, r3
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3718      	adds	r7, #24
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004a08:	b590      	push	{r4, r7, lr}
 8004a0a:	b089      	sub	sp, #36	; 0x24
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 8004a14:	2300      	movs	r3, #0
 8004a16:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 8004a18:	f107 0314 	add.w	r3, r7, #20
 8004a1c:	2100      	movs	r1, #0
 8004a1e:	460a      	mov	r2, r1
 8004a20:	801a      	strh	r2, [r3, #0]
 8004a22:	460a      	mov	r2, r1
 8004a24:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d002      	beq.n	8004a32 <HAL_RTC_SetAlarm_IT+0x2a>
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d101      	bne.n	8004a36 <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e096      	b.n	8004b64 <HAL_RTC_SetAlarm_IT+0x15c>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	7c1b      	ldrb	r3, [r3, #16]
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d101      	bne.n	8004a42 <HAL_RTC_SetAlarm_IT+0x3a>
 8004a3e:	2302      	movs	r3, #2
 8004a40:	e090      	b.n	8004b64 <HAL_RTC_SetAlarm_IT+0x15c>
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2201      	movs	r2, #1
 8004a46:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2202      	movs	r2, #2
 8004a4c:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8004a4e:	f107 0314 	add.w	r3, r7, #20
 8004a52:	2200      	movs	r2, #0
 8004a54:	4619      	mov	r1, r3
 8004a56:	68f8      	ldr	r0, [r7, #12]
 8004a58:	f7ff fdf4 	bl	8004644 <HAL_RTC_GetTime>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d001      	beq.n	8004a66 <HAL_RTC_SetAlarm_IT+0x5e>
  {
    return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e07e      	b.n	8004b64 <HAL_RTC_SetAlarm_IT+0x15c>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8004a66:	7d3b      	ldrb	r3, [r7, #20]
 8004a68:	461a      	mov	r2, r3
 8004a6a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004a6e:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 8004a72:	7d7b      	ldrb	r3, [r7, #21]
 8004a74:	4619      	mov	r1, r3
 8004a76:	460b      	mov	r3, r1
 8004a78:	011b      	lsls	r3, r3, #4
 8004a7a:	1a5b      	subs	r3, r3, r1
 8004a7c:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8004a7e:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 8004a80:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8004a82:	4413      	add	r3, r2
 8004a84:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d113      	bne.n	8004ab4 <HAL_RTC_SetAlarm_IT+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	461a      	mov	r2, r3
 8004a92:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004a96:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	785b      	ldrb	r3, [r3, #1]
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	011b      	lsls	r3, r3, #4
 8004aa4:	1a5b      	subs	r3, r3, r1
 8004aa6:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8004aa8:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 8004aaa:	68ba      	ldr	r2, [r7, #8]
 8004aac:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8004aae:	4413      	add	r3, r2
 8004ab0:	61fb      	str	r3, [r7, #28]
 8004ab2:	e01e      	b.n	8004af2 <HAL_RTC_SetAlarm_IT+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f000 f9b2 	bl	8004e22 <RTC_Bcd2ToByte>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004ac6:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	785b      	ldrb	r3, [r3, #1]
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f000 f9a7 	bl	8004e22 <RTC_Bcd2ToByte>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	4613      	mov	r3, r2
 8004ada:	011b      	lsls	r3, r3, #4
 8004adc:	1a9b      	subs	r3, r3, r2
 8004ade:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8004ae0:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	789b      	ldrb	r3, [r3, #2]
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f000 f99b 	bl	8004e22 <RTC_Bcd2ToByte>
 8004aec:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8004aee:	4423      	add	r3, r4
 8004af0:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 8004af2:	69fa      	ldr	r2, [r7, #28]
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d205      	bcs.n	8004b06 <HAL_RTC_SetAlarm_IT+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8004b00:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004b04:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004b06:	69f9      	ldr	r1, [r7, #28]
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f000 f8f6 	bl	8004cfa <RTC_WriteAlarmCounter>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d007      	beq.n	8004b24 <HAL_RTC_SetAlarm_IT+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2204      	movs	r2, #4
 8004b18:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e01f      	b.n	8004b64 <HAL_RTC_SetAlarm_IT+0x15c>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f06f 0202 	mvn.w	r2, #2
 8004b2c:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f042 0202 	orr.w	r2, r2, #2
 8004b3c:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004b3e:	4b0b      	ldr	r3, [pc, #44]	; (8004b6c <HAL_RTC_SetAlarm_IT+0x164>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a0a      	ldr	r2, [pc, #40]	; (8004b6c <HAL_RTC_SetAlarm_IT+0x164>)
 8004b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b48:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8004b4a:	4b08      	ldr	r3, [pc, #32]	; (8004b6c <HAL_RTC_SetAlarm_IT+0x164>)
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	4a07      	ldr	r2, [pc, #28]	; (8004b6c <HAL_RTC_SetAlarm_IT+0x164>)
 8004b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b54:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8004b62:	2300      	movs	r3, #0
  }
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3724      	adds	r7, #36	; 0x24
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd90      	pop	{r4, r7, pc}
 8004b6c:	40010400 	.word	0x40010400

08004b70 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0302 	and.w	r3, r3, #2
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d00e      	beq.n	8004ba4 <HAL_RTC_AlarmIRQHandler+0x34>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	f003 0302 	and.w	r3, r3, #2
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d007      	beq.n	8004ba4 <HAL_RTC_AlarmIRQHandler+0x34>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f7fb ff4a 	bl	8000a2e <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f06f 0202 	mvn.w	r2, #2
 8004ba2:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8004ba4:	4b05      	ldr	r3, [pc, #20]	; (8004bbc <HAL_RTC_AlarmIRQHandler+0x4c>)
 8004ba6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004baa:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	745a      	strb	r2, [r3, #17]
}
 8004bb2:	bf00      	nop
 8004bb4:	3708      	adds	r7, #8
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	40010400 	.word	0x40010400

08004bc0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d101      	bne.n	8004bd6 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e01d      	b.n	8004c12 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	685a      	ldr	r2, [r3, #4]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f022 0208 	bic.w	r2, r2, #8
 8004be4:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004be6:	f7fe fb6d 	bl	80032c4 <HAL_GetTick>
 8004bea:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004bec:	e009      	b.n	8004c02 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004bee:	f7fe fb69 	bl	80032c4 <HAL_GetTick>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bfc:	d901      	bls.n	8004c02 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e007      	b.n	8004c12 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	f003 0308 	and.w	r3, r3, #8
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d0ee      	beq.n	8004bee <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3710      	adds	r7, #16
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}

08004c1a <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8004c1a:	b480      	push	{r7}
 8004c1c:	b087      	sub	sp, #28
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8004c22:	2300      	movs	r3, #0
 8004c24:	827b      	strh	r3, [r7, #18]
 8004c26:	2300      	movs	r3, #0
 8004c28:	823b      	strh	r3, [r7, #16]
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	699b      	ldr	r3, [r3, #24]
 8004c38:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	69db      	ldr	r3, [r3, #28]
 8004c40:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8004c4a:	8a7a      	ldrh	r2, [r7, #18]
 8004c4c:	8a3b      	ldrh	r3, [r7, #16]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d008      	beq.n	8004c64 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8004c52:	8a3b      	ldrh	r3, [r7, #16]
 8004c54:	041a      	lsls	r2, r3, #16
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	69db      	ldr	r3, [r3, #28]
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	617b      	str	r3, [r7, #20]
 8004c62:	e004      	b.n	8004c6e <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8004c64:	8a7b      	ldrh	r3, [r7, #18]
 8004c66:	041a      	lsls	r2, r3, #16
 8004c68:	89fb      	ldrh	r3, [r7, #14]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8004c6e:	697b      	ldr	r3, [r7, #20]
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	371c      	adds	r7, #28
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bc80      	pop	{r7}
 8004c78:	4770      	bx	lr

08004c7a <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8004c7a:	b580      	push	{r7, lr}
 8004c7c:	b084      	sub	sp, #16
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	6078      	str	r0, [r7, #4]
 8004c82:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c84:	2300      	movs	r3, #0
 8004c86:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f000 f85d 	bl	8004d48 <RTC_EnterInitMode>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d002      	beq.n	8004c9a <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	73fb      	strb	r3, [r7, #15]
 8004c98:	e011      	b.n	8004cbe <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	683a      	ldr	r2, [r7, #0]
 8004ca0:	0c12      	lsrs	r2, r2, #16
 8004ca2:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	683a      	ldr	r2, [r7, #0]
 8004caa:	b292      	uxth	r2, r2
 8004cac:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 f872 	bl	8004d98 <RTC_ExitInitMode>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d001      	beq.n	8004cbe <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3710      	adds	r7, #16
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b085      	sub	sp, #20
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	81fb      	strh	r3, [r7, #14]
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	6a1b      	ldr	r3, [r3, #32]
 8004cde:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce6:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8004ce8:	89fb      	ldrh	r3, [r7, #14]
 8004cea:	041a      	lsls	r2, r3, #16
 8004cec:	89bb      	ldrh	r3, [r7, #12]
 8004cee:	4313      	orrs	r3, r2
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3714      	adds	r7, #20
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bc80      	pop	{r7}
 8004cf8:	4770      	bx	lr

08004cfa <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8004cfa:	b580      	push	{r7, lr}
 8004cfc:	b084      	sub	sp, #16
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
 8004d02:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d04:	2300      	movs	r3, #0
 8004d06:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f000 f81d 	bl	8004d48 <RTC_EnterInitMode>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d002      	beq.n	8004d1a <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	73fb      	strb	r3, [r7, #15]
 8004d18:	e011      	b.n	8004d3e <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	683a      	ldr	r2, [r7, #0]
 8004d20:	0c12      	lsrs	r2, r2, #16
 8004d22:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	683a      	ldr	r2, [r7, #0]
 8004d2a:	b292      	uxth	r2, r2
 8004d2c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 f832 	bl	8004d98 <RTC_ExitInitMode>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d001      	beq.n	8004d3e <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3710      	adds	r7, #16
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d50:	2300      	movs	r3, #0
 8004d52:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8004d54:	f7fe fab6 	bl	80032c4 <HAL_GetTick>
 8004d58:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004d5a:	e009      	b.n	8004d70 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004d5c:	f7fe fab2 	bl	80032c4 <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d6a:	d901      	bls.n	8004d70 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e00f      	b.n	8004d90 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	f003 0320 	and.w	r3, r3, #32
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d0ee      	beq.n	8004d5c <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	685a      	ldr	r2, [r3, #4]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f042 0210 	orr.w	r2, r2, #16
 8004d8c:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8004d8e:	2300      	movs	r3, #0
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3710      	adds	r7, #16
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004da0:	2300      	movs	r3, #0
 8004da2:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	685a      	ldr	r2, [r3, #4]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f022 0210 	bic.w	r2, r2, #16
 8004db2:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004db4:	f7fe fa86 	bl	80032c4 <HAL_GetTick>
 8004db8:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004dba:	e009      	b.n	8004dd0 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004dbc:	f7fe fa82 	bl	80032c4 <HAL_GetTick>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004dca:	d901      	bls.n	8004dd0 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	e007      	b.n	8004de0 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f003 0320 	and.w	r3, r3, #32
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d0ee      	beq.n	8004dbc <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8004dde:	2300      	movs	r3, #0
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3710      	adds	r7, #16
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b085      	sub	sp, #20
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	4603      	mov	r3, r0
 8004df0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004df2:	2300      	movs	r3, #0
 8004df4:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8004df6:	e005      	b.n	8004e04 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8004dfe:	79fb      	ldrb	r3, [r7, #7]
 8004e00:	3b0a      	subs	r3, #10
 8004e02:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8004e04:	79fb      	ldrb	r3, [r7, #7]
 8004e06:	2b09      	cmp	r3, #9
 8004e08:	d8f6      	bhi.n	8004df8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	011b      	lsls	r3, r3, #4
 8004e10:	b2da      	uxtb	r2, r3
 8004e12:	79fb      	ldrb	r3, [r7, #7]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	b2db      	uxtb	r3, r3
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3714      	adds	r7, #20
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bc80      	pop	{r7}
 8004e20:	4770      	bx	lr

08004e22 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004e22:	b480      	push	{r7}
 8004e24:	b085      	sub	sp, #20
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	4603      	mov	r3, r0
 8004e2a:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8004e30:	79fb      	ldrb	r3, [r7, #7]
 8004e32:	091b      	lsrs	r3, r3, #4
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	461a      	mov	r2, r3
 8004e38:	4613      	mov	r3, r2
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	4413      	add	r3, r2
 8004e3e:	005b      	lsls	r3, r3, #1
 8004e40:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8004e42:	79fb      	ldrb	r3, [r7, #7]
 8004e44:	f003 030f 	and.w	r3, r3, #15
 8004e48:	b2da      	uxtb	r2, r3
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	4413      	add	r3, r2
 8004e50:	b2db      	uxtb	r3, r3
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3714      	adds	r7, #20
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bc80      	pop	{r7}
 8004e5a:	4770      	bx	lr

08004e5c <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b086      	sub	sp, #24
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8004e66:	2300      	movs	r3, #0
 8004e68:	617b      	str	r3, [r7, #20]
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	613b      	str	r3, [r7, #16]
 8004e6e:	2300      	movs	r3, #0
 8004e70:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8004e72:	2300      	movs	r3, #0
 8004e74:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	7bdb      	ldrb	r3, [r3, #15]
 8004e7a:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	7b5b      	ldrb	r3, [r3, #13]
 8004e80:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	7b9b      	ldrb	r3, [r3, #14]
 8004e86:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8004e88:	2300      	movs	r3, #0
 8004e8a:	60bb      	str	r3, [r7, #8]
 8004e8c:	e06f      	b.n	8004f6e <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d011      	beq.n	8004eb8 <RTC_DateUpdate+0x5c>
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	2b03      	cmp	r3, #3
 8004e98:	d00e      	beq.n	8004eb8 <RTC_DateUpdate+0x5c>
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	2b05      	cmp	r3, #5
 8004e9e:	d00b      	beq.n	8004eb8 <RTC_DateUpdate+0x5c>
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	2b07      	cmp	r3, #7
 8004ea4:	d008      	beq.n	8004eb8 <RTC_DateUpdate+0x5c>
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	2b08      	cmp	r3, #8
 8004eaa:	d005      	beq.n	8004eb8 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	2b0a      	cmp	r3, #10
 8004eb0:	d002      	beq.n	8004eb8 <RTC_DateUpdate+0x5c>
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	2b0c      	cmp	r3, #12
 8004eb6:	d117      	bne.n	8004ee8 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2b1e      	cmp	r3, #30
 8004ebc:	d803      	bhi.n	8004ec6 <RTC_DateUpdate+0x6a>
      {
        day++;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8004ec4:	e050      	b.n	8004f68 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	2b0c      	cmp	r3, #12
 8004eca:	d005      	beq.n	8004ed8 <RTC_DateUpdate+0x7c>
        {
          month++;
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	3301      	adds	r3, #1
 8004ed0:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8004ed6:	e047      	b.n	8004f68 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004edc:	2301      	movs	r3, #1
 8004ede:	60fb      	str	r3, [r7, #12]
          year++;
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8004ee6:	e03f      	b.n	8004f68 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	2b04      	cmp	r3, #4
 8004eec:	d008      	beq.n	8004f00 <RTC_DateUpdate+0xa4>
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	2b06      	cmp	r3, #6
 8004ef2:	d005      	beq.n	8004f00 <RTC_DateUpdate+0xa4>
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	2b09      	cmp	r3, #9
 8004ef8:	d002      	beq.n	8004f00 <RTC_DateUpdate+0xa4>
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	2b0b      	cmp	r3, #11
 8004efe:	d10c      	bne.n	8004f1a <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2b1d      	cmp	r3, #29
 8004f04:	d803      	bhi.n	8004f0e <RTC_DateUpdate+0xb2>
      {
        day++;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	3301      	adds	r3, #1
 8004f0a:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8004f0c:	e02c      	b.n	8004f68 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	3301      	adds	r3, #1
 8004f12:	613b      	str	r3, [r7, #16]
        day = 1U;
 8004f14:	2301      	movs	r3, #1
 8004f16:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8004f18:	e026      	b.n	8004f68 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	d123      	bne.n	8004f68 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2b1b      	cmp	r3, #27
 8004f24:	d803      	bhi.n	8004f2e <RTC_DateUpdate+0xd2>
      {
        day++;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	3301      	adds	r3, #1
 8004f2a:	60fb      	str	r3, [r7, #12]
 8004f2c:	e01c      	b.n	8004f68 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2b1c      	cmp	r3, #28
 8004f32:	d111      	bne.n	8004f58 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f000 f839 	bl	8004fb0 <RTC_IsLeapYear>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d003      	beq.n	8004f4c <RTC_DateUpdate+0xf0>
        {
          day++;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	3301      	adds	r3, #1
 8004f48:	60fb      	str	r3, [r7, #12]
 8004f4a:	e00d      	b.n	8004f68 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	3301      	adds	r3, #1
 8004f50:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004f52:	2301      	movs	r3, #1
 8004f54:	60fb      	str	r3, [r7, #12]
 8004f56:	e007      	b.n	8004f68 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2b1d      	cmp	r3, #29
 8004f5c:	d104      	bne.n	8004f68 <RTC_DateUpdate+0x10c>
      {
        month++;
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	3301      	adds	r3, #1
 8004f62:	613b      	str	r3, [r7, #16]
        day = 1U;
 8004f64:	2301      	movs	r3, #1
 8004f66:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	60bb      	str	r3, [r7, #8]
 8004f6e:	68ba      	ldr	r2, [r7, #8]
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d38b      	bcc.n	8004e8e <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	b2da      	uxtb	r2, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	b2da      	uxtb	r2, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	b2da      	uxtb	r2, r3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	68fa      	ldr	r2, [r7, #12]
 8004f94:	b2d2      	uxtb	r2, r2
 8004f96:	4619      	mov	r1, r3
 8004f98:	6978      	ldr	r0, [r7, #20]
 8004f9a:	f000 f83b 	bl	8005014 <RTC_WeekDayNum>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	731a      	strb	r2, [r3, #12]
}
 8004fa6:	bf00      	nop
 8004fa8:	3718      	adds	r7, #24
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
	...

08004fb0 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8004fba:	88fb      	ldrh	r3, [r7, #6]
 8004fbc:	f003 0303 	and.w	r3, r3, #3
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d001      	beq.n	8004fca <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	e01d      	b.n	8005006 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8004fca:	88fb      	ldrh	r3, [r7, #6]
 8004fcc:	4a10      	ldr	r2, [pc, #64]	; (8005010 <RTC_IsLeapYear+0x60>)
 8004fce:	fba2 1203 	umull	r1, r2, r2, r3
 8004fd2:	0952      	lsrs	r2, r2, #5
 8004fd4:	2164      	movs	r1, #100	; 0x64
 8004fd6:	fb01 f202 	mul.w	r2, r1, r2
 8004fda:	1a9b      	subs	r3, r3, r2
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d001      	beq.n	8004fe6 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e00f      	b.n	8005006 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8004fe6:	88fb      	ldrh	r3, [r7, #6]
 8004fe8:	4a09      	ldr	r2, [pc, #36]	; (8005010 <RTC_IsLeapYear+0x60>)
 8004fea:	fba2 1203 	umull	r1, r2, r2, r3
 8004fee:	09d2      	lsrs	r2, r2, #7
 8004ff0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8004ff4:	fb01 f202 	mul.w	r2, r1, r2
 8004ff8:	1a9b      	subs	r3, r3, r2
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d101      	bne.n	8005004 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8005000:	2301      	movs	r3, #1
 8005002:	e000      	b.n	8005006 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8005004:	2300      	movs	r3, #0
  }
}
 8005006:	4618      	mov	r0, r3
 8005008:	370c      	adds	r7, #12
 800500a:	46bd      	mov	sp, r7
 800500c:	bc80      	pop	{r7}
 800500e:	4770      	bx	lr
 8005010:	51eb851f 	.word	0x51eb851f

08005014 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8005014:	b480      	push	{r7}
 8005016:	b085      	sub	sp, #20
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	460b      	mov	r3, r1
 800501e:	70fb      	strb	r3, [r7, #3]
 8005020:	4613      	mov	r3, r2
 8005022:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8005024:	2300      	movs	r3, #0
 8005026:	60bb      	str	r3, [r7, #8]
 8005028:	2300      	movs	r3, #0
 800502a:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8005032:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8005034:	78fb      	ldrb	r3, [r7, #3]
 8005036:	2b02      	cmp	r3, #2
 8005038:	d82d      	bhi.n	8005096 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 800503a:	78fa      	ldrb	r2, [r7, #3]
 800503c:	4613      	mov	r3, r2
 800503e:	005b      	lsls	r3, r3, #1
 8005040:	4413      	add	r3, r2
 8005042:	00db      	lsls	r3, r3, #3
 8005044:	1a9b      	subs	r3, r3, r2
 8005046:	4a2c      	ldr	r2, [pc, #176]	; (80050f8 <RTC_WeekDayNum+0xe4>)
 8005048:	fba2 2303 	umull	r2, r3, r2, r3
 800504c:	085a      	lsrs	r2, r3, #1
 800504e:	78bb      	ldrb	r3, [r7, #2]
 8005050:	441a      	add	r2, r3
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	441a      	add	r2, r3
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	3b01      	subs	r3, #1
 800505a:	089b      	lsrs	r3, r3, #2
 800505c:	441a      	add	r2, r3
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	3b01      	subs	r3, #1
 8005062:	4926      	ldr	r1, [pc, #152]	; (80050fc <RTC_WeekDayNum+0xe8>)
 8005064:	fba1 1303 	umull	r1, r3, r1, r3
 8005068:	095b      	lsrs	r3, r3, #5
 800506a:	1ad2      	subs	r2, r2, r3
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	3b01      	subs	r3, #1
 8005070:	4922      	ldr	r1, [pc, #136]	; (80050fc <RTC_WeekDayNum+0xe8>)
 8005072:	fba1 1303 	umull	r1, r3, r1, r3
 8005076:	09db      	lsrs	r3, r3, #7
 8005078:	4413      	add	r3, r2
 800507a:	1d1a      	adds	r2, r3, #4
 800507c:	4b20      	ldr	r3, [pc, #128]	; (8005100 <RTC_WeekDayNum+0xec>)
 800507e:	fba3 1302 	umull	r1, r3, r3, r2
 8005082:	1ad1      	subs	r1, r2, r3
 8005084:	0849      	lsrs	r1, r1, #1
 8005086:	440b      	add	r3, r1
 8005088:	0899      	lsrs	r1, r3, #2
 800508a:	460b      	mov	r3, r1
 800508c:	00db      	lsls	r3, r3, #3
 800508e:	1a5b      	subs	r3, r3, r1
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	60fb      	str	r3, [r7, #12]
 8005094:	e029      	b.n	80050ea <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8005096:	78fa      	ldrb	r2, [r7, #3]
 8005098:	4613      	mov	r3, r2
 800509a:	005b      	lsls	r3, r3, #1
 800509c:	4413      	add	r3, r2
 800509e:	00db      	lsls	r3, r3, #3
 80050a0:	1a9b      	subs	r3, r3, r2
 80050a2:	4a15      	ldr	r2, [pc, #84]	; (80050f8 <RTC_WeekDayNum+0xe4>)
 80050a4:	fba2 2303 	umull	r2, r3, r2, r3
 80050a8:	085a      	lsrs	r2, r3, #1
 80050aa:	78bb      	ldrb	r3, [r7, #2]
 80050ac:	441a      	add	r2, r3
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	441a      	add	r2, r3
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	089b      	lsrs	r3, r3, #2
 80050b6:	441a      	add	r2, r3
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	4910      	ldr	r1, [pc, #64]	; (80050fc <RTC_WeekDayNum+0xe8>)
 80050bc:	fba1 1303 	umull	r1, r3, r1, r3
 80050c0:	095b      	lsrs	r3, r3, #5
 80050c2:	1ad2      	subs	r2, r2, r3
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	490d      	ldr	r1, [pc, #52]	; (80050fc <RTC_WeekDayNum+0xe8>)
 80050c8:	fba1 1303 	umull	r1, r3, r1, r3
 80050cc:	09db      	lsrs	r3, r3, #7
 80050ce:	4413      	add	r3, r2
 80050d0:	1c9a      	adds	r2, r3, #2
 80050d2:	4b0b      	ldr	r3, [pc, #44]	; (8005100 <RTC_WeekDayNum+0xec>)
 80050d4:	fba3 1302 	umull	r1, r3, r3, r2
 80050d8:	1ad1      	subs	r1, r2, r3
 80050da:	0849      	lsrs	r1, r1, #1
 80050dc:	440b      	add	r3, r1
 80050de:	0899      	lsrs	r1, r3, #2
 80050e0:	460b      	mov	r3, r1
 80050e2:	00db      	lsls	r3, r3, #3
 80050e4:	1a5b      	subs	r3, r3, r1
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	b2db      	uxtb	r3, r3
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3714      	adds	r7, #20
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bc80      	pop	{r7}
 80050f6:	4770      	bx	lr
 80050f8:	38e38e39 	.word	0x38e38e39
 80050fc:	51eb851f 	.word	0x51eb851f
 8005100:	24924925 	.word	0x24924925

08005104 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d101      	bne.n	8005116 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e076      	b.n	8005204 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511a:	2b00      	cmp	r3, #0
 800511c:	d108      	bne.n	8005130 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005126:	d009      	beq.n	800513c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	61da      	str	r2, [r3, #28]
 800512e:	e005      	b.n	800513c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005148:	b2db      	uxtb	r3, r3
 800514a:	2b00      	cmp	r3, #0
 800514c:	d106      	bne.n	800515c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f7fb fe78 	bl	8000e4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2202      	movs	r2, #2
 8005160:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005172:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005184:	431a      	orrs	r2, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800518e:	431a      	orrs	r2, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	691b      	ldr	r3, [r3, #16]
 8005194:	f003 0302 	and.w	r3, r3, #2
 8005198:	431a      	orrs	r2, r3
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	695b      	ldr	r3, [r3, #20]
 800519e:	f003 0301 	and.w	r3, r3, #1
 80051a2:	431a      	orrs	r2, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	699b      	ldr	r3, [r3, #24]
 80051a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051ac:	431a      	orrs	r2, r3
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	69db      	ldr	r3, [r3, #28]
 80051b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051b6:	431a      	orrs	r2, r3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6a1b      	ldr	r3, [r3, #32]
 80051bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051c0:	ea42 0103 	orr.w	r1, r2, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	430a      	orrs	r2, r1
 80051d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	699b      	ldr	r3, [r3, #24]
 80051d8:	0c1a      	lsrs	r2, r3, #16
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f002 0204 	and.w	r2, r2, #4
 80051e2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	69da      	ldr	r2, [r3, #28]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051f2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2201      	movs	r2, #1
 80051fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005202:	2300      	movs	r3, #0
}
 8005204:	4618      	mov	r0, r3
 8005206:	3708      	adds	r7, #8
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b088      	sub	sp, #32
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	603b      	str	r3, [r7, #0]
 8005218:	4613      	mov	r3, r2
 800521a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800521c:	2300      	movs	r3, #0
 800521e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005226:	2b01      	cmp	r3, #1
 8005228:	d101      	bne.n	800522e <HAL_SPI_Transmit+0x22>
 800522a:	2302      	movs	r3, #2
 800522c:	e126      	b.n	800547c <HAL_SPI_Transmit+0x270>
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2201      	movs	r2, #1
 8005232:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005236:	f7fe f845 	bl	80032c4 <HAL_GetTick>
 800523a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800523c:	88fb      	ldrh	r3, [r7, #6]
 800523e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005246:	b2db      	uxtb	r3, r3
 8005248:	2b01      	cmp	r3, #1
 800524a:	d002      	beq.n	8005252 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800524c:	2302      	movs	r3, #2
 800524e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005250:	e10b      	b.n	800546a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d002      	beq.n	800525e <HAL_SPI_Transmit+0x52>
 8005258:	88fb      	ldrh	r3, [r7, #6]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d102      	bne.n	8005264 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005262:	e102      	b.n	800546a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2203      	movs	r2, #3
 8005268:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2200      	movs	r2, #0
 8005270:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	68ba      	ldr	r2, [r7, #8]
 8005276:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	88fa      	ldrh	r2, [r7, #6]
 800527c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	88fa      	ldrh	r2, [r7, #6]
 8005282:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2200      	movs	r2, #0
 8005288:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2200      	movs	r2, #0
 800528e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2200      	movs	r2, #0
 8005294:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2200      	movs	r2, #0
 800529a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2200      	movs	r2, #0
 80052a0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052aa:	d10f      	bne.n	80052cc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052ba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052ca:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d6:	2b40      	cmp	r3, #64	; 0x40
 80052d8:	d007      	beq.n	80052ea <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052e8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052f2:	d14b      	bne.n	800538c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d002      	beq.n	8005302 <HAL_SPI_Transmit+0xf6>
 80052fc:	8afb      	ldrh	r3, [r7, #22]
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d13e      	bne.n	8005380 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005306:	881a      	ldrh	r2, [r3, #0]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005312:	1c9a      	adds	r2, r3, #2
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800531c:	b29b      	uxth	r3, r3
 800531e:	3b01      	subs	r3, #1
 8005320:	b29a      	uxth	r2, r3
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005326:	e02b      	b.n	8005380 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	f003 0302 	and.w	r3, r3, #2
 8005332:	2b02      	cmp	r3, #2
 8005334:	d112      	bne.n	800535c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800533a:	881a      	ldrh	r2, [r3, #0]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005346:	1c9a      	adds	r2, r3, #2
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005350:	b29b      	uxth	r3, r3
 8005352:	3b01      	subs	r3, #1
 8005354:	b29a      	uxth	r2, r3
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	86da      	strh	r2, [r3, #54]	; 0x36
 800535a:	e011      	b.n	8005380 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800535c:	f7fd ffb2 	bl	80032c4 <HAL_GetTick>
 8005360:	4602      	mov	r2, r0
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	683a      	ldr	r2, [r7, #0]
 8005368:	429a      	cmp	r2, r3
 800536a:	d803      	bhi.n	8005374 <HAL_SPI_Transmit+0x168>
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005372:	d102      	bne.n	800537a <HAL_SPI_Transmit+0x16e>
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d102      	bne.n	8005380 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800537e:	e074      	b.n	800546a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005384:	b29b      	uxth	r3, r3
 8005386:	2b00      	cmp	r3, #0
 8005388:	d1ce      	bne.n	8005328 <HAL_SPI_Transmit+0x11c>
 800538a:	e04c      	b.n	8005426 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d002      	beq.n	800539a <HAL_SPI_Transmit+0x18e>
 8005394:	8afb      	ldrh	r3, [r7, #22]
 8005396:	2b01      	cmp	r3, #1
 8005398:	d140      	bne.n	800541c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	330c      	adds	r3, #12
 80053a4:	7812      	ldrb	r2, [r2, #0]
 80053a6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ac:	1c5a      	adds	r2, r3, #1
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	3b01      	subs	r3, #1
 80053ba:	b29a      	uxth	r2, r3
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80053c0:	e02c      	b.n	800541c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	f003 0302 	and.w	r3, r3, #2
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	d113      	bne.n	80053f8 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	330c      	adds	r3, #12
 80053da:	7812      	ldrb	r2, [r2, #0]
 80053dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e2:	1c5a      	adds	r2, r3, #1
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	3b01      	subs	r3, #1
 80053f0:	b29a      	uxth	r2, r3
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	86da      	strh	r2, [r3, #54]	; 0x36
 80053f6:	e011      	b.n	800541c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053f8:	f7fd ff64 	bl	80032c4 <HAL_GetTick>
 80053fc:	4602      	mov	r2, r0
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	683a      	ldr	r2, [r7, #0]
 8005404:	429a      	cmp	r2, r3
 8005406:	d803      	bhi.n	8005410 <HAL_SPI_Transmit+0x204>
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800540e:	d102      	bne.n	8005416 <HAL_SPI_Transmit+0x20a>
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d102      	bne.n	800541c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	77fb      	strb	r3, [r7, #31]
          goto error;
 800541a:	e026      	b.n	800546a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005420:	b29b      	uxth	r3, r3
 8005422:	2b00      	cmp	r3, #0
 8005424:	d1cd      	bne.n	80053c2 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005426:	69ba      	ldr	r2, [r7, #24]
 8005428:	6839      	ldr	r1, [r7, #0]
 800542a:	68f8      	ldr	r0, [r7, #12]
 800542c:	f000 f8b2 	bl	8005594 <SPI_EndRxTxTransaction>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d002      	beq.n	800543c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2220      	movs	r2, #32
 800543a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d10a      	bne.n	800545a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005444:	2300      	movs	r3, #0
 8005446:	613b      	str	r3, [r7, #16]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	613b      	str	r3, [r7, #16]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	613b      	str	r3, [r7, #16]
 8005458:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800545e:	2b00      	cmp	r3, #0
 8005460:	d002      	beq.n	8005468 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	77fb      	strb	r3, [r7, #31]
 8005466:	e000      	b.n	800546a <HAL_SPI_Transmit+0x25e>
  }

error:
 8005468:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2201      	movs	r2, #1
 800546e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800547a:	7ffb      	ldrb	r3, [r7, #31]
}
 800547c:	4618      	mov	r0, r3
 800547e:	3720      	adds	r7, #32
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b088      	sub	sp, #32
 8005488:	af00      	add	r7, sp, #0
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	603b      	str	r3, [r7, #0]
 8005490:	4613      	mov	r3, r2
 8005492:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005494:	f7fd ff16 	bl	80032c4 <HAL_GetTick>
 8005498:	4602      	mov	r2, r0
 800549a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800549c:	1a9b      	subs	r3, r3, r2
 800549e:	683a      	ldr	r2, [r7, #0]
 80054a0:	4413      	add	r3, r2
 80054a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80054a4:	f7fd ff0e 	bl	80032c4 <HAL_GetTick>
 80054a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80054aa:	4b39      	ldr	r3, [pc, #228]	; (8005590 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	015b      	lsls	r3, r3, #5
 80054b0:	0d1b      	lsrs	r3, r3, #20
 80054b2:	69fa      	ldr	r2, [r7, #28]
 80054b4:	fb02 f303 	mul.w	r3, r2, r3
 80054b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054ba:	e054      	b.n	8005566 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054c2:	d050      	beq.n	8005566 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80054c4:	f7fd fefe 	bl	80032c4 <HAL_GetTick>
 80054c8:	4602      	mov	r2, r0
 80054ca:	69bb      	ldr	r3, [r7, #24]
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	69fa      	ldr	r2, [r7, #28]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d902      	bls.n	80054da <SPI_WaitFlagStateUntilTimeout+0x56>
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d13d      	bne.n	8005556 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	685a      	ldr	r2, [r3, #4]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80054e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054f2:	d111      	bne.n	8005518 <SPI_WaitFlagStateUntilTimeout+0x94>
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054fc:	d004      	beq.n	8005508 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005506:	d107      	bne.n	8005518 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005516:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800551c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005520:	d10f      	bne.n	8005542 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005530:	601a      	str	r2, [r3, #0]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005540:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2201      	movs	r2, #1
 8005546:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	e017      	b.n	8005586 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d101      	bne.n	8005560 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800555c:	2300      	movs	r3, #0
 800555e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	3b01      	subs	r3, #1
 8005564:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	689a      	ldr	r2, [r3, #8]
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	4013      	ands	r3, r2
 8005570:	68ba      	ldr	r2, [r7, #8]
 8005572:	429a      	cmp	r2, r3
 8005574:	bf0c      	ite	eq
 8005576:	2301      	moveq	r3, #1
 8005578:	2300      	movne	r3, #0
 800557a:	b2db      	uxtb	r3, r3
 800557c:	461a      	mov	r2, r3
 800557e:	79fb      	ldrb	r3, [r7, #7]
 8005580:	429a      	cmp	r2, r3
 8005582:	d19b      	bne.n	80054bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005584:	2300      	movs	r3, #0
}
 8005586:	4618      	mov	r0, r3
 8005588:	3720      	adds	r7, #32
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
 800558e:	bf00      	nop
 8005590:	20000004 	.word	0x20000004

08005594 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b086      	sub	sp, #24
 8005598:	af02      	add	r7, sp, #8
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	60b9      	str	r1, [r7, #8]
 800559e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	9300      	str	r3, [sp, #0]
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	2200      	movs	r2, #0
 80055a8:	2180      	movs	r1, #128	; 0x80
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f7ff ff6a 	bl	8005484 <SPI_WaitFlagStateUntilTimeout>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d007      	beq.n	80055c6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ba:	f043 0220 	orr.w	r2, r3, #32
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e000      	b.n	80055c8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80055c6:	2300      	movs	r3, #0
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3710      	adds	r7, #16
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d101      	bne.n	80055e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e041      	b.n	8005666 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d106      	bne.n	80055fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f7fb fc68 	bl	8000ecc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2202      	movs	r2, #2
 8005600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	3304      	adds	r3, #4
 800560c:	4619      	mov	r1, r3
 800560e:	4610      	mov	r0, r2
 8005610:	f000 fb28 	bl	8005c64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	3708      	adds	r7, #8
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}

0800566e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800566e:	b580      	push	{r7, lr}
 8005670:	b082      	sub	sp, #8
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d101      	bne.n	8005680 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e041      	b.n	8005704 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005686:	b2db      	uxtb	r3, r3
 8005688:	2b00      	cmp	r3, #0
 800568a:	d106      	bne.n	800569a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f000 f839 	bl	800570c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2202      	movs	r2, #2
 800569e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	3304      	adds	r3, #4
 80056aa:	4619      	mov	r1, r3
 80056ac:	4610      	mov	r0, r2
 80056ae:	f000 fad9 	bl	8005c64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2201      	movs	r2, #1
 80056b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2201      	movs	r2, #1
 80056be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2201      	movs	r2, #1
 80056c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2201      	movs	r2, #1
 80056ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2201      	movs	r2, #1
 80056d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2201      	movs	r2, #1
 80056de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2201      	movs	r2, #1
 80056e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2201      	movs	r2, #1
 80056ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2201      	movs	r2, #1
 80056f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2201      	movs	r2, #1
 80056fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005702:	2300      	movs	r3, #0
}
 8005704:	4618      	mov	r0, r3
 8005706:	3708      	adds	r7, #8
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005714:	bf00      	nop
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	bc80      	pop	{r7}
 800571c:	4770      	bx	lr

0800571e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800571e:	b580      	push	{r7, lr}
 8005720:	b082      	sub	sp, #8
 8005722:	af00      	add	r7, sp, #0
 8005724:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	f003 0302 	and.w	r3, r3, #2
 8005730:	2b02      	cmp	r3, #2
 8005732:	d122      	bne.n	800577a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	f003 0302 	and.w	r3, r3, #2
 800573e:	2b02      	cmp	r3, #2
 8005740:	d11b      	bne.n	800577a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f06f 0202 	mvn.w	r2, #2
 800574a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	699b      	ldr	r3, [r3, #24]
 8005758:	f003 0303 	and.w	r3, r3, #3
 800575c:	2b00      	cmp	r3, #0
 800575e:	d003      	beq.n	8005768 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f7fb f95b 	bl	8000a1c <HAL_TIM_IC_CaptureCallback>
 8005766:	e005      	b.n	8005774 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f000 fa5f 	bl	8005c2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 fa65 	bl	8005c3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	f003 0304 	and.w	r3, r3, #4
 8005784:	2b04      	cmp	r3, #4
 8005786:	d122      	bne.n	80057ce <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	f003 0304 	and.w	r3, r3, #4
 8005792:	2b04      	cmp	r3, #4
 8005794:	d11b      	bne.n	80057ce <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f06f 0204 	mvn.w	r2, #4
 800579e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2202      	movs	r2, #2
 80057a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	699b      	ldr	r3, [r3, #24]
 80057ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d003      	beq.n	80057bc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f7fb f931 	bl	8000a1c <HAL_TIM_IC_CaptureCallback>
 80057ba:	e005      	b.n	80057c8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f000 fa35 	bl	8005c2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 fa3b 	bl	8005c3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	f003 0308 	and.w	r3, r3, #8
 80057d8:	2b08      	cmp	r3, #8
 80057da:	d122      	bne.n	8005822 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	68db      	ldr	r3, [r3, #12]
 80057e2:	f003 0308 	and.w	r3, r3, #8
 80057e6:	2b08      	cmp	r3, #8
 80057e8:	d11b      	bne.n	8005822 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f06f 0208 	mvn.w	r2, #8
 80057f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2204      	movs	r2, #4
 80057f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	69db      	ldr	r3, [r3, #28]
 8005800:	f003 0303 	and.w	r3, r3, #3
 8005804:	2b00      	cmp	r3, #0
 8005806:	d003      	beq.n	8005810 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f7fb f907 	bl	8000a1c <HAL_TIM_IC_CaptureCallback>
 800580e:	e005      	b.n	800581c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f000 fa0b 	bl	8005c2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 fa11 	bl	8005c3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	691b      	ldr	r3, [r3, #16]
 8005828:	f003 0310 	and.w	r3, r3, #16
 800582c:	2b10      	cmp	r3, #16
 800582e:	d122      	bne.n	8005876 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	f003 0310 	and.w	r3, r3, #16
 800583a:	2b10      	cmp	r3, #16
 800583c:	d11b      	bne.n	8005876 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f06f 0210 	mvn.w	r2, #16
 8005846:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2208      	movs	r2, #8
 800584c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	69db      	ldr	r3, [r3, #28]
 8005854:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005858:	2b00      	cmp	r3, #0
 800585a:	d003      	beq.n	8005864 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f7fb f8dd 	bl	8000a1c <HAL_TIM_IC_CaptureCallback>
 8005862:	e005      	b.n	8005870 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f000 f9e1 	bl	8005c2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 f9e7 	bl	8005c3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	691b      	ldr	r3, [r3, #16]
 800587c:	f003 0301 	and.w	r3, r3, #1
 8005880:	2b01      	cmp	r3, #1
 8005882:	d10e      	bne.n	80058a2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	f003 0301 	and.w	r3, r3, #1
 800588e:	2b01      	cmp	r3, #1
 8005890:	d107      	bne.n	80058a2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f06f 0201 	mvn.w	r2, #1
 800589a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 f9bc 	bl	8005c1a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	691b      	ldr	r3, [r3, #16]
 80058a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ac:	2b80      	cmp	r3, #128	; 0x80
 80058ae:	d10e      	bne.n	80058ce <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ba:	2b80      	cmp	r3, #128	; 0x80
 80058bc:	d107      	bne.n	80058ce <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80058c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f000 fcb2 	bl	8006232 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	691b      	ldr	r3, [r3, #16]
 80058d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058d8:	2b40      	cmp	r3, #64	; 0x40
 80058da:	d10e      	bne.n	80058fa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e6:	2b40      	cmp	r3, #64	; 0x40
 80058e8:	d107      	bne.n	80058fa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80058f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f000 f9ab 	bl	8005c50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	691b      	ldr	r3, [r3, #16]
 8005900:	f003 0320 	and.w	r3, r3, #32
 8005904:	2b20      	cmp	r3, #32
 8005906:	d10e      	bne.n	8005926 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	f003 0320 	and.w	r3, r3, #32
 8005912:	2b20      	cmp	r3, #32
 8005914:	d107      	bne.n	8005926 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f06f 0220 	mvn.w	r2, #32
 800591e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f000 fc7d 	bl	8006220 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005926:	bf00      	nop
 8005928:	3708      	adds	r7, #8
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
	...

08005930 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b084      	sub	sp, #16
 8005934:	af00      	add	r7, sp, #0
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005942:	2b01      	cmp	r3, #1
 8005944:	d101      	bne.n	800594a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005946:	2302      	movs	r3, #2
 8005948:	e0ac      	b.n	8005aa4 <HAL_TIM_PWM_ConfigChannel+0x174>
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2201      	movs	r2, #1
 800594e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2b0c      	cmp	r3, #12
 8005956:	f200 809f 	bhi.w	8005a98 <HAL_TIM_PWM_ConfigChannel+0x168>
 800595a:	a201      	add	r2, pc, #4	; (adr r2, 8005960 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800595c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005960:	08005995 	.word	0x08005995
 8005964:	08005a99 	.word	0x08005a99
 8005968:	08005a99 	.word	0x08005a99
 800596c:	08005a99 	.word	0x08005a99
 8005970:	080059d5 	.word	0x080059d5
 8005974:	08005a99 	.word	0x08005a99
 8005978:	08005a99 	.word	0x08005a99
 800597c:	08005a99 	.word	0x08005a99
 8005980:	08005a17 	.word	0x08005a17
 8005984:	08005a99 	.word	0x08005a99
 8005988:	08005a99 	.word	0x08005a99
 800598c:	08005a99 	.word	0x08005a99
 8005990:	08005a57 	.word	0x08005a57
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68b9      	ldr	r1, [r7, #8]
 800599a:	4618      	mov	r0, r3
 800599c:	f000 f9c4 	bl	8005d28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	699a      	ldr	r2, [r3, #24]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f042 0208 	orr.w	r2, r2, #8
 80059ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	699a      	ldr	r2, [r3, #24]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f022 0204 	bic.w	r2, r2, #4
 80059be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	6999      	ldr	r1, [r3, #24]
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	691a      	ldr	r2, [r3, #16]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	430a      	orrs	r2, r1
 80059d0:	619a      	str	r2, [r3, #24]
      break;
 80059d2:	e062      	b.n	8005a9a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68b9      	ldr	r1, [r7, #8]
 80059da:	4618      	mov	r0, r3
 80059dc:	f000 fa0a 	bl	8005df4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	699a      	ldr	r2, [r3, #24]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	699a      	ldr	r2, [r3, #24]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	6999      	ldr	r1, [r3, #24]
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	021a      	lsls	r2, r3, #8
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	430a      	orrs	r2, r1
 8005a12:	619a      	str	r2, [r3, #24]
      break;
 8005a14:	e041      	b.n	8005a9a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	68b9      	ldr	r1, [r7, #8]
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f000 fa53 	bl	8005ec8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	69da      	ldr	r2, [r3, #28]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f042 0208 	orr.w	r2, r2, #8
 8005a30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	69da      	ldr	r2, [r3, #28]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f022 0204 	bic.w	r2, r2, #4
 8005a40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	69d9      	ldr	r1, [r3, #28]
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	691a      	ldr	r2, [r3, #16]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	430a      	orrs	r2, r1
 8005a52:	61da      	str	r2, [r3, #28]
      break;
 8005a54:	e021      	b.n	8005a9a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	68b9      	ldr	r1, [r7, #8]
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f000 fa9d 	bl	8005f9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	69da      	ldr	r2, [r3, #28]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	69da      	ldr	r2, [r3, #28]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	69d9      	ldr	r1, [r3, #28]
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	691b      	ldr	r3, [r3, #16]
 8005a8c:	021a      	lsls	r2, r3, #8
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	430a      	orrs	r2, r1
 8005a94:	61da      	str	r2, [r3, #28]
      break;
 8005a96:	e000      	b.n	8005a9a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005a98:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005aa2:	2300      	movs	r3, #0
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3710      	adds	r7, #16
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d101      	bne.n	8005ac4 <HAL_TIM_ConfigClockSource+0x18>
 8005ac0:	2302      	movs	r3, #2
 8005ac2:	e0a6      	b.n	8005c12 <HAL_TIM_ConfigClockSource+0x166>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2202      	movs	r2, #2
 8005ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005ae2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005aea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2b40      	cmp	r3, #64	; 0x40
 8005afa:	d067      	beq.n	8005bcc <HAL_TIM_ConfigClockSource+0x120>
 8005afc:	2b40      	cmp	r3, #64	; 0x40
 8005afe:	d80b      	bhi.n	8005b18 <HAL_TIM_ConfigClockSource+0x6c>
 8005b00:	2b10      	cmp	r3, #16
 8005b02:	d073      	beq.n	8005bec <HAL_TIM_ConfigClockSource+0x140>
 8005b04:	2b10      	cmp	r3, #16
 8005b06:	d802      	bhi.n	8005b0e <HAL_TIM_ConfigClockSource+0x62>
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d06f      	beq.n	8005bec <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005b0c:	e078      	b.n	8005c00 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005b0e:	2b20      	cmp	r3, #32
 8005b10:	d06c      	beq.n	8005bec <HAL_TIM_ConfigClockSource+0x140>
 8005b12:	2b30      	cmp	r3, #48	; 0x30
 8005b14:	d06a      	beq.n	8005bec <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005b16:	e073      	b.n	8005c00 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005b18:	2b70      	cmp	r3, #112	; 0x70
 8005b1a:	d00d      	beq.n	8005b38 <HAL_TIM_ConfigClockSource+0x8c>
 8005b1c:	2b70      	cmp	r3, #112	; 0x70
 8005b1e:	d804      	bhi.n	8005b2a <HAL_TIM_ConfigClockSource+0x7e>
 8005b20:	2b50      	cmp	r3, #80	; 0x50
 8005b22:	d033      	beq.n	8005b8c <HAL_TIM_ConfigClockSource+0xe0>
 8005b24:	2b60      	cmp	r3, #96	; 0x60
 8005b26:	d041      	beq.n	8005bac <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005b28:	e06a      	b.n	8005c00 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005b2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b2e:	d066      	beq.n	8005bfe <HAL_TIM_ConfigClockSource+0x152>
 8005b30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b34:	d017      	beq.n	8005b66 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005b36:	e063      	b.n	8005c00 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6818      	ldr	r0, [r3, #0]
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	6899      	ldr	r1, [r3, #8]
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	685a      	ldr	r2, [r3, #4]
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	f000 faed 	bl	8006126 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b5a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	609a      	str	r2, [r3, #8]
      break;
 8005b64:	e04c      	b.n	8005c00 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6818      	ldr	r0, [r3, #0]
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	6899      	ldr	r1, [r3, #8]
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	685a      	ldr	r2, [r3, #4]
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	f000 fad6 	bl	8006126 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	689a      	ldr	r2, [r3, #8]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b88:	609a      	str	r2, [r3, #8]
      break;
 8005b8a:	e039      	b.n	8005c00 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6818      	ldr	r0, [r3, #0]
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	6859      	ldr	r1, [r3, #4]
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	461a      	mov	r2, r3
 8005b9a:	f000 fa4d 	bl	8006038 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	2150      	movs	r1, #80	; 0x50
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f000 faa4 	bl	80060f2 <TIM_ITRx_SetConfig>
      break;
 8005baa:	e029      	b.n	8005c00 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6818      	ldr	r0, [r3, #0]
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	6859      	ldr	r1, [r3, #4]
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	461a      	mov	r2, r3
 8005bba:	f000 fa6b 	bl	8006094 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	2160      	movs	r1, #96	; 0x60
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f000 fa94 	bl	80060f2 <TIM_ITRx_SetConfig>
      break;
 8005bca:	e019      	b.n	8005c00 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6818      	ldr	r0, [r3, #0]
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	6859      	ldr	r1, [r3, #4]
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	461a      	mov	r2, r3
 8005bda:	f000 fa2d 	bl	8006038 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	2140      	movs	r1, #64	; 0x40
 8005be4:	4618      	mov	r0, r3
 8005be6:	f000 fa84 	bl	80060f2 <TIM_ITRx_SetConfig>
      break;
 8005bea:	e009      	b.n	8005c00 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	4610      	mov	r0, r2
 8005bf8:	f000 fa7b 	bl	80060f2 <TIM_ITRx_SetConfig>
        break;
 8005bfc:	e000      	b.n	8005c00 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005bfe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3710      	adds	r7, #16
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}

08005c1a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c1a:	b480      	push	{r7}
 8005c1c:	b083      	sub	sp, #12
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005c22:	bf00      	nop
 8005c24:	370c      	adds	r7, #12
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bc80      	pop	{r7}
 8005c2a:	4770      	bx	lr

08005c2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c34:	bf00      	nop
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bc80      	pop	{r7}
 8005c3c:	4770      	bx	lr

08005c3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c3e:	b480      	push	{r7}
 8005c40:	b083      	sub	sp, #12
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c46:	bf00      	nop
 8005c48:	370c      	adds	r7, #12
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bc80      	pop	{r7}
 8005c4e:	4770      	bx	lr

08005c50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c58:	bf00      	nop
 8005c5a:	370c      	adds	r7, #12
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bc80      	pop	{r7}
 8005c60:	4770      	bx	lr
	...

08005c64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b085      	sub	sp, #20
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4a29      	ldr	r2, [pc, #164]	; (8005d1c <TIM_Base_SetConfig+0xb8>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d00b      	beq.n	8005c94 <TIM_Base_SetConfig+0x30>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c82:	d007      	beq.n	8005c94 <TIM_Base_SetConfig+0x30>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a26      	ldr	r2, [pc, #152]	; (8005d20 <TIM_Base_SetConfig+0xbc>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d003      	beq.n	8005c94 <TIM_Base_SetConfig+0x30>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4a25      	ldr	r2, [pc, #148]	; (8005d24 <TIM_Base_SetConfig+0xc0>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d108      	bne.n	8005ca6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	68fa      	ldr	r2, [r7, #12]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a1c      	ldr	r2, [pc, #112]	; (8005d1c <TIM_Base_SetConfig+0xb8>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d00b      	beq.n	8005cc6 <TIM_Base_SetConfig+0x62>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cb4:	d007      	beq.n	8005cc6 <TIM_Base_SetConfig+0x62>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a19      	ldr	r2, [pc, #100]	; (8005d20 <TIM_Base_SetConfig+0xbc>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d003      	beq.n	8005cc6 <TIM_Base_SetConfig+0x62>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a18      	ldr	r2, [pc, #96]	; (8005d24 <TIM_Base_SetConfig+0xc0>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d108      	bne.n	8005cd8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ccc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	68fa      	ldr	r2, [r7, #12]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	695b      	ldr	r3, [r3, #20]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	68fa      	ldr	r2, [r7, #12]
 8005cea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	689a      	ldr	r2, [r3, #8]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a07      	ldr	r2, [pc, #28]	; (8005d1c <TIM_Base_SetConfig+0xb8>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d103      	bne.n	8005d0c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	691a      	ldr	r2, [r3, #16]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	615a      	str	r2, [r3, #20]
}
 8005d12:	bf00      	nop
 8005d14:	3714      	adds	r7, #20
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bc80      	pop	{r7}
 8005d1a:	4770      	bx	lr
 8005d1c:	40012c00 	.word	0x40012c00
 8005d20:	40000400 	.word	0x40000400
 8005d24:	40000800 	.word	0x40000800

08005d28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b087      	sub	sp, #28
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6a1b      	ldr	r3, [r3, #32]
 8005d36:	f023 0201 	bic.w	r2, r3, #1
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6a1b      	ldr	r3, [r3, #32]
 8005d42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	699b      	ldr	r3, [r3, #24]
 8005d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f023 0303 	bic.w	r3, r3, #3
 8005d5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	f023 0302 	bic.w	r3, r3, #2
 8005d70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	697a      	ldr	r2, [r7, #20]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4a1c      	ldr	r2, [pc, #112]	; (8005df0 <TIM_OC1_SetConfig+0xc8>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d10c      	bne.n	8005d9e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	f023 0308 	bic.w	r3, r3, #8
 8005d8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	697a      	ldr	r2, [r7, #20]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	f023 0304 	bic.w	r3, r3, #4
 8005d9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4a13      	ldr	r2, [pc, #76]	; (8005df0 <TIM_OC1_SetConfig+0xc8>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d111      	bne.n	8005dca <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005dac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005db4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	695b      	ldr	r3, [r3, #20]
 8005dba:	693a      	ldr	r2, [r7, #16]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	699b      	ldr	r3, [r3, #24]
 8005dc4:	693a      	ldr	r2, [r7, #16]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	693a      	ldr	r2, [r7, #16]
 8005dce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	68fa      	ldr	r2, [r7, #12]
 8005dd4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	685a      	ldr	r2, [r3, #4]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	697a      	ldr	r2, [r7, #20]
 8005de2:	621a      	str	r2, [r3, #32]
}
 8005de4:	bf00      	nop
 8005de6:	371c      	adds	r7, #28
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bc80      	pop	{r7}
 8005dec:	4770      	bx	lr
 8005dee:	bf00      	nop
 8005df0:	40012c00 	.word	0x40012c00

08005df4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b087      	sub	sp, #28
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a1b      	ldr	r3, [r3, #32]
 8005e02:	f023 0210 	bic.w	r2, r3, #16
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a1b      	ldr	r3, [r3, #32]
 8005e0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	699b      	ldr	r3, [r3, #24]
 8005e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	021b      	lsls	r3, r3, #8
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	4313      	orrs	r3, r2
 8005e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	f023 0320 	bic.w	r3, r3, #32
 8005e3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	011b      	lsls	r3, r3, #4
 8005e46:	697a      	ldr	r2, [r7, #20]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	4a1d      	ldr	r2, [pc, #116]	; (8005ec4 <TIM_OC2_SetConfig+0xd0>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d10d      	bne.n	8005e70 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	011b      	lsls	r3, r3, #4
 8005e62:	697a      	ldr	r2, [r7, #20]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e6e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4a14      	ldr	r2, [pc, #80]	; (8005ec4 <TIM_OC2_SetConfig+0xd0>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d113      	bne.n	8005ea0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	695b      	ldr	r3, [r3, #20]
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	693a      	ldr	r2, [r7, #16]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	699b      	ldr	r3, [r3, #24]
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	693a      	ldr	r2, [r7, #16]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	693a      	ldr	r2, [r7, #16]
 8005ea4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	685a      	ldr	r2, [r3, #4]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	697a      	ldr	r2, [r7, #20]
 8005eb8:	621a      	str	r2, [r3, #32]
}
 8005eba:	bf00      	nop
 8005ebc:	371c      	adds	r7, #28
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bc80      	pop	{r7}
 8005ec2:	4770      	bx	lr
 8005ec4:	40012c00 	.word	0x40012c00

08005ec8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b087      	sub	sp, #28
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6a1b      	ldr	r3, [r3, #32]
 8005ed6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6a1b      	ldr	r3, [r3, #32]
 8005ee2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	69db      	ldr	r3, [r3, #28]
 8005eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ef6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f023 0303 	bic.w	r3, r3, #3
 8005efe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	68fa      	ldr	r2, [r7, #12]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	021b      	lsls	r3, r3, #8
 8005f18:	697a      	ldr	r2, [r7, #20]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a1d      	ldr	r2, [pc, #116]	; (8005f98 <TIM_OC3_SetConfig+0xd0>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d10d      	bne.n	8005f42 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	021b      	lsls	r3, r3, #8
 8005f34:	697a      	ldr	r2, [r7, #20]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	4a14      	ldr	r2, [pc, #80]	; (8005f98 <TIM_OC3_SetConfig+0xd0>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d113      	bne.n	8005f72 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	695b      	ldr	r3, [r3, #20]
 8005f5e:	011b      	lsls	r3, r3, #4
 8005f60:	693a      	ldr	r2, [r7, #16]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	699b      	ldr	r3, [r3, #24]
 8005f6a:	011b      	lsls	r3, r3, #4
 8005f6c:	693a      	ldr	r2, [r7, #16]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	693a      	ldr	r2, [r7, #16]
 8005f76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	68fa      	ldr	r2, [r7, #12]
 8005f7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	685a      	ldr	r2, [r3, #4]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	697a      	ldr	r2, [r7, #20]
 8005f8a:	621a      	str	r2, [r3, #32]
}
 8005f8c:	bf00      	nop
 8005f8e:	371c      	adds	r7, #28
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bc80      	pop	{r7}
 8005f94:	4770      	bx	lr
 8005f96:	bf00      	nop
 8005f98:	40012c00 	.word	0x40012c00

08005f9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b087      	sub	sp, #28
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6a1b      	ldr	r3, [r3, #32]
 8005faa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6a1b      	ldr	r3, [r3, #32]
 8005fb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	69db      	ldr	r3, [r3, #28]
 8005fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	021b      	lsls	r3, r3, #8
 8005fda:	68fa      	ldr	r2, [r7, #12]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005fe6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	031b      	lsls	r3, r3, #12
 8005fee:	693a      	ldr	r2, [r7, #16]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	4a0f      	ldr	r2, [pc, #60]	; (8006034 <TIM_OC4_SetConfig+0x98>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d109      	bne.n	8006010 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006002:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	695b      	ldr	r3, [r3, #20]
 8006008:	019b      	lsls	r3, r3, #6
 800600a:	697a      	ldr	r2, [r7, #20]
 800600c:	4313      	orrs	r3, r2
 800600e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	697a      	ldr	r2, [r7, #20]
 8006014:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	685a      	ldr	r2, [r3, #4]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	693a      	ldr	r2, [r7, #16]
 8006028:	621a      	str	r2, [r3, #32]
}
 800602a:	bf00      	nop
 800602c:	371c      	adds	r7, #28
 800602e:	46bd      	mov	sp, r7
 8006030:	bc80      	pop	{r7}
 8006032:	4770      	bx	lr
 8006034:	40012c00 	.word	0x40012c00

08006038 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006038:	b480      	push	{r7}
 800603a:	b087      	sub	sp, #28
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6a1b      	ldr	r3, [r3, #32]
 8006048:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6a1b      	ldr	r3, [r3, #32]
 800604e:	f023 0201 	bic.w	r2, r3, #1
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	699b      	ldr	r3, [r3, #24]
 800605a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006062:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	011b      	lsls	r3, r3, #4
 8006068:	693a      	ldr	r2, [r7, #16]
 800606a:	4313      	orrs	r3, r2
 800606c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	f023 030a 	bic.w	r3, r3, #10
 8006074:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006076:	697a      	ldr	r2, [r7, #20]
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	4313      	orrs	r3, r2
 800607c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	693a      	ldr	r2, [r7, #16]
 8006082:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	697a      	ldr	r2, [r7, #20]
 8006088:	621a      	str	r2, [r3, #32]
}
 800608a:	bf00      	nop
 800608c:	371c      	adds	r7, #28
 800608e:	46bd      	mov	sp, r7
 8006090:	bc80      	pop	{r7}
 8006092:	4770      	bx	lr

08006094 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006094:	b480      	push	{r7}
 8006096:	b087      	sub	sp, #28
 8006098:	af00      	add	r7, sp, #0
 800609a:	60f8      	str	r0, [r7, #12]
 800609c:	60b9      	str	r1, [r7, #8]
 800609e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6a1b      	ldr	r3, [r3, #32]
 80060a4:	f023 0210 	bic.w	r2, r3, #16
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	699b      	ldr	r3, [r3, #24]
 80060b0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6a1b      	ldr	r3, [r3, #32]
 80060b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060be:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	031b      	lsls	r3, r3, #12
 80060c4:	697a      	ldr	r2, [r7, #20]
 80060c6:	4313      	orrs	r3, r2
 80060c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80060d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	011b      	lsls	r3, r3, #4
 80060d6:	693a      	ldr	r2, [r7, #16]
 80060d8:	4313      	orrs	r3, r2
 80060da:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	697a      	ldr	r2, [r7, #20]
 80060e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	693a      	ldr	r2, [r7, #16]
 80060e6:	621a      	str	r2, [r3, #32]
}
 80060e8:	bf00      	nop
 80060ea:	371c      	adds	r7, #28
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bc80      	pop	{r7}
 80060f0:	4770      	bx	lr

080060f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80060f2:	b480      	push	{r7}
 80060f4:	b085      	sub	sp, #20
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
 80060fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006108:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800610a:	683a      	ldr	r2, [r7, #0]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	4313      	orrs	r3, r2
 8006110:	f043 0307 	orr.w	r3, r3, #7
 8006114:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	609a      	str	r2, [r3, #8]
}
 800611c:	bf00      	nop
 800611e:	3714      	adds	r7, #20
 8006120:	46bd      	mov	sp, r7
 8006122:	bc80      	pop	{r7}
 8006124:	4770      	bx	lr

08006126 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006126:	b480      	push	{r7}
 8006128:	b087      	sub	sp, #28
 800612a:	af00      	add	r7, sp, #0
 800612c:	60f8      	str	r0, [r7, #12]
 800612e:	60b9      	str	r1, [r7, #8]
 8006130:	607a      	str	r2, [r7, #4]
 8006132:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006140:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	021a      	lsls	r2, r3, #8
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	431a      	orrs	r2, r3
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	4313      	orrs	r3, r2
 800614e:	697a      	ldr	r2, [r7, #20]
 8006150:	4313      	orrs	r3, r2
 8006152:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	697a      	ldr	r2, [r7, #20]
 8006158:	609a      	str	r2, [r3, #8]
}
 800615a:	bf00      	nop
 800615c:	371c      	adds	r7, #28
 800615e:	46bd      	mov	sp, r7
 8006160:	bc80      	pop	{r7}
 8006162:	4770      	bx	lr

08006164 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006164:	b480      	push	{r7}
 8006166:	b085      	sub	sp, #20
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006174:	2b01      	cmp	r3, #1
 8006176:	d101      	bne.n	800617c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006178:	2302      	movs	r3, #2
 800617a:	e046      	b.n	800620a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2202      	movs	r2, #2
 8006188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	68fa      	ldr	r2, [r7, #12]
 80061b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a16      	ldr	r2, [pc, #88]	; (8006214 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d00e      	beq.n	80061de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061c8:	d009      	beq.n	80061de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a12      	ldr	r2, [pc, #72]	; (8006218 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d004      	beq.n	80061de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a10      	ldr	r2, [pc, #64]	; (800621c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d10c      	bne.n	80061f8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	68ba      	ldr	r2, [r7, #8]
 80061ec:	4313      	orrs	r3, r2
 80061ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	68ba      	ldr	r2, [r7, #8]
 80061f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2200      	movs	r2, #0
 8006204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006208:	2300      	movs	r3, #0
}
 800620a:	4618      	mov	r0, r3
 800620c:	3714      	adds	r7, #20
 800620e:	46bd      	mov	sp, r7
 8006210:	bc80      	pop	{r7}
 8006212:	4770      	bx	lr
 8006214:	40012c00 	.word	0x40012c00
 8006218:	40000400 	.word	0x40000400
 800621c:	40000800 	.word	0x40000800

08006220 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006228:	bf00      	nop
 800622a:	370c      	adds	r7, #12
 800622c:	46bd      	mov	sp, r7
 800622e:	bc80      	pop	{r7}
 8006230:	4770      	bx	lr

08006232 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006232:	b480      	push	{r7}
 8006234:	b083      	sub	sp, #12
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800623a:	bf00      	nop
 800623c:	370c      	adds	r7, #12
 800623e:	46bd      	mov	sp, r7
 8006240:	bc80      	pop	{r7}
 8006242:	4770      	bx	lr

08006244 <__errno>:
 8006244:	4b01      	ldr	r3, [pc, #4]	; (800624c <__errno+0x8>)
 8006246:	6818      	ldr	r0, [r3, #0]
 8006248:	4770      	bx	lr
 800624a:	bf00      	nop
 800624c:	20000010 	.word	0x20000010

08006250 <__libc_init_array>:
 8006250:	b570      	push	{r4, r5, r6, lr}
 8006252:	2500      	movs	r5, #0
 8006254:	4e0c      	ldr	r6, [pc, #48]	; (8006288 <__libc_init_array+0x38>)
 8006256:	4c0d      	ldr	r4, [pc, #52]	; (800628c <__libc_init_array+0x3c>)
 8006258:	1ba4      	subs	r4, r4, r6
 800625a:	10a4      	asrs	r4, r4, #2
 800625c:	42a5      	cmp	r5, r4
 800625e:	d109      	bne.n	8006274 <__libc_init_array+0x24>
 8006260:	f000 fc34 	bl	8006acc <_init>
 8006264:	2500      	movs	r5, #0
 8006266:	4e0a      	ldr	r6, [pc, #40]	; (8006290 <__libc_init_array+0x40>)
 8006268:	4c0a      	ldr	r4, [pc, #40]	; (8006294 <__libc_init_array+0x44>)
 800626a:	1ba4      	subs	r4, r4, r6
 800626c:	10a4      	asrs	r4, r4, #2
 800626e:	42a5      	cmp	r5, r4
 8006270:	d105      	bne.n	800627e <__libc_init_array+0x2e>
 8006272:	bd70      	pop	{r4, r5, r6, pc}
 8006274:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006278:	4798      	blx	r3
 800627a:	3501      	adds	r5, #1
 800627c:	e7ee      	b.n	800625c <__libc_init_array+0xc>
 800627e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006282:	4798      	blx	r3
 8006284:	3501      	adds	r5, #1
 8006286:	e7f2      	b.n	800626e <__libc_init_array+0x1e>
 8006288:	08007eb8 	.word	0x08007eb8
 800628c:	08007eb8 	.word	0x08007eb8
 8006290:	08007eb8 	.word	0x08007eb8
 8006294:	08007ebc 	.word	0x08007ebc

08006298 <memset>:
 8006298:	4603      	mov	r3, r0
 800629a:	4402      	add	r2, r0
 800629c:	4293      	cmp	r3, r2
 800629e:	d100      	bne.n	80062a2 <memset+0xa>
 80062a0:	4770      	bx	lr
 80062a2:	f803 1b01 	strb.w	r1, [r3], #1
 80062a6:	e7f9      	b.n	800629c <memset+0x4>

080062a8 <siprintf>:
 80062a8:	b40e      	push	{r1, r2, r3}
 80062aa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80062ae:	b500      	push	{lr}
 80062b0:	b09c      	sub	sp, #112	; 0x70
 80062b2:	ab1d      	add	r3, sp, #116	; 0x74
 80062b4:	9002      	str	r0, [sp, #8]
 80062b6:	9006      	str	r0, [sp, #24]
 80062b8:	9107      	str	r1, [sp, #28]
 80062ba:	9104      	str	r1, [sp, #16]
 80062bc:	4808      	ldr	r0, [pc, #32]	; (80062e0 <siprintf+0x38>)
 80062be:	4909      	ldr	r1, [pc, #36]	; (80062e4 <siprintf+0x3c>)
 80062c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80062c4:	9105      	str	r1, [sp, #20]
 80062c6:	6800      	ldr	r0, [r0, #0]
 80062c8:	a902      	add	r1, sp, #8
 80062ca:	9301      	str	r3, [sp, #4]
 80062cc:	f000 f8c0 	bl	8006450 <_svfiprintf_r>
 80062d0:	2200      	movs	r2, #0
 80062d2:	9b02      	ldr	r3, [sp, #8]
 80062d4:	701a      	strb	r2, [r3, #0]
 80062d6:	b01c      	add	sp, #112	; 0x70
 80062d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80062dc:	b003      	add	sp, #12
 80062de:	4770      	bx	lr
 80062e0:	20000010 	.word	0x20000010
 80062e4:	ffff0208 	.word	0xffff0208

080062e8 <_malloc_r>:
 80062e8:	b570      	push	{r4, r5, r6, lr}
 80062ea:	1ccd      	adds	r5, r1, #3
 80062ec:	f025 0503 	bic.w	r5, r5, #3
 80062f0:	3508      	adds	r5, #8
 80062f2:	2d0c      	cmp	r5, #12
 80062f4:	bf38      	it	cc
 80062f6:	250c      	movcc	r5, #12
 80062f8:	2d00      	cmp	r5, #0
 80062fa:	4606      	mov	r6, r0
 80062fc:	db01      	blt.n	8006302 <_malloc_r+0x1a>
 80062fe:	42a9      	cmp	r1, r5
 8006300:	d903      	bls.n	800630a <_malloc_r+0x22>
 8006302:	230c      	movs	r3, #12
 8006304:	6033      	str	r3, [r6, #0]
 8006306:	2000      	movs	r0, #0
 8006308:	bd70      	pop	{r4, r5, r6, pc}
 800630a:	f000 fb63 	bl	80069d4 <__malloc_lock>
 800630e:	4a21      	ldr	r2, [pc, #132]	; (8006394 <_malloc_r+0xac>)
 8006310:	6814      	ldr	r4, [r2, #0]
 8006312:	4621      	mov	r1, r4
 8006314:	b991      	cbnz	r1, 800633c <_malloc_r+0x54>
 8006316:	4c20      	ldr	r4, [pc, #128]	; (8006398 <_malloc_r+0xb0>)
 8006318:	6823      	ldr	r3, [r4, #0]
 800631a:	b91b      	cbnz	r3, 8006324 <_malloc_r+0x3c>
 800631c:	4630      	mov	r0, r6
 800631e:	f000 fb17 	bl	8006950 <_sbrk_r>
 8006322:	6020      	str	r0, [r4, #0]
 8006324:	4629      	mov	r1, r5
 8006326:	4630      	mov	r0, r6
 8006328:	f000 fb12 	bl	8006950 <_sbrk_r>
 800632c:	1c43      	adds	r3, r0, #1
 800632e:	d124      	bne.n	800637a <_malloc_r+0x92>
 8006330:	230c      	movs	r3, #12
 8006332:	4630      	mov	r0, r6
 8006334:	6033      	str	r3, [r6, #0]
 8006336:	f000 fb4e 	bl	80069d6 <__malloc_unlock>
 800633a:	e7e4      	b.n	8006306 <_malloc_r+0x1e>
 800633c:	680b      	ldr	r3, [r1, #0]
 800633e:	1b5b      	subs	r3, r3, r5
 8006340:	d418      	bmi.n	8006374 <_malloc_r+0x8c>
 8006342:	2b0b      	cmp	r3, #11
 8006344:	d90f      	bls.n	8006366 <_malloc_r+0x7e>
 8006346:	600b      	str	r3, [r1, #0]
 8006348:	18cc      	adds	r4, r1, r3
 800634a:	50cd      	str	r5, [r1, r3]
 800634c:	4630      	mov	r0, r6
 800634e:	f000 fb42 	bl	80069d6 <__malloc_unlock>
 8006352:	f104 000b 	add.w	r0, r4, #11
 8006356:	1d23      	adds	r3, r4, #4
 8006358:	f020 0007 	bic.w	r0, r0, #7
 800635c:	1ac3      	subs	r3, r0, r3
 800635e:	d0d3      	beq.n	8006308 <_malloc_r+0x20>
 8006360:	425a      	negs	r2, r3
 8006362:	50e2      	str	r2, [r4, r3]
 8006364:	e7d0      	b.n	8006308 <_malloc_r+0x20>
 8006366:	684b      	ldr	r3, [r1, #4]
 8006368:	428c      	cmp	r4, r1
 800636a:	bf16      	itet	ne
 800636c:	6063      	strne	r3, [r4, #4]
 800636e:	6013      	streq	r3, [r2, #0]
 8006370:	460c      	movne	r4, r1
 8006372:	e7eb      	b.n	800634c <_malloc_r+0x64>
 8006374:	460c      	mov	r4, r1
 8006376:	6849      	ldr	r1, [r1, #4]
 8006378:	e7cc      	b.n	8006314 <_malloc_r+0x2c>
 800637a:	1cc4      	adds	r4, r0, #3
 800637c:	f024 0403 	bic.w	r4, r4, #3
 8006380:	42a0      	cmp	r0, r4
 8006382:	d005      	beq.n	8006390 <_malloc_r+0xa8>
 8006384:	1a21      	subs	r1, r4, r0
 8006386:	4630      	mov	r0, r6
 8006388:	f000 fae2 	bl	8006950 <_sbrk_r>
 800638c:	3001      	adds	r0, #1
 800638e:	d0cf      	beq.n	8006330 <_malloc_r+0x48>
 8006390:	6025      	str	r5, [r4, #0]
 8006392:	e7db      	b.n	800634c <_malloc_r+0x64>
 8006394:	200004b4 	.word	0x200004b4
 8006398:	200004b8 	.word	0x200004b8

0800639c <__ssputs_r>:
 800639c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063a0:	688e      	ldr	r6, [r1, #8]
 80063a2:	4682      	mov	sl, r0
 80063a4:	429e      	cmp	r6, r3
 80063a6:	460c      	mov	r4, r1
 80063a8:	4690      	mov	r8, r2
 80063aa:	4699      	mov	r9, r3
 80063ac:	d837      	bhi.n	800641e <__ssputs_r+0x82>
 80063ae:	898a      	ldrh	r2, [r1, #12]
 80063b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80063b4:	d031      	beq.n	800641a <__ssputs_r+0x7e>
 80063b6:	2302      	movs	r3, #2
 80063b8:	6825      	ldr	r5, [r4, #0]
 80063ba:	6909      	ldr	r1, [r1, #16]
 80063bc:	1a6f      	subs	r7, r5, r1
 80063be:	6965      	ldr	r5, [r4, #20]
 80063c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80063c4:	fb95 f5f3 	sdiv	r5, r5, r3
 80063c8:	f109 0301 	add.w	r3, r9, #1
 80063cc:	443b      	add	r3, r7
 80063ce:	429d      	cmp	r5, r3
 80063d0:	bf38      	it	cc
 80063d2:	461d      	movcc	r5, r3
 80063d4:	0553      	lsls	r3, r2, #21
 80063d6:	d530      	bpl.n	800643a <__ssputs_r+0x9e>
 80063d8:	4629      	mov	r1, r5
 80063da:	f7ff ff85 	bl	80062e8 <_malloc_r>
 80063de:	4606      	mov	r6, r0
 80063e0:	b950      	cbnz	r0, 80063f8 <__ssputs_r+0x5c>
 80063e2:	230c      	movs	r3, #12
 80063e4:	f04f 30ff 	mov.w	r0, #4294967295
 80063e8:	f8ca 3000 	str.w	r3, [sl]
 80063ec:	89a3      	ldrh	r3, [r4, #12]
 80063ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063f2:	81a3      	strh	r3, [r4, #12]
 80063f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063f8:	463a      	mov	r2, r7
 80063fa:	6921      	ldr	r1, [r4, #16]
 80063fc:	f000 fac6 	bl	800698c <memcpy>
 8006400:	89a3      	ldrh	r3, [r4, #12]
 8006402:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006406:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800640a:	81a3      	strh	r3, [r4, #12]
 800640c:	6126      	str	r6, [r4, #16]
 800640e:	443e      	add	r6, r7
 8006410:	6026      	str	r6, [r4, #0]
 8006412:	464e      	mov	r6, r9
 8006414:	6165      	str	r5, [r4, #20]
 8006416:	1bed      	subs	r5, r5, r7
 8006418:	60a5      	str	r5, [r4, #8]
 800641a:	454e      	cmp	r6, r9
 800641c:	d900      	bls.n	8006420 <__ssputs_r+0x84>
 800641e:	464e      	mov	r6, r9
 8006420:	4632      	mov	r2, r6
 8006422:	4641      	mov	r1, r8
 8006424:	6820      	ldr	r0, [r4, #0]
 8006426:	f000 fabc 	bl	80069a2 <memmove>
 800642a:	68a3      	ldr	r3, [r4, #8]
 800642c:	2000      	movs	r0, #0
 800642e:	1b9b      	subs	r3, r3, r6
 8006430:	60a3      	str	r3, [r4, #8]
 8006432:	6823      	ldr	r3, [r4, #0]
 8006434:	441e      	add	r6, r3
 8006436:	6026      	str	r6, [r4, #0]
 8006438:	e7dc      	b.n	80063f4 <__ssputs_r+0x58>
 800643a:	462a      	mov	r2, r5
 800643c:	f000 fb18 	bl	8006a70 <_realloc_r>
 8006440:	4606      	mov	r6, r0
 8006442:	2800      	cmp	r0, #0
 8006444:	d1e2      	bne.n	800640c <__ssputs_r+0x70>
 8006446:	6921      	ldr	r1, [r4, #16]
 8006448:	4650      	mov	r0, sl
 800644a:	f000 fac5 	bl	80069d8 <_free_r>
 800644e:	e7c8      	b.n	80063e2 <__ssputs_r+0x46>

08006450 <_svfiprintf_r>:
 8006450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006454:	461d      	mov	r5, r3
 8006456:	898b      	ldrh	r3, [r1, #12]
 8006458:	b09d      	sub	sp, #116	; 0x74
 800645a:	061f      	lsls	r7, r3, #24
 800645c:	4680      	mov	r8, r0
 800645e:	460c      	mov	r4, r1
 8006460:	4616      	mov	r6, r2
 8006462:	d50f      	bpl.n	8006484 <_svfiprintf_r+0x34>
 8006464:	690b      	ldr	r3, [r1, #16]
 8006466:	b96b      	cbnz	r3, 8006484 <_svfiprintf_r+0x34>
 8006468:	2140      	movs	r1, #64	; 0x40
 800646a:	f7ff ff3d 	bl	80062e8 <_malloc_r>
 800646e:	6020      	str	r0, [r4, #0]
 8006470:	6120      	str	r0, [r4, #16]
 8006472:	b928      	cbnz	r0, 8006480 <_svfiprintf_r+0x30>
 8006474:	230c      	movs	r3, #12
 8006476:	f8c8 3000 	str.w	r3, [r8]
 800647a:	f04f 30ff 	mov.w	r0, #4294967295
 800647e:	e0c8      	b.n	8006612 <_svfiprintf_r+0x1c2>
 8006480:	2340      	movs	r3, #64	; 0x40
 8006482:	6163      	str	r3, [r4, #20]
 8006484:	2300      	movs	r3, #0
 8006486:	9309      	str	r3, [sp, #36]	; 0x24
 8006488:	2320      	movs	r3, #32
 800648a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800648e:	2330      	movs	r3, #48	; 0x30
 8006490:	f04f 0b01 	mov.w	fp, #1
 8006494:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006498:	9503      	str	r5, [sp, #12]
 800649a:	4637      	mov	r7, r6
 800649c:	463d      	mov	r5, r7
 800649e:	f815 3b01 	ldrb.w	r3, [r5], #1
 80064a2:	b10b      	cbz	r3, 80064a8 <_svfiprintf_r+0x58>
 80064a4:	2b25      	cmp	r3, #37	; 0x25
 80064a6:	d13e      	bne.n	8006526 <_svfiprintf_r+0xd6>
 80064a8:	ebb7 0a06 	subs.w	sl, r7, r6
 80064ac:	d00b      	beq.n	80064c6 <_svfiprintf_r+0x76>
 80064ae:	4653      	mov	r3, sl
 80064b0:	4632      	mov	r2, r6
 80064b2:	4621      	mov	r1, r4
 80064b4:	4640      	mov	r0, r8
 80064b6:	f7ff ff71 	bl	800639c <__ssputs_r>
 80064ba:	3001      	adds	r0, #1
 80064bc:	f000 80a4 	beq.w	8006608 <_svfiprintf_r+0x1b8>
 80064c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064c2:	4453      	add	r3, sl
 80064c4:	9309      	str	r3, [sp, #36]	; 0x24
 80064c6:	783b      	ldrb	r3, [r7, #0]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	f000 809d 	beq.w	8006608 <_svfiprintf_r+0x1b8>
 80064ce:	2300      	movs	r3, #0
 80064d0:	f04f 32ff 	mov.w	r2, #4294967295
 80064d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064d8:	9304      	str	r3, [sp, #16]
 80064da:	9307      	str	r3, [sp, #28]
 80064dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80064e0:	931a      	str	r3, [sp, #104]	; 0x68
 80064e2:	462f      	mov	r7, r5
 80064e4:	2205      	movs	r2, #5
 80064e6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80064ea:	4850      	ldr	r0, [pc, #320]	; (800662c <_svfiprintf_r+0x1dc>)
 80064ec:	f000 fa40 	bl	8006970 <memchr>
 80064f0:	9b04      	ldr	r3, [sp, #16]
 80064f2:	b9d0      	cbnz	r0, 800652a <_svfiprintf_r+0xda>
 80064f4:	06d9      	lsls	r1, r3, #27
 80064f6:	bf44      	itt	mi
 80064f8:	2220      	movmi	r2, #32
 80064fa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80064fe:	071a      	lsls	r2, r3, #28
 8006500:	bf44      	itt	mi
 8006502:	222b      	movmi	r2, #43	; 0x2b
 8006504:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006508:	782a      	ldrb	r2, [r5, #0]
 800650a:	2a2a      	cmp	r2, #42	; 0x2a
 800650c:	d015      	beq.n	800653a <_svfiprintf_r+0xea>
 800650e:	462f      	mov	r7, r5
 8006510:	2000      	movs	r0, #0
 8006512:	250a      	movs	r5, #10
 8006514:	9a07      	ldr	r2, [sp, #28]
 8006516:	4639      	mov	r1, r7
 8006518:	f811 3b01 	ldrb.w	r3, [r1], #1
 800651c:	3b30      	subs	r3, #48	; 0x30
 800651e:	2b09      	cmp	r3, #9
 8006520:	d94d      	bls.n	80065be <_svfiprintf_r+0x16e>
 8006522:	b1b8      	cbz	r0, 8006554 <_svfiprintf_r+0x104>
 8006524:	e00f      	b.n	8006546 <_svfiprintf_r+0xf6>
 8006526:	462f      	mov	r7, r5
 8006528:	e7b8      	b.n	800649c <_svfiprintf_r+0x4c>
 800652a:	4a40      	ldr	r2, [pc, #256]	; (800662c <_svfiprintf_r+0x1dc>)
 800652c:	463d      	mov	r5, r7
 800652e:	1a80      	subs	r0, r0, r2
 8006530:	fa0b f000 	lsl.w	r0, fp, r0
 8006534:	4318      	orrs	r0, r3
 8006536:	9004      	str	r0, [sp, #16]
 8006538:	e7d3      	b.n	80064e2 <_svfiprintf_r+0x92>
 800653a:	9a03      	ldr	r2, [sp, #12]
 800653c:	1d11      	adds	r1, r2, #4
 800653e:	6812      	ldr	r2, [r2, #0]
 8006540:	9103      	str	r1, [sp, #12]
 8006542:	2a00      	cmp	r2, #0
 8006544:	db01      	blt.n	800654a <_svfiprintf_r+0xfa>
 8006546:	9207      	str	r2, [sp, #28]
 8006548:	e004      	b.n	8006554 <_svfiprintf_r+0x104>
 800654a:	4252      	negs	r2, r2
 800654c:	f043 0302 	orr.w	r3, r3, #2
 8006550:	9207      	str	r2, [sp, #28]
 8006552:	9304      	str	r3, [sp, #16]
 8006554:	783b      	ldrb	r3, [r7, #0]
 8006556:	2b2e      	cmp	r3, #46	; 0x2e
 8006558:	d10c      	bne.n	8006574 <_svfiprintf_r+0x124>
 800655a:	787b      	ldrb	r3, [r7, #1]
 800655c:	2b2a      	cmp	r3, #42	; 0x2a
 800655e:	d133      	bne.n	80065c8 <_svfiprintf_r+0x178>
 8006560:	9b03      	ldr	r3, [sp, #12]
 8006562:	3702      	adds	r7, #2
 8006564:	1d1a      	adds	r2, r3, #4
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	9203      	str	r2, [sp, #12]
 800656a:	2b00      	cmp	r3, #0
 800656c:	bfb8      	it	lt
 800656e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006572:	9305      	str	r3, [sp, #20]
 8006574:	4d2e      	ldr	r5, [pc, #184]	; (8006630 <_svfiprintf_r+0x1e0>)
 8006576:	2203      	movs	r2, #3
 8006578:	7839      	ldrb	r1, [r7, #0]
 800657a:	4628      	mov	r0, r5
 800657c:	f000 f9f8 	bl	8006970 <memchr>
 8006580:	b138      	cbz	r0, 8006592 <_svfiprintf_r+0x142>
 8006582:	2340      	movs	r3, #64	; 0x40
 8006584:	1b40      	subs	r0, r0, r5
 8006586:	fa03 f000 	lsl.w	r0, r3, r0
 800658a:	9b04      	ldr	r3, [sp, #16]
 800658c:	3701      	adds	r7, #1
 800658e:	4303      	orrs	r3, r0
 8006590:	9304      	str	r3, [sp, #16]
 8006592:	7839      	ldrb	r1, [r7, #0]
 8006594:	2206      	movs	r2, #6
 8006596:	4827      	ldr	r0, [pc, #156]	; (8006634 <_svfiprintf_r+0x1e4>)
 8006598:	1c7e      	adds	r6, r7, #1
 800659a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800659e:	f000 f9e7 	bl	8006970 <memchr>
 80065a2:	2800      	cmp	r0, #0
 80065a4:	d038      	beq.n	8006618 <_svfiprintf_r+0x1c8>
 80065a6:	4b24      	ldr	r3, [pc, #144]	; (8006638 <_svfiprintf_r+0x1e8>)
 80065a8:	bb13      	cbnz	r3, 80065f0 <_svfiprintf_r+0x1a0>
 80065aa:	9b03      	ldr	r3, [sp, #12]
 80065ac:	3307      	adds	r3, #7
 80065ae:	f023 0307 	bic.w	r3, r3, #7
 80065b2:	3308      	adds	r3, #8
 80065b4:	9303      	str	r3, [sp, #12]
 80065b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065b8:	444b      	add	r3, r9
 80065ba:	9309      	str	r3, [sp, #36]	; 0x24
 80065bc:	e76d      	b.n	800649a <_svfiprintf_r+0x4a>
 80065be:	fb05 3202 	mla	r2, r5, r2, r3
 80065c2:	2001      	movs	r0, #1
 80065c4:	460f      	mov	r7, r1
 80065c6:	e7a6      	b.n	8006516 <_svfiprintf_r+0xc6>
 80065c8:	2300      	movs	r3, #0
 80065ca:	250a      	movs	r5, #10
 80065cc:	4619      	mov	r1, r3
 80065ce:	3701      	adds	r7, #1
 80065d0:	9305      	str	r3, [sp, #20]
 80065d2:	4638      	mov	r0, r7
 80065d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065d8:	3a30      	subs	r2, #48	; 0x30
 80065da:	2a09      	cmp	r2, #9
 80065dc:	d903      	bls.n	80065e6 <_svfiprintf_r+0x196>
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d0c8      	beq.n	8006574 <_svfiprintf_r+0x124>
 80065e2:	9105      	str	r1, [sp, #20]
 80065e4:	e7c6      	b.n	8006574 <_svfiprintf_r+0x124>
 80065e6:	fb05 2101 	mla	r1, r5, r1, r2
 80065ea:	2301      	movs	r3, #1
 80065ec:	4607      	mov	r7, r0
 80065ee:	e7f0      	b.n	80065d2 <_svfiprintf_r+0x182>
 80065f0:	ab03      	add	r3, sp, #12
 80065f2:	9300      	str	r3, [sp, #0]
 80065f4:	4622      	mov	r2, r4
 80065f6:	4b11      	ldr	r3, [pc, #68]	; (800663c <_svfiprintf_r+0x1ec>)
 80065f8:	a904      	add	r1, sp, #16
 80065fa:	4640      	mov	r0, r8
 80065fc:	f3af 8000 	nop.w
 8006600:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006604:	4681      	mov	r9, r0
 8006606:	d1d6      	bne.n	80065b6 <_svfiprintf_r+0x166>
 8006608:	89a3      	ldrh	r3, [r4, #12]
 800660a:	065b      	lsls	r3, r3, #25
 800660c:	f53f af35 	bmi.w	800647a <_svfiprintf_r+0x2a>
 8006610:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006612:	b01d      	add	sp, #116	; 0x74
 8006614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006618:	ab03      	add	r3, sp, #12
 800661a:	9300      	str	r3, [sp, #0]
 800661c:	4622      	mov	r2, r4
 800661e:	4b07      	ldr	r3, [pc, #28]	; (800663c <_svfiprintf_r+0x1ec>)
 8006620:	a904      	add	r1, sp, #16
 8006622:	4640      	mov	r0, r8
 8006624:	f000 f882 	bl	800672c <_printf_i>
 8006628:	e7ea      	b.n	8006600 <_svfiprintf_r+0x1b0>
 800662a:	bf00      	nop
 800662c:	08007e84 	.word	0x08007e84
 8006630:	08007e8a 	.word	0x08007e8a
 8006634:	08007e8e 	.word	0x08007e8e
 8006638:	00000000 	.word	0x00000000
 800663c:	0800639d 	.word	0x0800639d

08006640 <_printf_common>:
 8006640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006644:	4691      	mov	r9, r2
 8006646:	461f      	mov	r7, r3
 8006648:	688a      	ldr	r2, [r1, #8]
 800664a:	690b      	ldr	r3, [r1, #16]
 800664c:	4606      	mov	r6, r0
 800664e:	4293      	cmp	r3, r2
 8006650:	bfb8      	it	lt
 8006652:	4613      	movlt	r3, r2
 8006654:	f8c9 3000 	str.w	r3, [r9]
 8006658:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800665c:	460c      	mov	r4, r1
 800665e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006662:	b112      	cbz	r2, 800666a <_printf_common+0x2a>
 8006664:	3301      	adds	r3, #1
 8006666:	f8c9 3000 	str.w	r3, [r9]
 800666a:	6823      	ldr	r3, [r4, #0]
 800666c:	0699      	lsls	r1, r3, #26
 800666e:	bf42      	ittt	mi
 8006670:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006674:	3302      	addmi	r3, #2
 8006676:	f8c9 3000 	strmi.w	r3, [r9]
 800667a:	6825      	ldr	r5, [r4, #0]
 800667c:	f015 0506 	ands.w	r5, r5, #6
 8006680:	d107      	bne.n	8006692 <_printf_common+0x52>
 8006682:	f104 0a19 	add.w	sl, r4, #25
 8006686:	68e3      	ldr	r3, [r4, #12]
 8006688:	f8d9 2000 	ldr.w	r2, [r9]
 800668c:	1a9b      	subs	r3, r3, r2
 800668e:	42ab      	cmp	r3, r5
 8006690:	dc29      	bgt.n	80066e6 <_printf_common+0xa6>
 8006692:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006696:	6822      	ldr	r2, [r4, #0]
 8006698:	3300      	adds	r3, #0
 800669a:	bf18      	it	ne
 800669c:	2301      	movne	r3, #1
 800669e:	0692      	lsls	r2, r2, #26
 80066a0:	d42e      	bmi.n	8006700 <_printf_common+0xc0>
 80066a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80066a6:	4639      	mov	r1, r7
 80066a8:	4630      	mov	r0, r6
 80066aa:	47c0      	blx	r8
 80066ac:	3001      	adds	r0, #1
 80066ae:	d021      	beq.n	80066f4 <_printf_common+0xb4>
 80066b0:	6823      	ldr	r3, [r4, #0]
 80066b2:	68e5      	ldr	r5, [r4, #12]
 80066b4:	f003 0306 	and.w	r3, r3, #6
 80066b8:	2b04      	cmp	r3, #4
 80066ba:	bf18      	it	ne
 80066bc:	2500      	movne	r5, #0
 80066be:	f8d9 2000 	ldr.w	r2, [r9]
 80066c2:	f04f 0900 	mov.w	r9, #0
 80066c6:	bf08      	it	eq
 80066c8:	1aad      	subeq	r5, r5, r2
 80066ca:	68a3      	ldr	r3, [r4, #8]
 80066cc:	6922      	ldr	r2, [r4, #16]
 80066ce:	bf08      	it	eq
 80066d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80066d4:	4293      	cmp	r3, r2
 80066d6:	bfc4      	itt	gt
 80066d8:	1a9b      	subgt	r3, r3, r2
 80066da:	18ed      	addgt	r5, r5, r3
 80066dc:	341a      	adds	r4, #26
 80066de:	454d      	cmp	r5, r9
 80066e0:	d11a      	bne.n	8006718 <_printf_common+0xd8>
 80066e2:	2000      	movs	r0, #0
 80066e4:	e008      	b.n	80066f8 <_printf_common+0xb8>
 80066e6:	2301      	movs	r3, #1
 80066e8:	4652      	mov	r2, sl
 80066ea:	4639      	mov	r1, r7
 80066ec:	4630      	mov	r0, r6
 80066ee:	47c0      	blx	r8
 80066f0:	3001      	adds	r0, #1
 80066f2:	d103      	bne.n	80066fc <_printf_common+0xbc>
 80066f4:	f04f 30ff 	mov.w	r0, #4294967295
 80066f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066fc:	3501      	adds	r5, #1
 80066fe:	e7c2      	b.n	8006686 <_printf_common+0x46>
 8006700:	2030      	movs	r0, #48	; 0x30
 8006702:	18e1      	adds	r1, r4, r3
 8006704:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006708:	1c5a      	adds	r2, r3, #1
 800670a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800670e:	4422      	add	r2, r4
 8006710:	3302      	adds	r3, #2
 8006712:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006716:	e7c4      	b.n	80066a2 <_printf_common+0x62>
 8006718:	2301      	movs	r3, #1
 800671a:	4622      	mov	r2, r4
 800671c:	4639      	mov	r1, r7
 800671e:	4630      	mov	r0, r6
 8006720:	47c0      	blx	r8
 8006722:	3001      	adds	r0, #1
 8006724:	d0e6      	beq.n	80066f4 <_printf_common+0xb4>
 8006726:	f109 0901 	add.w	r9, r9, #1
 800672a:	e7d8      	b.n	80066de <_printf_common+0x9e>

0800672c <_printf_i>:
 800672c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006730:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006734:	460c      	mov	r4, r1
 8006736:	7e09      	ldrb	r1, [r1, #24]
 8006738:	b085      	sub	sp, #20
 800673a:	296e      	cmp	r1, #110	; 0x6e
 800673c:	4617      	mov	r7, r2
 800673e:	4606      	mov	r6, r0
 8006740:	4698      	mov	r8, r3
 8006742:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006744:	f000 80b3 	beq.w	80068ae <_printf_i+0x182>
 8006748:	d822      	bhi.n	8006790 <_printf_i+0x64>
 800674a:	2963      	cmp	r1, #99	; 0x63
 800674c:	d036      	beq.n	80067bc <_printf_i+0x90>
 800674e:	d80a      	bhi.n	8006766 <_printf_i+0x3a>
 8006750:	2900      	cmp	r1, #0
 8006752:	f000 80b9 	beq.w	80068c8 <_printf_i+0x19c>
 8006756:	2958      	cmp	r1, #88	; 0x58
 8006758:	f000 8083 	beq.w	8006862 <_printf_i+0x136>
 800675c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006760:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006764:	e032      	b.n	80067cc <_printf_i+0xa0>
 8006766:	2964      	cmp	r1, #100	; 0x64
 8006768:	d001      	beq.n	800676e <_printf_i+0x42>
 800676a:	2969      	cmp	r1, #105	; 0x69
 800676c:	d1f6      	bne.n	800675c <_printf_i+0x30>
 800676e:	6820      	ldr	r0, [r4, #0]
 8006770:	6813      	ldr	r3, [r2, #0]
 8006772:	0605      	lsls	r5, r0, #24
 8006774:	f103 0104 	add.w	r1, r3, #4
 8006778:	d52a      	bpl.n	80067d0 <_printf_i+0xa4>
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	6011      	str	r1, [r2, #0]
 800677e:	2b00      	cmp	r3, #0
 8006780:	da03      	bge.n	800678a <_printf_i+0x5e>
 8006782:	222d      	movs	r2, #45	; 0x2d
 8006784:	425b      	negs	r3, r3
 8006786:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800678a:	486f      	ldr	r0, [pc, #444]	; (8006948 <_printf_i+0x21c>)
 800678c:	220a      	movs	r2, #10
 800678e:	e039      	b.n	8006804 <_printf_i+0xd8>
 8006790:	2973      	cmp	r1, #115	; 0x73
 8006792:	f000 809d 	beq.w	80068d0 <_printf_i+0x1a4>
 8006796:	d808      	bhi.n	80067aa <_printf_i+0x7e>
 8006798:	296f      	cmp	r1, #111	; 0x6f
 800679a:	d020      	beq.n	80067de <_printf_i+0xb2>
 800679c:	2970      	cmp	r1, #112	; 0x70
 800679e:	d1dd      	bne.n	800675c <_printf_i+0x30>
 80067a0:	6823      	ldr	r3, [r4, #0]
 80067a2:	f043 0320 	orr.w	r3, r3, #32
 80067a6:	6023      	str	r3, [r4, #0]
 80067a8:	e003      	b.n	80067b2 <_printf_i+0x86>
 80067aa:	2975      	cmp	r1, #117	; 0x75
 80067ac:	d017      	beq.n	80067de <_printf_i+0xb2>
 80067ae:	2978      	cmp	r1, #120	; 0x78
 80067b0:	d1d4      	bne.n	800675c <_printf_i+0x30>
 80067b2:	2378      	movs	r3, #120	; 0x78
 80067b4:	4865      	ldr	r0, [pc, #404]	; (800694c <_printf_i+0x220>)
 80067b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80067ba:	e055      	b.n	8006868 <_printf_i+0x13c>
 80067bc:	6813      	ldr	r3, [r2, #0]
 80067be:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067c2:	1d19      	adds	r1, r3, #4
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	6011      	str	r1, [r2, #0]
 80067c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80067cc:	2301      	movs	r3, #1
 80067ce:	e08c      	b.n	80068ea <_printf_i+0x1be>
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80067d6:	6011      	str	r1, [r2, #0]
 80067d8:	bf18      	it	ne
 80067da:	b21b      	sxthne	r3, r3
 80067dc:	e7cf      	b.n	800677e <_printf_i+0x52>
 80067de:	6813      	ldr	r3, [r2, #0]
 80067e0:	6825      	ldr	r5, [r4, #0]
 80067e2:	1d18      	adds	r0, r3, #4
 80067e4:	6010      	str	r0, [r2, #0]
 80067e6:	0628      	lsls	r0, r5, #24
 80067e8:	d501      	bpl.n	80067ee <_printf_i+0xc2>
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	e002      	b.n	80067f4 <_printf_i+0xc8>
 80067ee:	0668      	lsls	r0, r5, #25
 80067f0:	d5fb      	bpl.n	80067ea <_printf_i+0xbe>
 80067f2:	881b      	ldrh	r3, [r3, #0]
 80067f4:	296f      	cmp	r1, #111	; 0x6f
 80067f6:	bf14      	ite	ne
 80067f8:	220a      	movne	r2, #10
 80067fa:	2208      	moveq	r2, #8
 80067fc:	4852      	ldr	r0, [pc, #328]	; (8006948 <_printf_i+0x21c>)
 80067fe:	2100      	movs	r1, #0
 8006800:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006804:	6865      	ldr	r5, [r4, #4]
 8006806:	2d00      	cmp	r5, #0
 8006808:	60a5      	str	r5, [r4, #8]
 800680a:	f2c0 8095 	blt.w	8006938 <_printf_i+0x20c>
 800680e:	6821      	ldr	r1, [r4, #0]
 8006810:	f021 0104 	bic.w	r1, r1, #4
 8006814:	6021      	str	r1, [r4, #0]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d13d      	bne.n	8006896 <_printf_i+0x16a>
 800681a:	2d00      	cmp	r5, #0
 800681c:	f040 808e 	bne.w	800693c <_printf_i+0x210>
 8006820:	4665      	mov	r5, ip
 8006822:	2a08      	cmp	r2, #8
 8006824:	d10b      	bne.n	800683e <_printf_i+0x112>
 8006826:	6823      	ldr	r3, [r4, #0]
 8006828:	07db      	lsls	r3, r3, #31
 800682a:	d508      	bpl.n	800683e <_printf_i+0x112>
 800682c:	6923      	ldr	r3, [r4, #16]
 800682e:	6862      	ldr	r2, [r4, #4]
 8006830:	429a      	cmp	r2, r3
 8006832:	bfde      	ittt	le
 8006834:	2330      	movle	r3, #48	; 0x30
 8006836:	f805 3c01 	strble.w	r3, [r5, #-1]
 800683a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800683e:	ebac 0305 	sub.w	r3, ip, r5
 8006842:	6123      	str	r3, [r4, #16]
 8006844:	f8cd 8000 	str.w	r8, [sp]
 8006848:	463b      	mov	r3, r7
 800684a:	aa03      	add	r2, sp, #12
 800684c:	4621      	mov	r1, r4
 800684e:	4630      	mov	r0, r6
 8006850:	f7ff fef6 	bl	8006640 <_printf_common>
 8006854:	3001      	adds	r0, #1
 8006856:	d14d      	bne.n	80068f4 <_printf_i+0x1c8>
 8006858:	f04f 30ff 	mov.w	r0, #4294967295
 800685c:	b005      	add	sp, #20
 800685e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006862:	4839      	ldr	r0, [pc, #228]	; (8006948 <_printf_i+0x21c>)
 8006864:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006868:	6813      	ldr	r3, [r2, #0]
 800686a:	6821      	ldr	r1, [r4, #0]
 800686c:	1d1d      	adds	r5, r3, #4
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	6015      	str	r5, [r2, #0]
 8006872:	060a      	lsls	r2, r1, #24
 8006874:	d50b      	bpl.n	800688e <_printf_i+0x162>
 8006876:	07ca      	lsls	r2, r1, #31
 8006878:	bf44      	itt	mi
 800687a:	f041 0120 	orrmi.w	r1, r1, #32
 800687e:	6021      	strmi	r1, [r4, #0]
 8006880:	b91b      	cbnz	r3, 800688a <_printf_i+0x15e>
 8006882:	6822      	ldr	r2, [r4, #0]
 8006884:	f022 0220 	bic.w	r2, r2, #32
 8006888:	6022      	str	r2, [r4, #0]
 800688a:	2210      	movs	r2, #16
 800688c:	e7b7      	b.n	80067fe <_printf_i+0xd2>
 800688e:	064d      	lsls	r5, r1, #25
 8006890:	bf48      	it	mi
 8006892:	b29b      	uxthmi	r3, r3
 8006894:	e7ef      	b.n	8006876 <_printf_i+0x14a>
 8006896:	4665      	mov	r5, ip
 8006898:	fbb3 f1f2 	udiv	r1, r3, r2
 800689c:	fb02 3311 	mls	r3, r2, r1, r3
 80068a0:	5cc3      	ldrb	r3, [r0, r3]
 80068a2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80068a6:	460b      	mov	r3, r1
 80068a8:	2900      	cmp	r1, #0
 80068aa:	d1f5      	bne.n	8006898 <_printf_i+0x16c>
 80068ac:	e7b9      	b.n	8006822 <_printf_i+0xf6>
 80068ae:	6813      	ldr	r3, [r2, #0]
 80068b0:	6825      	ldr	r5, [r4, #0]
 80068b2:	1d18      	adds	r0, r3, #4
 80068b4:	6961      	ldr	r1, [r4, #20]
 80068b6:	6010      	str	r0, [r2, #0]
 80068b8:	0628      	lsls	r0, r5, #24
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	d501      	bpl.n	80068c2 <_printf_i+0x196>
 80068be:	6019      	str	r1, [r3, #0]
 80068c0:	e002      	b.n	80068c8 <_printf_i+0x19c>
 80068c2:	066a      	lsls	r2, r5, #25
 80068c4:	d5fb      	bpl.n	80068be <_printf_i+0x192>
 80068c6:	8019      	strh	r1, [r3, #0]
 80068c8:	2300      	movs	r3, #0
 80068ca:	4665      	mov	r5, ip
 80068cc:	6123      	str	r3, [r4, #16]
 80068ce:	e7b9      	b.n	8006844 <_printf_i+0x118>
 80068d0:	6813      	ldr	r3, [r2, #0]
 80068d2:	1d19      	adds	r1, r3, #4
 80068d4:	6011      	str	r1, [r2, #0]
 80068d6:	681d      	ldr	r5, [r3, #0]
 80068d8:	6862      	ldr	r2, [r4, #4]
 80068da:	2100      	movs	r1, #0
 80068dc:	4628      	mov	r0, r5
 80068de:	f000 f847 	bl	8006970 <memchr>
 80068e2:	b108      	cbz	r0, 80068e8 <_printf_i+0x1bc>
 80068e4:	1b40      	subs	r0, r0, r5
 80068e6:	6060      	str	r0, [r4, #4]
 80068e8:	6863      	ldr	r3, [r4, #4]
 80068ea:	6123      	str	r3, [r4, #16]
 80068ec:	2300      	movs	r3, #0
 80068ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068f2:	e7a7      	b.n	8006844 <_printf_i+0x118>
 80068f4:	6923      	ldr	r3, [r4, #16]
 80068f6:	462a      	mov	r2, r5
 80068f8:	4639      	mov	r1, r7
 80068fa:	4630      	mov	r0, r6
 80068fc:	47c0      	blx	r8
 80068fe:	3001      	adds	r0, #1
 8006900:	d0aa      	beq.n	8006858 <_printf_i+0x12c>
 8006902:	6823      	ldr	r3, [r4, #0]
 8006904:	079b      	lsls	r3, r3, #30
 8006906:	d413      	bmi.n	8006930 <_printf_i+0x204>
 8006908:	68e0      	ldr	r0, [r4, #12]
 800690a:	9b03      	ldr	r3, [sp, #12]
 800690c:	4298      	cmp	r0, r3
 800690e:	bfb8      	it	lt
 8006910:	4618      	movlt	r0, r3
 8006912:	e7a3      	b.n	800685c <_printf_i+0x130>
 8006914:	2301      	movs	r3, #1
 8006916:	464a      	mov	r2, r9
 8006918:	4639      	mov	r1, r7
 800691a:	4630      	mov	r0, r6
 800691c:	47c0      	blx	r8
 800691e:	3001      	adds	r0, #1
 8006920:	d09a      	beq.n	8006858 <_printf_i+0x12c>
 8006922:	3501      	adds	r5, #1
 8006924:	68e3      	ldr	r3, [r4, #12]
 8006926:	9a03      	ldr	r2, [sp, #12]
 8006928:	1a9b      	subs	r3, r3, r2
 800692a:	42ab      	cmp	r3, r5
 800692c:	dcf2      	bgt.n	8006914 <_printf_i+0x1e8>
 800692e:	e7eb      	b.n	8006908 <_printf_i+0x1dc>
 8006930:	2500      	movs	r5, #0
 8006932:	f104 0919 	add.w	r9, r4, #25
 8006936:	e7f5      	b.n	8006924 <_printf_i+0x1f8>
 8006938:	2b00      	cmp	r3, #0
 800693a:	d1ac      	bne.n	8006896 <_printf_i+0x16a>
 800693c:	7803      	ldrb	r3, [r0, #0]
 800693e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006942:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006946:	e76c      	b.n	8006822 <_printf_i+0xf6>
 8006948:	08007e95 	.word	0x08007e95
 800694c:	08007ea6 	.word	0x08007ea6

08006950 <_sbrk_r>:
 8006950:	b538      	push	{r3, r4, r5, lr}
 8006952:	2300      	movs	r3, #0
 8006954:	4c05      	ldr	r4, [pc, #20]	; (800696c <_sbrk_r+0x1c>)
 8006956:	4605      	mov	r5, r0
 8006958:	4608      	mov	r0, r1
 800695a:	6023      	str	r3, [r4, #0]
 800695c:	f7fa fbc6 	bl	80010ec <_sbrk>
 8006960:	1c43      	adds	r3, r0, #1
 8006962:	d102      	bne.n	800696a <_sbrk_r+0x1a>
 8006964:	6823      	ldr	r3, [r4, #0]
 8006966:	b103      	cbz	r3, 800696a <_sbrk_r+0x1a>
 8006968:	602b      	str	r3, [r5, #0]
 800696a:	bd38      	pop	{r3, r4, r5, pc}
 800696c:	200005fc 	.word	0x200005fc

08006970 <memchr>:
 8006970:	b510      	push	{r4, lr}
 8006972:	b2c9      	uxtb	r1, r1
 8006974:	4402      	add	r2, r0
 8006976:	4290      	cmp	r0, r2
 8006978:	4603      	mov	r3, r0
 800697a:	d101      	bne.n	8006980 <memchr+0x10>
 800697c:	2300      	movs	r3, #0
 800697e:	e003      	b.n	8006988 <memchr+0x18>
 8006980:	781c      	ldrb	r4, [r3, #0]
 8006982:	3001      	adds	r0, #1
 8006984:	428c      	cmp	r4, r1
 8006986:	d1f6      	bne.n	8006976 <memchr+0x6>
 8006988:	4618      	mov	r0, r3
 800698a:	bd10      	pop	{r4, pc}

0800698c <memcpy>:
 800698c:	b510      	push	{r4, lr}
 800698e:	1e43      	subs	r3, r0, #1
 8006990:	440a      	add	r2, r1
 8006992:	4291      	cmp	r1, r2
 8006994:	d100      	bne.n	8006998 <memcpy+0xc>
 8006996:	bd10      	pop	{r4, pc}
 8006998:	f811 4b01 	ldrb.w	r4, [r1], #1
 800699c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069a0:	e7f7      	b.n	8006992 <memcpy+0x6>

080069a2 <memmove>:
 80069a2:	4288      	cmp	r0, r1
 80069a4:	b510      	push	{r4, lr}
 80069a6:	eb01 0302 	add.w	r3, r1, r2
 80069aa:	d807      	bhi.n	80069bc <memmove+0x1a>
 80069ac:	1e42      	subs	r2, r0, #1
 80069ae:	4299      	cmp	r1, r3
 80069b0:	d00a      	beq.n	80069c8 <memmove+0x26>
 80069b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069b6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80069ba:	e7f8      	b.n	80069ae <memmove+0xc>
 80069bc:	4283      	cmp	r3, r0
 80069be:	d9f5      	bls.n	80069ac <memmove+0xa>
 80069c0:	1881      	adds	r1, r0, r2
 80069c2:	1ad2      	subs	r2, r2, r3
 80069c4:	42d3      	cmn	r3, r2
 80069c6:	d100      	bne.n	80069ca <memmove+0x28>
 80069c8:	bd10      	pop	{r4, pc}
 80069ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80069ce:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80069d2:	e7f7      	b.n	80069c4 <memmove+0x22>

080069d4 <__malloc_lock>:
 80069d4:	4770      	bx	lr

080069d6 <__malloc_unlock>:
 80069d6:	4770      	bx	lr

080069d8 <_free_r>:
 80069d8:	b538      	push	{r3, r4, r5, lr}
 80069da:	4605      	mov	r5, r0
 80069dc:	2900      	cmp	r1, #0
 80069de:	d043      	beq.n	8006a68 <_free_r+0x90>
 80069e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069e4:	1f0c      	subs	r4, r1, #4
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	bfb8      	it	lt
 80069ea:	18e4      	addlt	r4, r4, r3
 80069ec:	f7ff fff2 	bl	80069d4 <__malloc_lock>
 80069f0:	4a1e      	ldr	r2, [pc, #120]	; (8006a6c <_free_r+0x94>)
 80069f2:	6813      	ldr	r3, [r2, #0]
 80069f4:	4610      	mov	r0, r2
 80069f6:	b933      	cbnz	r3, 8006a06 <_free_r+0x2e>
 80069f8:	6063      	str	r3, [r4, #4]
 80069fa:	6014      	str	r4, [r2, #0]
 80069fc:	4628      	mov	r0, r5
 80069fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a02:	f7ff bfe8 	b.w	80069d6 <__malloc_unlock>
 8006a06:	42a3      	cmp	r3, r4
 8006a08:	d90b      	bls.n	8006a22 <_free_r+0x4a>
 8006a0a:	6821      	ldr	r1, [r4, #0]
 8006a0c:	1862      	adds	r2, r4, r1
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	bf01      	itttt	eq
 8006a12:	681a      	ldreq	r2, [r3, #0]
 8006a14:	685b      	ldreq	r3, [r3, #4]
 8006a16:	1852      	addeq	r2, r2, r1
 8006a18:	6022      	streq	r2, [r4, #0]
 8006a1a:	6063      	str	r3, [r4, #4]
 8006a1c:	6004      	str	r4, [r0, #0]
 8006a1e:	e7ed      	b.n	80069fc <_free_r+0x24>
 8006a20:	4613      	mov	r3, r2
 8006a22:	685a      	ldr	r2, [r3, #4]
 8006a24:	b10a      	cbz	r2, 8006a2a <_free_r+0x52>
 8006a26:	42a2      	cmp	r2, r4
 8006a28:	d9fa      	bls.n	8006a20 <_free_r+0x48>
 8006a2a:	6819      	ldr	r1, [r3, #0]
 8006a2c:	1858      	adds	r0, r3, r1
 8006a2e:	42a0      	cmp	r0, r4
 8006a30:	d10b      	bne.n	8006a4a <_free_r+0x72>
 8006a32:	6820      	ldr	r0, [r4, #0]
 8006a34:	4401      	add	r1, r0
 8006a36:	1858      	adds	r0, r3, r1
 8006a38:	4282      	cmp	r2, r0
 8006a3a:	6019      	str	r1, [r3, #0]
 8006a3c:	d1de      	bne.n	80069fc <_free_r+0x24>
 8006a3e:	6810      	ldr	r0, [r2, #0]
 8006a40:	6852      	ldr	r2, [r2, #4]
 8006a42:	4401      	add	r1, r0
 8006a44:	6019      	str	r1, [r3, #0]
 8006a46:	605a      	str	r2, [r3, #4]
 8006a48:	e7d8      	b.n	80069fc <_free_r+0x24>
 8006a4a:	d902      	bls.n	8006a52 <_free_r+0x7a>
 8006a4c:	230c      	movs	r3, #12
 8006a4e:	602b      	str	r3, [r5, #0]
 8006a50:	e7d4      	b.n	80069fc <_free_r+0x24>
 8006a52:	6820      	ldr	r0, [r4, #0]
 8006a54:	1821      	adds	r1, r4, r0
 8006a56:	428a      	cmp	r2, r1
 8006a58:	bf01      	itttt	eq
 8006a5a:	6811      	ldreq	r1, [r2, #0]
 8006a5c:	6852      	ldreq	r2, [r2, #4]
 8006a5e:	1809      	addeq	r1, r1, r0
 8006a60:	6021      	streq	r1, [r4, #0]
 8006a62:	6062      	str	r2, [r4, #4]
 8006a64:	605c      	str	r4, [r3, #4]
 8006a66:	e7c9      	b.n	80069fc <_free_r+0x24>
 8006a68:	bd38      	pop	{r3, r4, r5, pc}
 8006a6a:	bf00      	nop
 8006a6c:	200004b4 	.word	0x200004b4

08006a70 <_realloc_r>:
 8006a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a72:	4607      	mov	r7, r0
 8006a74:	4614      	mov	r4, r2
 8006a76:	460e      	mov	r6, r1
 8006a78:	b921      	cbnz	r1, 8006a84 <_realloc_r+0x14>
 8006a7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006a7e:	4611      	mov	r1, r2
 8006a80:	f7ff bc32 	b.w	80062e8 <_malloc_r>
 8006a84:	b922      	cbnz	r2, 8006a90 <_realloc_r+0x20>
 8006a86:	f7ff ffa7 	bl	80069d8 <_free_r>
 8006a8a:	4625      	mov	r5, r4
 8006a8c:	4628      	mov	r0, r5
 8006a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a90:	f000 f814 	bl	8006abc <_malloc_usable_size_r>
 8006a94:	42a0      	cmp	r0, r4
 8006a96:	d20f      	bcs.n	8006ab8 <_realloc_r+0x48>
 8006a98:	4621      	mov	r1, r4
 8006a9a:	4638      	mov	r0, r7
 8006a9c:	f7ff fc24 	bl	80062e8 <_malloc_r>
 8006aa0:	4605      	mov	r5, r0
 8006aa2:	2800      	cmp	r0, #0
 8006aa4:	d0f2      	beq.n	8006a8c <_realloc_r+0x1c>
 8006aa6:	4631      	mov	r1, r6
 8006aa8:	4622      	mov	r2, r4
 8006aaa:	f7ff ff6f 	bl	800698c <memcpy>
 8006aae:	4631      	mov	r1, r6
 8006ab0:	4638      	mov	r0, r7
 8006ab2:	f7ff ff91 	bl	80069d8 <_free_r>
 8006ab6:	e7e9      	b.n	8006a8c <_realloc_r+0x1c>
 8006ab8:	4635      	mov	r5, r6
 8006aba:	e7e7      	b.n	8006a8c <_realloc_r+0x1c>

08006abc <_malloc_usable_size_r>:
 8006abc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ac0:	1f18      	subs	r0, r3, #4
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	bfbc      	itt	lt
 8006ac6:	580b      	ldrlt	r3, [r1, r0]
 8006ac8:	18c0      	addlt	r0, r0, r3
 8006aca:	4770      	bx	lr

08006acc <_init>:
 8006acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ace:	bf00      	nop
 8006ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ad2:	bc08      	pop	{r3}
 8006ad4:	469e      	mov	lr, r3
 8006ad6:	4770      	bx	lr

08006ad8 <_fini>:
 8006ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ada:	bf00      	nop
 8006adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ade:	bc08      	pop	{r3}
 8006ae0:	469e      	mov	lr, r3
 8006ae2:	4770      	bx	lr
